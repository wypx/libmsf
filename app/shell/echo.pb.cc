// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#include "echo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace echo {
constexpr EchoRequest::EchoRequest(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string) {
}
struct EchoRequestDefaultTypeInternal {
  constexpr EchoRequestDefaultTypeInternal()
      : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EchoRequestDefaultTypeInternal() {}
  union {
    EchoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EchoRequestDefaultTypeInternal
    _EchoRequest_default_instance_;
constexpr EchoResponse::EchoResponse(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : response_(
          &::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string) {}
struct EchoResponseDefaultTypeInternal {
  constexpr EchoResponseDefaultTypeInternal()
      : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EchoResponseDefaultTypeInternal() {}
  union {
    EchoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EchoResponseDefaultTypeInternal
    _EchoResponse_default_instance_;
constexpr ChronoCloneLoginPbRequest::ChronoCloneLoginPbRequest(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : vdisk_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
      src_vdisk_id_(
          &::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
      clone_res_id_(
          &::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
      src_top_oid_(
          &::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
      src_oid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
      clone_mode_(0),
      vdisk_cap_(uint64_t{0u}),
      sector_size_(0u),
      clone_tick_(0u),
      peer_size_per_shard_(uint64_t{0u}) {}
struct ChronoCloneLoginPbRequestDefaultTypeInternal {
  constexpr ChronoCloneLoginPbRequestDefaultTypeInternal()
      : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChronoCloneLoginPbRequestDefaultTypeInternal() {}
  union {
    ChronoCloneLoginPbRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    ChronoCloneLoginPbRequestDefaultTypeInternal
        _ChronoCloneLoginPbRequest_default_instance_;
constexpr ChronoCloneLoginPbResponse::ChronoCloneLoginPbResponse(
    ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
    : chrono_id_(
          &::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string),
      rc_(0),
      ark_version_(0u) {}
struct ChronoCloneLoginPbResponseDefaultTypeInternal {
  constexpr ChronoCloneLoginPbResponseDefaultTypeInternal()
      : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChronoCloneLoginPbResponseDefaultTypeInternal() {}
  union {
    ChronoCloneLoginPbResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    ChronoCloneLoginPbResponseDefaultTypeInternal
        _ChronoCloneLoginPbResponse_default_instance_;
}  // namespace echo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_echo_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
    file_level_enum_descriptors_echo_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor*
    file_level_service_descriptors_echo_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_echo_2eproto::offsets
    [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::echo::EchoRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::echo::EchoRequest, message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::echo::EchoResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::echo::EchoResponse, response_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, vdisk_id_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, sector_size_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, vdisk_cap_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, src_vdisk_id_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, clone_tick_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, clone_res_id_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest,
                              peer_size_per_shard_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, clone_mode_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, src_top_oid_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, src_oid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbResponse,
                              _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbResponse, rc_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbResponse, chrono_id_),
        PROTOBUF_FIELD_OFFSET(::echo::ChronoCloneLoginPbResponse,
                              ark_version_), };
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas
    [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::echo::EchoRequest)},
        {6, -1, sizeof(::echo::EchoResponse)},
        {12, -1, sizeof(::echo::ChronoCloneLoginPbRequest)},
        {27, -1, sizeof(::echo::ChronoCloneLoginPbResponse)}, };

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] =
    {reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
         &::echo::_EchoRequest_default_instance_),
     reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
         &::echo::_EchoResponse_default_instance_),
     reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
         &::echo::_ChronoCloneLoginPbRequest_default_instance_),
     reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
         &::echo::_ChronoCloneLoginPbResponse_default_instance_), };

const char descriptor_table_protodef_echo_2eproto[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) =
    "\n\necho.proto\022\004echo\"\036\n\013EchoRequest\022\017\n\007mes"
    "sage\030\001 \001(\t\" \n\014EchoResponse\022\020\n\010response\030\001"
    " \001(\t\"\377\001\n\031ChronoCloneLoginPbRequest\022\020\n\010vd"
    "isk_id\030\n \001(\t\022\023\n\013sector_size\030\024 "
    "\001(\r\022\021\n\tvdi"
    "sk_cap\030\036 \001(\004\022\024\n\014src_vdisk_id\030( "
    "\001(\t\022\022\n\ncl"
    "one_tick\0302 \001(\r\022\024\n\014clone_res_id\030< \001(\t\022\033\n\023"
    "peer_size_per_shard\030F \001(\004\022%\n\nclone_mode\030"
    "P \001(\0162\021.echo.PbCloneMode\022\023\n\013src_top_oid\030"
    "Z \001(\t\022\017\n\007src_oid\030d \001(\t\"d\n\032ChronoCloneLog"
    "inPbResponse\022\036\n\002rc\030\n \001(\0162\022.echo.Response"
    "Code\022\021\n\tchrono_id\030\024 \001(\t\022\023\n\013ark_version\030\036"
    " \001(\r*\227\001\n\013PbCloneMode\022\027\n\023PB_CLONE_UTM_TO_"
    "UTM\020\000\022\032\n\026PB_CLONE_UTM_TO_NATIVE\020\001\022\032\n\026PB_"
    "CLONE_NATIVE_TO_UTM\020\002\022\035\n\031PB_CLONE_NATIVE"
    "_TO_NATIVE\020\003\022\030\n\024PB_CLONE_KOALA_IMAGE\020\004*&"
    "\n\014ResponseCode\022\013\n\007SUCCESS\020\000\022\t\n\005ERROR\020\n2<"
    "\n\013EchoService\022-\n\004Echo\022\021.echo.EchoRequest"
    "\032\022.echo.EchoResponseB\003\200\001\001b\006proto3";
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_echo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_echo_2eproto = {
        false,
        false,
        713,
        descriptor_table_protodef_echo_2eproto,
        "echo.proto",
        &descriptor_table_echo_2eproto_once,
        nullptr,
        0,
        4,
        schemas,
        file_default_instances,
        TableStruct_echo_2eproto::offsets,
        file_level_metadata_echo_2eproto,
        file_level_enum_descriptors_echo_2eproto,
        file_level_service_descriptors_echo_2eproto, };
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::
    DescriptorTable*
descriptor_table_echo_2eproto_getter() {
  return &descriptor_table_echo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::
    AddDescriptorsRunner
        dynamic_init_dummy_echo_2eproto(&descriptor_table_echo_2eproto);
namespace echo {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PbCloneMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_echo_2eproto);
  return file_level_enum_descriptors_echo_2eproto[0];
}
bool PbCloneMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_echo_2eproto);
  return file_level_enum_descriptors_echo_2eproto[1];
}
bool ResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
      return true;
    default:
      return false;
  }
}

// ===================================================================

class EchoRequest::_Internal {
 public:
};

EchoRequest::EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:echo.EchoRequest)
}
EchoRequest::EchoRequest(const EchoRequest& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  message_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_message(), GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:echo.EchoRequest)
}

inline void EchoRequest::SharedCtor() {
  message_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:echo.EchoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EchoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EchoRequest::ArenaDtor(void* object) {
  EchoRequest* _this = reinterpret_cast<EchoRequest*>(object);
  (void)_this;
}
void EchoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void EchoRequest::SetCachedSize(int size) const { _cached_size_.Set(size); }

void EchoRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:echo.EchoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoRequest::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "echo.EchoRequest.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:echo.EchoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string message = 1;
  if (!this->message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_message().data(),
        static_cast<int>(this->_internal_message().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "echo.EchoRequest.message");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:echo.EchoRequest)
  return target;
}

size_t EchoRequest::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:echo.EchoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string message = 1;
  if (!this->message().empty()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EchoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EchoRequest::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* EchoRequest::GetClassData()
    const {
  return &_class_data_;
}

void EchoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                            const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EchoRequest*>(to)
      ->MergeFrom(static_cast<const EchoRequest&>(from));
}

void EchoRequest::MergeFrom(const EchoRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:echo.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (!from.message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:echo.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequest::IsInitialized() const { return true; }

void EchoRequest::InternalSwap(EchoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(), &other->message_,
      other->GetArenaForAllocation());
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_echo_2eproto_getter,
      &descriptor_table_echo_2eproto_once, file_level_metadata_echo_2eproto[0]);
}

// ===================================================================

class EchoResponse::_Internal {
 public:
};

EchoResponse::EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                           bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:echo.EchoResponse)
}
EchoResponse::EchoResponse(const EchoResponse& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  response_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_response(), GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:echo.EchoResponse)
}

inline void EchoResponse::SharedCtor() {
  response_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EchoResponse::~EchoResponse() {
  // @@protoc_insertion_point(destructor:echo.EchoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EchoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  response_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EchoResponse::ArenaDtor(void* object) {
  EchoResponse* _this = reinterpret_cast<EchoResponse*>(object);
  (void)_this;
}
void EchoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void EchoResponse::SetCachedSize(int size) const { _cached_size_.Set(size); }

void EchoResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:echo.EchoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  response_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EchoResponse::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "echo.EchoResponse.response"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EchoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:echo.EchoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string response = 1;
  if (!this->response().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_response().data(),
        static_cast<int>(this->_internal_response().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "echo.EchoResponse.response");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:echo.EchoResponse)
  return target;
}

size_t EchoResponse::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:echo.EchoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string response = 1;
  if (!this->response().empty()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EchoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EchoResponse::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* EchoResponse::GetClassData()
    const {
  return &_class_data_;
}

void EchoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                             const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EchoResponse*>(to)
      ->MergeFrom(static_cast<const EchoResponse&>(from));
}

void EchoResponse::MergeFrom(const EchoResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:echo.EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (!from.response().empty()) {
    _internal_set_response(from._internal_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
}

void EchoResponse::CopyFrom(const EchoResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:echo.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResponse::IsInitialized() const { return true; }

void EchoResponse::InternalSwap(EchoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &response_, GetArenaForAllocation(), &other->response_,
      other->GetArenaForAllocation());
}

::PROTOBUF_NAMESPACE_ID::Metadata EchoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_echo_2eproto_getter,
      &descriptor_table_echo_2eproto_once, file_level_metadata_echo_2eproto[1]);
}

// ===================================================================

class ChronoCloneLoginPbRequest::_Internal {
 public:
};

ChronoCloneLoginPbRequest::ChronoCloneLoginPbRequest(
    ::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:echo.ChronoCloneLoginPbRequest)
}
ChronoCloneLoginPbRequest::ChronoCloneLoginPbRequest(
    const ChronoCloneLoginPbRequest& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  vdisk_id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vdisk_id().empty()) {
    vdisk_id_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_vdisk_id(), GetArenaForAllocation());
  }
  src_vdisk_id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_vdisk_id().empty()) {
    src_vdisk_id_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_src_vdisk_id(), GetArenaForAllocation());
  }
  clone_res_id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clone_res_id().empty()) {
    clone_res_id_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_clone_res_id(), GetArenaForAllocation());
  }
  src_top_oid_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_top_oid().empty()) {
    src_top_oid_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_src_top_oid(), GetArenaForAllocation());
  }
  src_oid_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_oid().empty()) {
    src_oid_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_src_oid(), GetArenaForAllocation());
  }
  ::memcpy(&clone_mode_, &from.clone_mode_,
           static_cast<size_t>(reinterpret_cast<char*>(&peer_size_per_shard_) -
                               reinterpret_cast<char*>(&clone_mode_)) +
               sizeof(peer_size_per_shard_));
  // @@protoc_insertion_point(copy_constructor:echo.ChronoCloneLoginPbRequest)
}

inline void ChronoCloneLoginPbRequest::SharedCtor() {
  vdisk_id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_vdisk_id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clone_res_id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_top_oid_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_oid_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) +
               static_cast<size_t>(reinterpret_cast<char*>(&clone_mode_) -
                                   reinterpret_cast<char*>(this)),
           0,
           static_cast<size_t>(reinterpret_cast<char*>(&peer_size_per_shard_) -
                               reinterpret_cast<char*>(&clone_mode_)) +
               sizeof(peer_size_per_shard_));
}

ChronoCloneLoginPbRequest::~ChronoCloneLoginPbRequest() {
  // @@protoc_insertion_point(destructor:echo.ChronoCloneLoginPbRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChronoCloneLoginPbRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vdisk_id_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_vdisk_id_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clone_res_id_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_top_oid_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_oid_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChronoCloneLoginPbRequest::ArenaDtor(void* object) {
  ChronoCloneLoginPbRequest* _this =
      reinterpret_cast<ChronoCloneLoginPbRequest*>(object);
  (void)_this;
}
void ChronoCloneLoginPbRequest::RegisterArenaDtor(
    ::PROTOBUF_NAMESPACE_ID::Arena*) {}
void ChronoCloneLoginPbRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChronoCloneLoginPbRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:echo.ChronoCloneLoginPbRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  vdisk_id_.ClearToEmpty();
  src_vdisk_id_.ClearToEmpty();
  clone_res_id_.ClearToEmpty();
  src_top_oid_.ClearToEmpty();
  src_oid_.ClearToEmpty();
  ::memset(&clone_mode_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&peer_size_per_shard_) -
                               reinterpret_cast<char*>(&clone_mode_)) +
               sizeof(peer_size_per_shard_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChronoCloneLoginPbRequest::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vdisk_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_vdisk_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "echo.ChronoCloneLoginPbRequest.vdisk_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sector_size = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          sector_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 vdisk_cap = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          vdisk_cap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string src_vdisk_id = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_src_vdisk_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "echo.ChronoCloneLoginPbRequest.src_vdisk_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 clone_tick = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          clone_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clone_res_id = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_clone_res_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "echo.ChronoCloneLoginPbRequest.clone_res_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 peer_size_per_shard = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          peer_size_per_shard_ =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .echo.PbCloneMode clone_mode = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clone_mode(static_cast<::echo::PbCloneMode>(val));
        } else
          goto handle_unusual;
        continue;
      // string src_top_oid = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_src_top_oid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "echo.ChronoCloneLoginPbRequest.src_top_oid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string src_oid = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_src_oid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "echo.ChronoCloneLoginPbRequest.src_oid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChronoCloneLoginPbRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:echo.ChronoCloneLoginPbRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string vdisk_id = 10;
  if (!this->vdisk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_vdisk_id().data(),
        static_cast<int>(this->_internal_vdisk_id().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "echo.ChronoCloneLoginPbRequest.vdisk_id");
    target =
        stream->WriteStringMaybeAliased(10, this->_internal_vdisk_id(), target);
  }

  // uint32 sector_size = 20;
  if (this->sector_size() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            20, this->_internal_sector_size(), target);
  }

  // uint64 vdisk_cap = 30;
  if (this->vdisk_cap() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            30, this->_internal_vdisk_cap(), target);
  }

  // string src_vdisk_id = 40;
  if (!this->src_vdisk_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_src_vdisk_id().data(),
        static_cast<int>(this->_internal_src_vdisk_id().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "echo.ChronoCloneLoginPbRequest.src_vdisk_id");
    target = stream->WriteStringMaybeAliased(40, this->_internal_src_vdisk_id(),
                                             target);
  }

  // uint32 clone_tick = 50;
  if (this->clone_tick() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            50, this->_internal_clone_tick(), target);
  }

  // string clone_res_id = 60;
  if (!this->clone_res_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_clone_res_id().data(),
        static_cast<int>(this->_internal_clone_res_id().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "echo.ChronoCloneLoginPbRequest.clone_res_id");
    target = stream->WriteStringMaybeAliased(60, this->_internal_clone_res_id(),
                                             target);
  }

  // uint64 peer_size_per_shard = 70;
  if (this->peer_size_per_shard() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
            70, this->_internal_peer_size_per_shard(), target);
  }

  // .echo.PbCloneMode clone_mode = 80;
  if (this->clone_mode() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
            80, this->_internal_clone_mode(), target);
  }

  // string src_top_oid = 90;
  if (!this->src_top_oid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_src_top_oid().data(),
        static_cast<int>(this->_internal_src_top_oid().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "echo.ChronoCloneLoginPbRequest.src_top_oid");
    target = stream->WriteStringMaybeAliased(90, this->_internal_src_top_oid(),
                                             target);
  }

  // string src_oid = 100;
  if (!this->src_oid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_src_oid().data(),
        static_cast<int>(this->_internal_src_oid().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "echo.ChronoCloneLoginPbRequest.src_oid");
    target =
        stream->WriteStringMaybeAliased(100, this->_internal_src_oid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:echo.ChronoCloneLoginPbRequest)
  return target;
}

size_t ChronoCloneLoginPbRequest::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:echo.ChronoCloneLoginPbRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string vdisk_id = 10;
  if (!this->vdisk_id().empty()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_vdisk_id());
  }

  // string src_vdisk_id = 40;
  if (!this->src_vdisk_id().empty()) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src_vdisk_id());
  }

  // string clone_res_id = 60;
  if (!this->clone_res_id().empty()) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_clone_res_id());
  }

  // string src_top_oid = 90;
  if (!this->src_top_oid().empty()) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src_top_oid());
  }

  // string src_oid = 100;
  if (!this->src_oid().empty()) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_src_oid());
  }

  // .echo.PbCloneMode clone_mode = 80;
  if (this->clone_mode() != 0) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
                this->_internal_clone_mode());
  }

  // uint64 vdisk_cap = 30;
  if (this->vdisk_cap() != 0) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_vdisk_cap());
  }

  // uint32 sector_size = 20;
  if (this->sector_size() != 0) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_sector_size());
  }

  // uint32 clone_tick = 50;
  if (this->clone_tick() != 0) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_clone_tick());
  }

  // uint64 peer_size_per_shard = 70;
  if (this->peer_size_per_shard() != 0) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                this->_internal_peer_size_per_shard());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData
    ChronoCloneLoginPbRequest::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
        ChronoCloneLoginPbRequest::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
ChronoCloneLoginPbRequest::GetClassData() const {
  return &_class_data_;
}

void ChronoCloneLoginPbRequest::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message* to,
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChronoCloneLoginPbRequest*>(to)
      ->MergeFrom(static_cast<const ChronoCloneLoginPbRequest&>(from));
}

void ChronoCloneLoginPbRequest::MergeFrom(
    const ChronoCloneLoginPbRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:echo.ChronoCloneLoginPbRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (!from.vdisk_id().empty()) {
    _internal_set_vdisk_id(from._internal_vdisk_id());
  }
  if (!from.src_vdisk_id().empty()) {
    _internal_set_src_vdisk_id(from._internal_src_vdisk_id());
  }
  if (!from.clone_res_id().empty()) {
    _internal_set_clone_res_id(from._internal_clone_res_id());
  }
  if (!from.src_top_oid().empty()) {
    _internal_set_src_top_oid(from._internal_src_top_oid());
  }
  if (!from.src_oid().empty()) {
    _internal_set_src_oid(from._internal_src_oid());
  }
  if (from.clone_mode() != 0) {
    _internal_set_clone_mode(from._internal_clone_mode());
  }
  if (from.vdisk_cap() != 0) {
    _internal_set_vdisk_cap(from._internal_vdisk_cap());
  }
  if (from.sector_size() != 0) {
    _internal_set_sector_size(from._internal_sector_size());
  }
  if (from.clone_tick() != 0) {
    _internal_set_clone_tick(from._internal_clone_tick());
  }
  if (from.peer_size_per_shard() != 0) {
    _internal_set_peer_size_per_shard(from._internal_peer_size_per_shard());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
}

void ChronoCloneLoginPbRequest::CopyFrom(
    const ChronoCloneLoginPbRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:echo.ChronoCloneLoginPbRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChronoCloneLoginPbRequest::IsInitialized() const { return true; }

void ChronoCloneLoginPbRequest::InternalSwap(ChronoCloneLoginPbRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vdisk_id_, GetArenaForAllocation(), &other->vdisk_id_,
      other->GetArenaForAllocation());
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &src_vdisk_id_, GetArenaForAllocation(), &other->src_vdisk_id_,
      other->GetArenaForAllocation());
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clone_res_id_, GetArenaForAllocation(), &other->clone_res_id_,
      other->GetArenaForAllocation());
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &src_top_oid_, GetArenaForAllocation(), &other->src_top_oid_,
      other->GetArenaForAllocation());
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &src_oid_, GetArenaForAllocation(), &other->src_oid_,
      other->GetArenaForAllocation());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChronoCloneLoginPbRequest, peer_size_per_shard_) +
      sizeof(ChronoCloneLoginPbRequest::peer_size_per_shard_) -
      PROTOBUF_FIELD_OFFSET(ChronoCloneLoginPbRequest, clone_mode_)>(
      reinterpret_cast<char*>(&clone_mode_),
      reinterpret_cast<char*>(&other->clone_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChronoCloneLoginPbRequest::GetMetadata()
    const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_echo_2eproto_getter,
      &descriptor_table_echo_2eproto_once, file_level_metadata_echo_2eproto[2]);
}

// ===================================================================

class ChronoCloneLoginPbResponse::_Internal {
 public:
};

ChronoCloneLoginPbResponse::ChronoCloneLoginPbResponse(
    ::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:echo.ChronoCloneLoginPbResponse)
}
ChronoCloneLoginPbResponse::ChronoCloneLoginPbResponse(
    const ChronoCloneLoginPbResponse& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  chrono_id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chrono_id().empty()) {
    chrono_id_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        from._internal_chrono_id(), GetArenaForAllocation());
  }
  ::memcpy(&rc_, &from.rc_,
           static_cast<size_t>(reinterpret_cast<char*>(&ark_version_) -
                               reinterpret_cast<char*>(&rc_)) +
               sizeof(ark_version_));
  // @@protoc_insertion_point(copy_constructor:echo.ChronoCloneLoginPbResponse)
}

inline void ChronoCloneLoginPbResponse::SharedCtor() {
  chrono_id_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) +
               static_cast<size_t>(reinterpret_cast<char*>(&rc_) -
                                   reinterpret_cast<char*>(this)),
           0, static_cast<size_t>(reinterpret_cast<char*>(&ark_version_) -
                                  reinterpret_cast<char*>(&rc_)) +
                  sizeof(ark_version_));
}

ChronoCloneLoginPbResponse::~ChronoCloneLoginPbResponse() {
  // @@protoc_insertion_point(destructor:echo.ChronoCloneLoginPbResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChronoCloneLoginPbResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chrono_id_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChronoCloneLoginPbResponse::ArenaDtor(void* object) {
  ChronoCloneLoginPbResponse* _this =
      reinterpret_cast<ChronoCloneLoginPbResponse*>(object);
  (void)_this;
}
void ChronoCloneLoginPbResponse::RegisterArenaDtor(
    ::PROTOBUF_NAMESPACE_ID::Arena*) {}
void ChronoCloneLoginPbResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChronoCloneLoginPbResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:echo.ChronoCloneLoginPbResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  chrono_id_.ClearToEmpty();
  ::memset(&rc_, 0, static_cast<size_t>(reinterpret_cast<char*>(&ark_version_) -
                                        reinterpret_cast<char*>(&rc_)) +
                        sizeof(ark_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChronoCloneLoginPbResponse::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .echo.ResponseCode rc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rc(static_cast<::echo::ResponseCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string chrono_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_chrono_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "echo.ChronoCloneLoginPbResponse.chrono_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ark_version = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ark_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChronoCloneLoginPbResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:echo.ChronoCloneLoginPbResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .echo.ResponseCode rc = 10;
  if (this->rc() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
            10, this->_internal_rc(), target);
  }

  // string chrono_id = 20;
  if (!this->chrono_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_chrono_id().data(),
        static_cast<int>(this->_internal_chrono_id().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "echo.ChronoCloneLoginPbResponse.chrono_id");
    target = stream->WriteStringMaybeAliased(20, this->_internal_chrono_id(),
                                             target);
  }

  // uint32 ark_version = 30;
  if (this->ark_version() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            30, this->_internal_ark_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:echo.ChronoCloneLoginPbResponse)
  return target;
}

size_t ChronoCloneLoginPbResponse::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:echo.ChronoCloneLoginPbResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string chrono_id = 20;
  if (!this->chrono_id().empty()) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_chrono_id());
  }

  // .echo.ResponseCode rc = 10;
  if (this->rc() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
                this->_internal_rc());
  }

  // uint32 ark_version = 30;
  if (this->ark_version() != 0) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                this->_internal_ark_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData
    ChronoCloneLoginPbResponse::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
        ChronoCloneLoginPbResponse::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
ChronoCloneLoginPbResponse::GetClassData() const {
  return &_class_data_;
}

void ChronoCloneLoginPbResponse::MergeImpl(
    ::PROTOBUF_NAMESPACE_ID::Message* to,
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChronoCloneLoginPbResponse*>(to)
      ->MergeFrom(static_cast<const ChronoCloneLoginPbResponse&>(from));
}

void ChronoCloneLoginPbResponse::MergeFrom(
    const ChronoCloneLoginPbResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:echo.ChronoCloneLoginPbResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (!from.chrono_id().empty()) {
    _internal_set_chrono_id(from._internal_chrono_id());
  }
  if (from.rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
  if (from.ark_version() != 0) {
    _internal_set_ark_version(from._internal_ark_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
}

void ChronoCloneLoginPbResponse::CopyFrom(
    const ChronoCloneLoginPbResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:echo.ChronoCloneLoginPbResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChronoCloneLoginPbResponse::IsInitialized() const { return true; }

void ChronoCloneLoginPbResponse::InternalSwap(
    ChronoCloneLoginPbResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chrono_id_, GetArenaForAllocation(), &other->chrono_id_,
      other->GetArenaForAllocation());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChronoCloneLoginPbResponse, ark_version_) +
      sizeof(ChronoCloneLoginPbResponse::ark_version_) -
      PROTOBUF_FIELD_OFFSET(ChronoCloneLoginPbResponse, rc_)>(
      reinterpret_cast<char*>(&rc_), reinterpret_cast<char*>(&other->rc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChronoCloneLoginPbResponse::GetMetadata()
    const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_echo_2eproto_getter,
      &descriptor_table_echo_2eproto_once, file_level_metadata_echo_2eproto[3]);
}

// ===================================================================

EchoService::~EchoService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EchoService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_echo_2eproto);
  return file_level_service_descriptors_echo_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* EchoService::GetDescriptor() {
  return descriptor();
}

void EchoService::Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::echo::EchoRequest*, ::echo::EchoResponse*,
                       ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Echo() not implemented.");
  done->Run();
}

void EchoService::CallMethod(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
    ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
    const ::PROTOBUF_NAMESPACE_ID::Message* request,
    ::PROTOBUF_NAMESPACE_ID::Message* response,
    ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(),
                   file_level_service_descriptors_echo_2eproto[0]);
  switch (method->index()) {
    case 0:
      Echo(controller, ::PROTOBUF_NAMESPACE_ID::internal::DownCast<
                           const ::echo::EchoRequest*>(request),
           ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::echo::EchoResponse*>(
               response),
           done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EchoService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::echo::EchoRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
                  ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& EchoService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::echo::EchoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
                  ->GetPrototype(method->output_type());
  }
}

EchoService_Stub::EchoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
    : channel_(channel), owns_channel_(false) {}
EchoService_Stub::EchoService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
    : channel_(channel),
      owns_channel_(ownership ==
                    ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
EchoService_Stub::~EchoService_Stub() {
  if (owns_channel_) delete channel_;
}

void EchoService_Stub::Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                            const ::echo::EchoRequest* request,
                            ::echo::EchoResponse* response,
                            ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0), controller, request, response,
                       done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace echo
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE::echo::EchoRequest*
Arena::CreateMaybeMessage<::echo::EchoRequest>(Arena* arena) {
  return Arena::CreateMessageInternal<::echo::EchoRequest>(arena);
}
template <>
PROTOBUF_NOINLINE::echo::EchoResponse*
Arena::CreateMaybeMessage<::echo::EchoResponse>(Arena* arena) {
  return Arena::CreateMessageInternal<::echo::EchoResponse>(arena);
}
template <>
PROTOBUF_NOINLINE::echo::ChronoCloneLoginPbRequest*
Arena::CreateMaybeMessage<::echo::ChronoCloneLoginPbRequest>(Arena* arena) {
  return Arena::CreateMessageInternal<::echo::ChronoCloneLoginPbRequest>(arena);
}
template <>
PROTOBUF_NOINLINE::echo::ChronoCloneLoginPbResponse*
Arena::CreateMaybeMessage<::echo::ChronoCloneLoginPbResponse>(Arena* arena) {
  return Arena::CreateMessageInternal<::echo::ChronoCloneLoginPbResponse>(
      arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
