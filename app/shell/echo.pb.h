// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_echo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_echo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_echo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_echo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_echo_2eproto;
namespace echo {
class ChronoCloneLoginPbRequest;
struct ChronoCloneLoginPbRequestDefaultTypeInternal;
extern ChronoCloneLoginPbRequestDefaultTypeInternal _ChronoCloneLoginPbRequest_default_instance_;
class ChronoCloneLoginPbResponse;
struct ChronoCloneLoginPbResponseDefaultTypeInternal;
extern ChronoCloneLoginPbResponseDefaultTypeInternal _ChronoCloneLoginPbResponse_default_instance_;
class EchoRequest;
struct EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EchoRequest_PeopleEntry_DoNotUse;
struct EchoRequest_PeopleEntry_DoNotUseDefaultTypeInternal;
extern EchoRequest_PeopleEntry_DoNotUseDefaultTypeInternal _EchoRequest_PeopleEntry_DoNotUse_default_instance_;
class EchoResponse;
struct EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
}  // namespace echo
PROTOBUF_NAMESPACE_OPEN
template<> ::echo::ChronoCloneLoginPbRequest* Arena::CreateMaybeMessage<::echo::ChronoCloneLoginPbRequest>(Arena*);
template<> ::echo::ChronoCloneLoginPbResponse* Arena::CreateMaybeMessage<::echo::ChronoCloneLoginPbResponse>(Arena*);
template<> ::echo::EchoRequest* Arena::CreateMaybeMessage<::echo::EchoRequest>(Arena*);
template<> ::echo::EchoRequest_PeopleEntry_DoNotUse* Arena::CreateMaybeMessage<::echo::EchoRequest_PeopleEntry_DoNotUse>(Arena*);
template<> ::echo::EchoResponse* Arena::CreateMaybeMessage<::echo::EchoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace echo {

enum PbCloneMode : int {
  PB_CLONE_UTM_TO_UTM = 0,
  PB_CLONE_UTM_TO_NATIVE = 1,
  PB_CLONE_NATIVE_TO_UTM = 2,
  PB_CLONE_NATIVE_TO_NATIVE = 3,
  PB_CLONE_KOALA_IMAGE = 4,
  PbCloneMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PbCloneMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PbCloneMode_IsValid(int value);
constexpr PbCloneMode PbCloneMode_MIN = PB_CLONE_UTM_TO_UTM;
constexpr PbCloneMode PbCloneMode_MAX = PB_CLONE_KOALA_IMAGE;
constexpr int PbCloneMode_ARRAYSIZE = PbCloneMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PbCloneMode_descriptor();
template<typename T>
inline const std::string& PbCloneMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PbCloneMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PbCloneMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PbCloneMode_descriptor(), enum_t_value);
}
inline bool PbCloneMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PbCloneMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PbCloneMode>(
    PbCloneMode_descriptor(), name, value);
}
enum ResponseCode : int {
  SUCCESS = 0,
  ERROR = 10,
  ResponseCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResponseCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResponseCode_IsValid(int value);
constexpr ResponseCode ResponseCode_MIN = SUCCESS;
constexpr ResponseCode ResponseCode_MAX = ERROR;
constexpr int ResponseCode_ARRAYSIZE = ResponseCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseCode_descriptor();
template<typename T>
inline const std::string& ResponseCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseCode_descriptor(), enum_t_value);
}
inline bool ResponseCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseCode>(
    ResponseCode_descriptor(), name, value);
}
// ===================================================================

class EchoRequest_PeopleEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EchoRequest_PeopleEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EchoRequest_PeopleEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  EchoRequest_PeopleEntry_DoNotUse();
  explicit constexpr EchoRequest_PeopleEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EchoRequest_PeopleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EchoRequest_PeopleEntry_DoNotUse& other);
  static const EchoRequest_PeopleEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EchoRequest_PeopleEntry_DoNotUse*>(&_EchoRequest_PeopleEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "echo.EchoRequest.PeopleEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class EchoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:echo.EchoRequest) */ {
 public:
  inline EchoRequest() : EchoRequest(nullptr) {}
  ~EchoRequest() override;
  explicit constexpr EchoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoRequest(const EchoRequest& from);
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestreplyCase {
    kRequest = 3,
    kResonse = 4,
    REQUESTREPLY_NOT_SET = 0,
  };

  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const final {
    return new EchoRequest();
  }

  EchoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EchoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "echo.EchoRequest";
  }
  protected:
  explicit EchoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPeopleFieldNumber = 2,
    kMessageFieldNumber = 1,
    kRequestFieldNumber = 3,
    kResonseFieldNumber = 4,
  };
  // map<string, uint64> people = 2;
  int people_size() const;
  private:
  int _internal_people_size() const;
  public:
  void clear_people();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_people() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_people();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >&
      people() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_people();

  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const std::string& request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request();
  PROTOBUF_MUST_USE_RESULT std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // string resonse = 4;
  bool has_resonse() const;
  private:
  bool _internal_has_resonse() const;
  public:
  void clear_resonse();
  const std::string& resonse() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resonse(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resonse();
  PROTOBUF_MUST_USE_RESULT std::string* release_resonse();
  void set_allocated_resonse(std::string* resonse);
  private:
  const std::string& _internal_resonse() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resonse(const std::string& value);
  std::string* _internal_mutable_resonse();
  public:

  void clear_requestreply();
  RequestreplyCase requestreply_case() const;
  // @@protoc_insertion_point(class_scope:echo.EchoRequest)
 private:
  class _Internal;
  void set_has_request();
  void set_has_resonse();

  inline bool has_requestreply() const;
  inline void clear_has_requestreply();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EchoRequest_PeopleEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::uint64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> people_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  union RequestreplyUnion {
    constexpr RequestreplyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resonse_;
  } requestreply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class EchoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:echo.EchoResponse) */ {
 public:
  inline EchoResponse() : EchoResponse(nullptr) {}
  ~EchoResponse() override;
  explicit constexpr EchoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoResponse(const EchoResponse& from);
  EchoResponse(EchoResponse&& from) noexcept
    : EchoResponse() {
    *this = ::std::move(from);
  }

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
               &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EchoResponse& a, EchoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoResponse* New() const final {
    return new EchoResponse();
  }

  EchoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EchoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "echo.EchoResponse";
  }
  protected:
  explicit EchoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // string response = 1;
  void clear_response();
  const std::string& response() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response();
  PROTOBUF_MUST_USE_RESULT std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // @@protoc_insertion_point(class_scope:echo.EchoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class ChronoCloneLoginPbRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:echo.ChronoCloneLoginPbRequest) */ {
 public:
  inline ChronoCloneLoginPbRequest() : ChronoCloneLoginPbRequest(nullptr) {}
  ~ChronoCloneLoginPbRequest() override;
  explicit constexpr ChronoCloneLoginPbRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChronoCloneLoginPbRequest(const ChronoCloneLoginPbRequest& from);
  ChronoCloneLoginPbRequest(ChronoCloneLoginPbRequest&& from) noexcept
    : ChronoCloneLoginPbRequest() {
    *this = ::std::move(from);
  }

  inline ChronoCloneLoginPbRequest& operator=(const ChronoCloneLoginPbRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChronoCloneLoginPbRequest& operator=(ChronoCloneLoginPbRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChronoCloneLoginPbRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChronoCloneLoginPbRequest* internal_default_instance() {
    return reinterpret_cast<const ChronoCloneLoginPbRequest*>(
               &_ChronoCloneLoginPbRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChronoCloneLoginPbRequest& a, ChronoCloneLoginPbRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChronoCloneLoginPbRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChronoCloneLoginPbRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChronoCloneLoginPbRequest* New() const final {
    return new ChronoCloneLoginPbRequest();
  }

  ChronoCloneLoginPbRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChronoCloneLoginPbRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChronoCloneLoginPbRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChronoCloneLoginPbRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChronoCloneLoginPbRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "echo.ChronoCloneLoginPbRequest";
  }
  protected:
  explicit ChronoCloneLoginPbRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVdiskIdFieldNumber = 10,
    kSrcVdiskIdFieldNumber = 40,
    kCloneResIdFieldNumber = 60,
    kSrcTopOidFieldNumber = 90,
    kSrcOidFieldNumber = 100,
    kCloneModeFieldNumber = 80,
    kVdiskCapFieldNumber = 30,
    kSectorSizeFieldNumber = 20,
    kCloneTickFieldNumber = 50,
    kPeerSizePerShardFieldNumber = 70,
  };
  // string vdisk_id = 10;
  void clear_vdisk_id();
  const std::string& vdisk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vdisk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vdisk_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_vdisk_id();
  void set_allocated_vdisk_id(std::string* vdisk_id);
  private:
  const std::string& _internal_vdisk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vdisk_id(const std::string& value);
  std::string* _internal_mutable_vdisk_id();
  public:

  // string src_vdisk_id = 40;
  void clear_src_vdisk_id();
  const std::string& src_vdisk_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_vdisk_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_vdisk_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_src_vdisk_id();
  void set_allocated_src_vdisk_id(std::string* src_vdisk_id);
  private:
  const std::string& _internal_src_vdisk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_vdisk_id(const std::string& value);
  std::string* _internal_mutable_src_vdisk_id();
  public:

  // string clone_res_id = 60;
  void clear_clone_res_id();
  const std::string& clone_res_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clone_res_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clone_res_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_clone_res_id();
  void set_allocated_clone_res_id(std::string* clone_res_id);
  private:
  const std::string& _internal_clone_res_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clone_res_id(const std::string& value);
  std::string* _internal_mutable_clone_res_id();
  public:

  // string src_top_oid = 90;
  void clear_src_top_oid();
  const std::string& src_top_oid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_top_oid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_top_oid();
  PROTOBUF_MUST_USE_RESULT std::string* release_src_top_oid();
  void set_allocated_src_top_oid(std::string* src_top_oid);
  private:
  const std::string& _internal_src_top_oid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_top_oid(const std::string& value);
  std::string* _internal_mutable_src_top_oid();
  public:

  // string src_oid = 100;
  void clear_src_oid();
  const std::string& src_oid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_oid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_oid();
  PROTOBUF_MUST_USE_RESULT std::string* release_src_oid();
  void set_allocated_src_oid(std::string* src_oid);
  private:
  const std::string& _internal_src_oid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_oid(const std::string& value);
  std::string* _internal_mutable_src_oid();
  public:

  // .echo.PbCloneMode clone_mode = 80;
  void clear_clone_mode();
  ::echo::PbCloneMode clone_mode() const;
  void set_clone_mode(::echo::PbCloneMode value);
  private:
  ::echo::PbCloneMode _internal_clone_mode() const;
  void _internal_set_clone_mode(::echo::PbCloneMode value);
  public:

  // uint64 vdisk_cap = 30;
  void clear_vdisk_cap();
  ::PROTOBUF_NAMESPACE_ID::uint64 vdisk_cap() const;
  void set_vdisk_cap(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vdisk_cap() const;
  void _internal_set_vdisk_cap(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sector_size = 20;
  void clear_sector_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 sector_size() const;
  void set_sector_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sector_size() const;
  void _internal_set_sector_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 clone_tick = 50;
  void clear_clone_tick();
  ::PROTOBUF_NAMESPACE_ID::uint32 clone_tick() const;
  void set_clone_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clone_tick() const;
  void _internal_set_clone_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 peer_size_per_shard = 70;
  void clear_peer_size_per_shard();
  ::PROTOBUF_NAMESPACE_ID::uint64 peer_size_per_shard() const;
  void set_peer_size_per_shard(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_peer_size_per_shard() const;
  void _internal_set_peer_size_per_shard(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:echo.ChronoCloneLoginPbRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vdisk_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_vdisk_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clone_res_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_top_oid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_oid_;
  int clone_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vdisk_cap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sector_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clone_tick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 peer_size_per_shard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class ChronoCloneLoginPbResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:echo.ChronoCloneLoginPbResponse) */ {
 public:
  inline ChronoCloneLoginPbResponse() : ChronoCloneLoginPbResponse(nullptr) {}
  ~ChronoCloneLoginPbResponse() override;
  explicit constexpr ChronoCloneLoginPbResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChronoCloneLoginPbResponse(const ChronoCloneLoginPbResponse& from);
  ChronoCloneLoginPbResponse(ChronoCloneLoginPbResponse&& from) noexcept
    : ChronoCloneLoginPbResponse() {
    *this = ::std::move(from);
  }

  inline ChronoCloneLoginPbResponse& operator=(const ChronoCloneLoginPbResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChronoCloneLoginPbResponse& operator=(ChronoCloneLoginPbResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChronoCloneLoginPbResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChronoCloneLoginPbResponse* internal_default_instance() {
    return reinterpret_cast<const ChronoCloneLoginPbResponse*>(
               &_ChronoCloneLoginPbResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChronoCloneLoginPbResponse& a, ChronoCloneLoginPbResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChronoCloneLoginPbResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChronoCloneLoginPbResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChronoCloneLoginPbResponse* New() const final {
    return new ChronoCloneLoginPbResponse();
  }

  ChronoCloneLoginPbResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChronoCloneLoginPbResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChronoCloneLoginPbResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChronoCloneLoginPbResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChronoCloneLoginPbResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "echo.ChronoCloneLoginPbResponse";
  }
  protected:
  explicit ChronoCloneLoginPbResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChronoIdFieldNumber = 20,
    kRcFieldNumber = 10,
    kArkVersionFieldNumber = 30,
  };
  // string chrono_id = 20;
  void clear_chrono_id();
  const std::string& chrono_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chrono_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chrono_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_chrono_id();
  void set_allocated_chrono_id(std::string* chrono_id);
  private:
  const std::string& _internal_chrono_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chrono_id(const std::string& value);
  std::string* _internal_mutable_chrono_id();
  public:

  // .echo.ResponseCode rc = 10;
  void clear_rc();
  ::echo::ResponseCode rc() const;
  void set_rc(::echo::ResponseCode value);
  private:
  ::echo::ResponseCode _internal_rc() const;
  void _internal_set_rc(::echo::ResponseCode value);
  public:

  // uint32 ark_version = 30;
  void clear_ark_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 ark_version() const;
  void set_ark_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ark_version() const;
  void _internal_set_ark_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:echo.ChronoCloneLoginPbResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chrono_id_;
  int rc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ark_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_echo_2eproto;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();

  typedef EchoService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  EchoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~EchoService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements EchoService ------------------------------------------

  void Echo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EchoRequest

// string message = 1;
inline void EchoRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& EchoRequest::message() const {
  // @@protoc_insertion_point(field_get:echo.EchoRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo.EchoRequest.message)
}
inline std::string* EchoRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:echo.EchoRequest.message)
  return _s;
}
inline const std::string& EchoRequest::_internal_message() const {
  return message_.Get();
}
inline void EchoRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EchoRequest::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EchoRequest::release_message() {
  // @@protoc_insertion_point(field_release:echo.EchoRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EchoRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:echo.EchoRequest.message)
}

// map<string, uint64> people = 2;
inline int EchoRequest::_internal_people_size() const {
  return people_.size();
}
inline int EchoRequest::people_size() const {
  return _internal_people_size();
}
inline void EchoRequest::clear_people() {
  people_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >&
EchoRequest::_internal_people() const {
  return people_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >&
EchoRequest::people() const {
  // @@protoc_insertion_point(field_map:echo.EchoRequest.people)
  return _internal_people();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >*
EchoRequest::_internal_mutable_people() {
  return people_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::uint64 >*
EchoRequest::mutable_people() {
  // @@protoc_insertion_point(field_mutable_map:echo.EchoRequest.people)
  return _internal_mutable_people();
}

// string request = 3;
inline bool EchoRequest::_internal_has_request() const {
  return requestreply_case() == kRequest;
}
inline bool EchoRequest::has_request() const {
  return _internal_has_request();
}
inline void EchoRequest::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void EchoRequest::clear_request() {
  if (_internal_has_request()) {
    requestreply_.request_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_requestreply();
  }
}
inline const std::string& EchoRequest::request() const {
  // @@protoc_insertion_point(field_get:echo.EchoRequest.request)
  return _internal_request();
}
template <typename ArgT0, typename... ArgT>
inline void EchoRequest::set_request(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_request()) {
    clear_requestreply();
    set_has_request();
    requestreply_.request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo.EchoRequest.request)
}
inline std::string* EchoRequest::mutable_request() {
  std::string* _s = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:echo.EchoRequest.request)
  return _s;
}
inline const std::string& EchoRequest::_internal_request() const {
  if (_internal_has_request()) {
    return requestreply_.request_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EchoRequest::_internal_set_request(const std::string& value) {
  if (!_internal_has_request()) {
    clear_requestreply();
    set_has_request();
    requestreply_.request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EchoRequest::_internal_mutable_request() {
  if (!_internal_has_request()) {
    clear_requestreply();
    set_has_request();
    requestreply_.request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return requestreply_.request_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EchoRequest::release_request() {
  // @@protoc_insertion_point(field_release:echo.EchoRequest.request)
  if (_internal_has_request()) {
    clear_has_requestreply();
    return requestreply_.request_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EchoRequest::set_allocated_request(std::string* request) {
  if (has_requestreply()) {
    clear_requestreply();
  }
  if (request != nullptr) {
    set_has_request();
    requestreply_.request_.UnsafeSetDefault(request);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(request);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:echo.EchoRequest.request)
}

// string resonse = 4;
inline bool EchoRequest::_internal_has_resonse() const {
  return requestreply_case() == kResonse;
}
inline bool EchoRequest::has_resonse() const {
  return _internal_has_resonse();
}
inline void EchoRequest::set_has_resonse() {
  _oneof_case_[0] = kResonse;
}
inline void EchoRequest::clear_resonse() {
  if (_internal_has_resonse()) {
    requestreply_.resonse_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_requestreply();
  }
}
inline const std::string& EchoRequest::resonse() const {
  // @@protoc_insertion_point(field_get:echo.EchoRequest.resonse)
  return _internal_resonse();
}
template <typename ArgT0, typename... ArgT>
inline void EchoRequest::set_resonse(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_resonse()) {
    clear_requestreply();
    set_has_resonse();
    requestreply_.resonse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.resonse_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo.EchoRequest.resonse)
}
inline std::string* EchoRequest::mutable_resonse() {
  std::string* _s = _internal_mutable_resonse();
  // @@protoc_insertion_point(field_mutable:echo.EchoRequest.resonse)
  return _s;
}
inline const std::string& EchoRequest::_internal_resonse() const {
  if (_internal_has_resonse()) {
    return requestreply_.resonse_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EchoRequest::_internal_set_resonse(const std::string& value) {
  if (!_internal_has_resonse()) {
    clear_requestreply();
    set_has_resonse();
    requestreply_.resonse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.resonse_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EchoRequest::_internal_mutable_resonse() {
  if (!_internal_has_resonse()) {
    clear_requestreply();
    set_has_resonse();
    requestreply_.resonse_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return requestreply_.resonse_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EchoRequest::release_resonse() {
  // @@protoc_insertion_point(field_release:echo.EchoRequest.resonse)
  if (_internal_has_resonse()) {
    clear_has_requestreply();
    return requestreply_.resonse_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EchoRequest::set_allocated_resonse(std::string* resonse) {
  if (has_requestreply()) {
    clear_requestreply();
  }
  if (resonse != nullptr) {
    set_has_resonse();
    requestreply_.resonse_.UnsafeSetDefault(resonse);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(resonse);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:echo.EchoRequest.resonse)
}

inline bool EchoRequest::has_requestreply() const {
  return requestreply_case() != REQUESTREPLY_NOT_SET;
}
inline void EchoRequest::clear_has_requestreply() {
  _oneof_case_[0] = REQUESTREPLY_NOT_SET;
}
inline EchoRequest::RequestreplyCase EchoRequest::requestreply_case() const {
  return EchoRequest::RequestreplyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EchoResponse

// string response = 1;
inline void EchoResponse::clear_response() {
  response_.ClearToEmpty();
}
inline const std::string& EchoResponse::response() const {
  // @@protoc_insertion_point(field_get:echo.EchoResponse.response)
  return _internal_response();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResponse::set_response(ArgT0&& arg0, ArgT... args) {
 
 response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo.EchoResponse.response)
}
inline std::string* EchoResponse::mutable_response() {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:echo.EchoResponse.response)
  return _s;
}
inline const std::string& EchoResponse::_internal_response() const {
  return response_.Get();
}
inline void EchoResponse::_internal_set_response(const std::string& value) {
  
  response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EchoResponse::_internal_mutable_response() {
  
  return response_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EchoResponse::release_response() {
  // @@protoc_insertion_point(field_release:echo.EchoResponse.response)
  return response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EchoResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:echo.EchoResponse.response)
}

// -------------------------------------------------------------------

// ChronoCloneLoginPbRequest

// string vdisk_id = 10;
inline void ChronoCloneLoginPbRequest::clear_vdisk_id() {
  vdisk_id_.ClearToEmpty();
}
inline const std::string& ChronoCloneLoginPbRequest::vdisk_id() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.vdisk_id)
  return _internal_vdisk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChronoCloneLoginPbRequest::set_vdisk_id(ArgT0&& arg0, ArgT... args) {
 
 vdisk_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.vdisk_id)
}
inline std::string* ChronoCloneLoginPbRequest::mutable_vdisk_id() {
  std::string* _s = _internal_mutable_vdisk_id();
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbRequest.vdisk_id)
  return _s;
}
inline const std::string& ChronoCloneLoginPbRequest::_internal_vdisk_id() const {
  return vdisk_id_.Get();
}
inline void ChronoCloneLoginPbRequest::_internal_set_vdisk_id(const std::string& value) {
  
  vdisk_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbRequest::_internal_mutable_vdisk_id() {
  
  return vdisk_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbRequest::release_vdisk_id() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbRequest.vdisk_id)
  return vdisk_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChronoCloneLoginPbRequest::set_allocated_vdisk_id(std::string* vdisk_id) {
  if (vdisk_id != nullptr) {
    
  } else {
    
  }
  vdisk_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vdisk_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbRequest.vdisk_id)
}

// uint32 sector_size = 20;
inline void ChronoCloneLoginPbRequest::clear_sector_size() {
  sector_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChronoCloneLoginPbRequest::_internal_sector_size() const {
  return sector_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChronoCloneLoginPbRequest::sector_size() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.sector_size)
  return _internal_sector_size();
}
inline void ChronoCloneLoginPbRequest::_internal_set_sector_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sector_size_ = value;
}
inline void ChronoCloneLoginPbRequest::set_sector_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sector_size(value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.sector_size)
}

// uint64 vdisk_cap = 30;
inline void ChronoCloneLoginPbRequest::clear_vdisk_cap() {
  vdisk_cap_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChronoCloneLoginPbRequest::_internal_vdisk_cap() const {
  return vdisk_cap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChronoCloneLoginPbRequest::vdisk_cap() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.vdisk_cap)
  return _internal_vdisk_cap();
}
inline void ChronoCloneLoginPbRequest::_internal_set_vdisk_cap(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vdisk_cap_ = value;
}
inline void ChronoCloneLoginPbRequest::set_vdisk_cap(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vdisk_cap(value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.vdisk_cap)
}

// string src_vdisk_id = 40;
inline void ChronoCloneLoginPbRequest::clear_src_vdisk_id() {
  src_vdisk_id_.ClearToEmpty();
}
inline const std::string& ChronoCloneLoginPbRequest::src_vdisk_id() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
  return _internal_src_vdisk_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChronoCloneLoginPbRequest::set_src_vdisk_id(ArgT0&& arg0, ArgT... args) {
 
 src_vdisk_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
}
inline std::string* ChronoCloneLoginPbRequest::mutable_src_vdisk_id() {
  std::string* _s = _internal_mutable_src_vdisk_id();
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
  return _s;
}
inline const std::string& ChronoCloneLoginPbRequest::_internal_src_vdisk_id() const {
  return src_vdisk_id_.Get();
}
inline void ChronoCloneLoginPbRequest::_internal_set_src_vdisk_id(const std::string& value) {
  
  src_vdisk_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbRequest::_internal_mutable_src_vdisk_id() {
  
  return src_vdisk_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbRequest::release_src_vdisk_id() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
  return src_vdisk_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChronoCloneLoginPbRequest::set_allocated_src_vdisk_id(std::string* src_vdisk_id) {
  if (src_vdisk_id != nullptr) {
    
  } else {
    
  }
  src_vdisk_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_vdisk_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
}

// uint32 clone_tick = 50;
inline void ChronoCloneLoginPbRequest::clear_clone_tick() {
  clone_tick_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChronoCloneLoginPbRequest::_internal_clone_tick() const {
  return clone_tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChronoCloneLoginPbRequest::clone_tick() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.clone_tick)
  return _internal_clone_tick();
}
inline void ChronoCloneLoginPbRequest::_internal_set_clone_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  clone_tick_ = value;
}
inline void ChronoCloneLoginPbRequest::set_clone_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clone_tick(value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.clone_tick)
}

// string clone_res_id = 60;
inline void ChronoCloneLoginPbRequest::clear_clone_res_id() {
  clone_res_id_.ClearToEmpty();
}
inline const std::string& ChronoCloneLoginPbRequest::clone_res_id() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.clone_res_id)
  return _internal_clone_res_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChronoCloneLoginPbRequest::set_clone_res_id(ArgT0&& arg0, ArgT... args) {
 
 clone_res_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.clone_res_id)
}
inline std::string* ChronoCloneLoginPbRequest::mutable_clone_res_id() {
  std::string* _s = _internal_mutable_clone_res_id();
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbRequest.clone_res_id)
  return _s;
}
inline const std::string& ChronoCloneLoginPbRequest::_internal_clone_res_id() const {
  return clone_res_id_.Get();
}
inline void ChronoCloneLoginPbRequest::_internal_set_clone_res_id(const std::string& value) {
  
  clone_res_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbRequest::_internal_mutable_clone_res_id() {
  
  return clone_res_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbRequest::release_clone_res_id() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbRequest.clone_res_id)
  return clone_res_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChronoCloneLoginPbRequest::set_allocated_clone_res_id(std::string* clone_res_id) {
  if (clone_res_id != nullptr) {
    
  } else {
    
  }
  clone_res_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clone_res_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbRequest.clone_res_id)
}

// uint64 peer_size_per_shard = 70;
inline void ChronoCloneLoginPbRequest::clear_peer_size_per_shard() {
  peer_size_per_shard_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChronoCloneLoginPbRequest::_internal_peer_size_per_shard() const {
  return peer_size_per_shard_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChronoCloneLoginPbRequest::peer_size_per_shard() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.peer_size_per_shard)
  return _internal_peer_size_per_shard();
}
inline void ChronoCloneLoginPbRequest::_internal_set_peer_size_per_shard(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  peer_size_per_shard_ = value;
}
inline void ChronoCloneLoginPbRequest::set_peer_size_per_shard(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_peer_size_per_shard(value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.peer_size_per_shard)
}

// .echo.PbCloneMode clone_mode = 80;
inline void ChronoCloneLoginPbRequest::clear_clone_mode() {
  clone_mode_ = 0;
}
inline ::echo::PbCloneMode ChronoCloneLoginPbRequest::_internal_clone_mode() const {
  return static_cast< ::echo::PbCloneMode >(clone_mode_);
}
inline ::echo::PbCloneMode ChronoCloneLoginPbRequest::clone_mode() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.clone_mode)
  return _internal_clone_mode();
}
inline void ChronoCloneLoginPbRequest::_internal_set_clone_mode(::echo::PbCloneMode value) {
  
  clone_mode_ = value;
}
inline void ChronoCloneLoginPbRequest::set_clone_mode(::echo::PbCloneMode value) {
  _internal_set_clone_mode(value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.clone_mode)
}

// string src_top_oid = 90;
inline void ChronoCloneLoginPbRequest::clear_src_top_oid() {
  src_top_oid_.ClearToEmpty();
}
inline const std::string& ChronoCloneLoginPbRequest::src_top_oid() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.src_top_oid)
  return _internal_src_top_oid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChronoCloneLoginPbRequest::set_src_top_oid(ArgT0&& arg0, ArgT... args) {
 
 src_top_oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.src_top_oid)
}
inline std::string* ChronoCloneLoginPbRequest::mutable_src_top_oid() {
  std::string* _s = _internal_mutable_src_top_oid();
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbRequest.src_top_oid)
  return _s;
}
inline const std::string& ChronoCloneLoginPbRequest::_internal_src_top_oid() const {
  return src_top_oid_.Get();
}
inline void ChronoCloneLoginPbRequest::_internal_set_src_top_oid(const std::string& value) {
  
  src_top_oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbRequest::_internal_mutable_src_top_oid() {
  
  return src_top_oid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbRequest::release_src_top_oid() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbRequest.src_top_oid)
  return src_top_oid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChronoCloneLoginPbRequest::set_allocated_src_top_oid(std::string* src_top_oid) {
  if (src_top_oid != nullptr) {
    
  } else {
    
  }
  src_top_oid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_top_oid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbRequest.src_top_oid)
}

// string src_oid = 100;
inline void ChronoCloneLoginPbRequest::clear_src_oid() {
  src_oid_.ClearToEmpty();
}
inline const std::string& ChronoCloneLoginPbRequest::src_oid() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.src_oid)
  return _internal_src_oid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChronoCloneLoginPbRequest::set_src_oid(ArgT0&& arg0, ArgT... args) {
 
 src_oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.src_oid)
}
inline std::string* ChronoCloneLoginPbRequest::mutable_src_oid() {
  std::string* _s = _internal_mutable_src_oid();
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbRequest.src_oid)
  return _s;
}
inline const std::string& ChronoCloneLoginPbRequest::_internal_src_oid() const {
  return src_oid_.Get();
}
inline void ChronoCloneLoginPbRequest::_internal_set_src_oid(const std::string& value) {
  
  src_oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbRequest::_internal_mutable_src_oid() {
  
  return src_oid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbRequest::release_src_oid() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbRequest.src_oid)
  return src_oid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChronoCloneLoginPbRequest::set_allocated_src_oid(std::string* src_oid) {
  if (src_oid != nullptr) {
    
  } else {
    
  }
  src_oid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_oid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbRequest.src_oid)
}

// -------------------------------------------------------------------

// ChronoCloneLoginPbResponse

// .echo.ResponseCode rc = 10;
inline void ChronoCloneLoginPbResponse::clear_rc() {
  rc_ = 0;
}
inline ::echo::ResponseCode ChronoCloneLoginPbResponse::_internal_rc() const {
  return static_cast< ::echo::ResponseCode >(rc_);
}
inline ::echo::ResponseCode ChronoCloneLoginPbResponse::rc() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbResponse.rc)
  return _internal_rc();
}
inline void ChronoCloneLoginPbResponse::_internal_set_rc(::echo::ResponseCode value) {
  
  rc_ = value;
}
inline void ChronoCloneLoginPbResponse::set_rc(::echo::ResponseCode value) {
  _internal_set_rc(value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbResponse.rc)
}

// string chrono_id = 20;
inline void ChronoCloneLoginPbResponse::clear_chrono_id() {
  chrono_id_.ClearToEmpty();
}
inline const std::string& ChronoCloneLoginPbResponse::chrono_id() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbResponse.chrono_id)
  return _internal_chrono_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChronoCloneLoginPbResponse::set_chrono_id(ArgT0&& arg0, ArgT... args) {
 
 chrono_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbResponse.chrono_id)
}
inline std::string* ChronoCloneLoginPbResponse::mutable_chrono_id() {
  std::string* _s = _internal_mutable_chrono_id();
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbResponse.chrono_id)
  return _s;
}
inline const std::string& ChronoCloneLoginPbResponse::_internal_chrono_id() const {
  return chrono_id_.Get();
}
inline void ChronoCloneLoginPbResponse::_internal_set_chrono_id(const std::string& value) {
  
  chrono_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbResponse::_internal_mutable_chrono_id() {
  
  return chrono_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChronoCloneLoginPbResponse::release_chrono_id() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbResponse.chrono_id)
  return chrono_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChronoCloneLoginPbResponse::set_allocated_chrono_id(std::string* chrono_id) {
  if (chrono_id != nullptr) {
    
  } else {
    
  }
  chrono_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chrono_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbResponse.chrono_id)
}

// uint32 ark_version = 30;
inline void ChronoCloneLoginPbResponse::clear_ark_version() {
  ark_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChronoCloneLoginPbResponse::_internal_ark_version() const {
  return ark_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChronoCloneLoginPbResponse::ark_version() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbResponse.ark_version)
  return _internal_ark_version();
}
inline void ChronoCloneLoginPbResponse::_internal_set_ark_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ark_version_ = value;
}
inline void ChronoCloneLoginPbResponse::set_ark_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ark_version(value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbResponse.ark_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace echo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::echo::PbCloneMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::echo::PbCloneMode>() {
  return ::echo::PbCloneMode_descriptor();
}
template <> struct is_proto_enum< ::echo::ResponseCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::echo::ResponseCode>() {
  return ::echo::ResponseCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_echo_2eproto
