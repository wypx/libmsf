// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#include "echo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace echo {
class EchoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EchoRequest>
      _instance;
} _EchoRequest_default_instance_;
class EchoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EchoResponse>
      _instance;
} _EchoResponse_default_instance_;
class ChronoCloneLoginPbRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChronoCloneLoginPbRequest>
      _instance;
} _ChronoCloneLoginPbRequest_default_instance_;
class ChronoCloneLoginPbResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChronoCloneLoginPbResponse>
      _instance;
} _ChronoCloneLoginPbResponse_default_instance_;
}  // namespace echo
namespace protobuf_echo_2eproto {
static void InitDefaultsEchoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::echo::_EchoRequest_default_instance_;
    new (ptr) ::echo::EchoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::echo::EchoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EchoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEchoRequest}, {}};

static void InitDefaultsEchoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::echo::_EchoResponse_default_instance_;
    new (ptr) ::echo::EchoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::echo::EchoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EchoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEchoResponse}, {}};

static void InitDefaultsChronoCloneLoginPbRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::echo::_ChronoCloneLoginPbRequest_default_instance_;
    new (ptr) ::echo::ChronoCloneLoginPbRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::echo::ChronoCloneLoginPbRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChronoCloneLoginPbRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChronoCloneLoginPbRequest}, {}};

static void InitDefaultsChronoCloneLoginPbResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::echo::_ChronoCloneLoginPbResponse_default_instance_;
    new (ptr) ::echo::ChronoCloneLoginPbResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::echo::ChronoCloneLoginPbResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChronoCloneLoginPbResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChronoCloneLoginPbResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EchoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EchoResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChronoCloneLoginPbRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChronoCloneLoginPbResponse.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::EchoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::EchoRequest, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::EchoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::EchoResponse, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, vdisk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, sector_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, vdisk_cap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, src_vdisk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, clone_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, clone_res_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, peer_size_per_shard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, clone_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, src_top_oid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbRequest, src_oid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbResponse, rc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbResponse, chrono_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::echo::ChronoCloneLoginPbResponse, ark_version_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::echo::EchoRequest)},
  { 6, -1, sizeof(::echo::EchoResponse)},
  { 12, -1, sizeof(::echo::ChronoCloneLoginPbRequest)},
  { 27, -1, sizeof(::echo::ChronoCloneLoginPbResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::echo::_EchoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::echo::_EchoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::echo::_ChronoCloneLoginPbRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::echo::_ChronoCloneLoginPbResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "echo.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\necho.proto\022\004echo\"\036\n\013EchoRequest\022\017\n\007mes"
      "sage\030\001 \001(\t\" \n\014EchoResponse\022\020\n\010response\030\001"
      " \001(\t\"\377\001\n\031ChronoCloneLoginPbRequest\022\020\n\010vd"
      "isk_id\030\n \001(\t\022\023\n\013sector_size\030\024 \001(\r\022\021\n\tvdi"
      "sk_cap\030\036 \001(\004\022\024\n\014src_vdisk_id\030( \001(\t\022\022\n\ncl"
      "one_tick\0302 \001(\r\022\024\n\014clone_res_id\030< \001(\t\022\033\n\023"
      "peer_size_per_shard\030F \001(\004\022%\n\nclone_mode\030"
      "P \001(\0162\021.echo.PbCloneMode\022\023\n\013src_top_oid\030"
      "Z \001(\t\022\017\n\007src_oid\030d \001(\t\"d\n\032ChronoCloneLog"
      "inPbResponse\022\036\n\002rc\030\n \001(\0162\022.echo.Response"
      "Code\022\021\n\tchrono_id\030\024 \001(\t\022\023\n\013ark_version\030\036"
      " \001(\r*\227\001\n\013PbCloneMode\022\027\n\023PB_CLONE_UTM_TO_"
      "UTM\020\000\022\032\n\026PB_CLONE_UTM_TO_NATIVE\020\001\022\032\n\026PB_"
      "CLONE_NATIVE_TO_UTM\020\002\022\035\n\031PB_CLONE_NATIVE"
      "_TO_NATIVE\020\003\022\030\n\024PB_CLONE_KOALA_IMAGE\020\004*&"
      "\n\014ResponseCode\022\013\n\007SUCCESS\020\000\022\t\n\005ERROR\020\n2<"
      "\n\013EchoService\022-\n\004Echo\022\021.echo.EchoRequest"
      "\032\022.echo.EchoResponseB\003\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 713);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "echo.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_echo_2eproto
namespace echo {
const ::google::protobuf::EnumDescriptor* PbCloneMode_descriptor() {
  protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_echo_2eproto::file_level_enum_descriptors[0];
}
bool PbCloneMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseCode_descriptor() {
  protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_echo_2eproto::file_level_enum_descriptors[1];
}
bool ResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EchoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EchoRequest::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EchoRequest::EchoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_echo_2eproto::scc_info_EchoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:echo.EchoRequest)
}
EchoRequest::EchoRequest(const EchoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:echo.EchoRequest)
}

void EchoRequest::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:echo.EchoRequest)
  SharedDtor();
}

void EchoRequest::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EchoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EchoRequest::descriptor() {
  ::protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_echo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EchoRequest& EchoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_echo_2eproto::scc_info_EchoRequest.base);
  return *internal_default_instance();
}


void EchoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:echo.EchoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EchoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echo.EchoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echo.EchoRequest.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echo.EchoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echo.EchoRequest)
  return false;
#undef DO_
}

void EchoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echo.EchoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.EchoRequest.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:echo.EchoRequest)
}

::google::protobuf::uint8* EchoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:echo.EchoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.EchoRequest.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:echo.EchoRequest)
  return target;
}

size_t EchoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:echo.EchoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echo.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EchoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echo.EchoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echo.EchoRequest)
    MergeFrom(*source);
  }
}

void EchoRequest::MergeFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echo.EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void EchoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echo.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echo.EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequest::IsInitialized() const {
  return true;
}

void EchoRequest::Swap(EchoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EchoRequest::InternalSwap(EchoRequest* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EchoRequest::GetMetadata() const {
  protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_echo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EchoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EchoResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EchoResponse::EchoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_echo_2eproto::scc_info_EchoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:echo.EchoResponse)
}
EchoResponse::EchoResponse(const EchoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response().size() > 0) {
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  // @@protoc_insertion_point(copy_constructor:echo.EchoResponse)
}

void EchoResponse::SharedCtor() {
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EchoResponse::~EchoResponse() {
  // @@protoc_insertion_point(destructor:echo.EchoResponse)
  SharedDtor();
}

void EchoResponse::SharedDtor() {
  response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EchoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EchoResponse::descriptor() {
  ::protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_echo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EchoResponse& EchoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_echo_2eproto::scc_info_EchoResponse.base);
  return *internal_default_instance();
}


void EchoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:echo.EchoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool EchoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echo.EchoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response().data(), static_cast<int>(this->response().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echo.EchoResponse.response"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echo.EchoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echo.EchoResponse)
  return false;
#undef DO_
}

void EchoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echo.EchoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response().data(), static_cast<int>(this->response().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.EchoResponse.response");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->response(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:echo.EchoResponse)
}

::google::protobuf::uint8* EchoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:echo.EchoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response().data(), static_cast<int>(this->response().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.EchoResponse.response");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:echo.EchoResponse)
  return target;
}

size_t EchoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:echo.EchoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echo.EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EchoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echo.EchoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echo.EchoResponse)
    MergeFrom(*source);
  }
}

void EchoResponse::MergeFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echo.EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {

    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
}

void EchoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echo.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoResponse::CopyFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echo.EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResponse::IsInitialized() const {
  return true;
}

void EchoResponse::Swap(EchoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EchoResponse::InternalSwap(EchoResponse* other) {
  using std::swap;
  response_.Swap(&other->response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EchoResponse::GetMetadata() const {
  protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_echo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChronoCloneLoginPbRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChronoCloneLoginPbRequest::kVdiskIdFieldNumber;
const int ChronoCloneLoginPbRequest::kSectorSizeFieldNumber;
const int ChronoCloneLoginPbRequest::kVdiskCapFieldNumber;
const int ChronoCloneLoginPbRequest::kSrcVdiskIdFieldNumber;
const int ChronoCloneLoginPbRequest::kCloneTickFieldNumber;
const int ChronoCloneLoginPbRequest::kCloneResIdFieldNumber;
const int ChronoCloneLoginPbRequest::kPeerSizePerShardFieldNumber;
const int ChronoCloneLoginPbRequest::kCloneModeFieldNumber;
const int ChronoCloneLoginPbRequest::kSrcTopOidFieldNumber;
const int ChronoCloneLoginPbRequest::kSrcOidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChronoCloneLoginPbRequest::ChronoCloneLoginPbRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_echo_2eproto::scc_info_ChronoCloneLoginPbRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:echo.ChronoCloneLoginPbRequest)
}
ChronoCloneLoginPbRequest::ChronoCloneLoginPbRequest(const ChronoCloneLoginPbRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vdisk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vdisk_id().size() > 0) {
    vdisk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vdisk_id_);
  }
  src_vdisk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_vdisk_id().size() > 0) {
    src_vdisk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_vdisk_id_);
  }
  clone_res_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clone_res_id().size() > 0) {
    clone_res_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clone_res_id_);
  }
  src_top_oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_top_oid().size() > 0) {
    src_top_oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_top_oid_);
  }
  src_oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_oid().size() > 0) {
    src_oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_oid_);
  }
  ::memcpy(&clone_mode_, &from.clone_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&peer_size_per_shard_) -
    reinterpret_cast<char*>(&clone_mode_)) + sizeof(peer_size_per_shard_));
  // @@protoc_insertion_point(copy_constructor:echo.ChronoCloneLoginPbRequest)
}

void ChronoCloneLoginPbRequest::SharedCtor() {
  vdisk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_vdisk_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clone_res_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_top_oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clone_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_size_per_shard_) -
      reinterpret_cast<char*>(&clone_mode_)) + sizeof(peer_size_per_shard_));
}

ChronoCloneLoginPbRequest::~ChronoCloneLoginPbRequest() {
  // @@protoc_insertion_point(destructor:echo.ChronoCloneLoginPbRequest)
  SharedDtor();
}

void ChronoCloneLoginPbRequest::SharedDtor() {
  vdisk_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_vdisk_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clone_res_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_top_oid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_oid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChronoCloneLoginPbRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChronoCloneLoginPbRequest::descriptor() {
  ::protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_echo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChronoCloneLoginPbRequest& ChronoCloneLoginPbRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_echo_2eproto::scc_info_ChronoCloneLoginPbRequest.base);
  return *internal_default_instance();
}


void ChronoCloneLoginPbRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:echo.ChronoCloneLoginPbRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vdisk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_vdisk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clone_res_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_top_oid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_oid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&clone_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_size_per_shard_) -
      reinterpret_cast<char*>(&clone_mode_)) + sizeof(peer_size_per_shard_));
  _internal_metadata_.Clear();
}

bool ChronoCloneLoginPbRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echo.ChronoCloneLoginPbRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string vdisk_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vdisk_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vdisk_id().data(), static_cast<int>(this->vdisk_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echo.ChronoCloneLoginPbRequest.vdisk_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sector_size = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sector_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 vdisk_cap = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vdisk_cap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_vdisk_id = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_vdisk_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_vdisk_id().data(), static_cast<int>(this->src_vdisk_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echo.ChronoCloneLoginPbRequest.src_vdisk_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 clone_tick = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clone_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string clone_res_id = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clone_res_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clone_res_id().data(), static_cast<int>(this->clone_res_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echo.ChronoCloneLoginPbRequest.clone_res_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 peer_size_per_shard = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &peer_size_per_shard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .echo.PbCloneMode clone_mode = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_clone_mode(static_cast< ::echo::PbCloneMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_top_oid = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_top_oid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_top_oid().data(), static_cast<int>(this->src_top_oid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echo.ChronoCloneLoginPbRequest.src_top_oid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_oid = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_oid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_oid().data(), static_cast<int>(this->src_oid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echo.ChronoCloneLoginPbRequest.src_oid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echo.ChronoCloneLoginPbRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echo.ChronoCloneLoginPbRequest)
  return false;
#undef DO_
}

void ChronoCloneLoginPbRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echo.ChronoCloneLoginPbRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vdisk_id = 10;
  if (this->vdisk_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vdisk_id().data(), static_cast<int>(this->vdisk_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbRequest.vdisk_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->vdisk_id(), output);
  }

  // uint32 sector_size = 20;
  if (this->sector_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->sector_size(), output);
  }

  // uint64 vdisk_cap = 30;
  if (this->vdisk_cap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->vdisk_cap(), output);
  }

  // string src_vdisk_id = 40;
  if (this->src_vdisk_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_vdisk_id().data(), static_cast<int>(this->src_vdisk_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbRequest.src_vdisk_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->src_vdisk_id(), output);
  }

  // uint32 clone_tick = 50;
  if (this->clone_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->clone_tick(), output);
  }

  // string clone_res_id = 60;
  if (this->clone_res_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clone_res_id().data(), static_cast<int>(this->clone_res_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbRequest.clone_res_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->clone_res_id(), output);
  }

  // uint64 peer_size_per_shard = 70;
  if (this->peer_size_per_shard() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(70, this->peer_size_per_shard(), output);
  }

  // .echo.PbCloneMode clone_mode = 80;
  if (this->clone_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      80, this->clone_mode(), output);
  }

  // string src_top_oid = 90;
  if (this->src_top_oid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_top_oid().data(), static_cast<int>(this->src_top_oid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbRequest.src_top_oid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      90, this->src_top_oid(), output);
  }

  // string src_oid = 100;
  if (this->src_oid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_oid().data(), static_cast<int>(this->src_oid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbRequest.src_oid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->src_oid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:echo.ChronoCloneLoginPbRequest)
}

::google::protobuf::uint8* ChronoCloneLoginPbRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:echo.ChronoCloneLoginPbRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vdisk_id = 10;
  if (this->vdisk_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vdisk_id().data(), static_cast<int>(this->vdisk_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbRequest.vdisk_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->vdisk_id(), target);
  }

  // uint32 sector_size = 20;
  if (this->sector_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->sector_size(), target);
  }

  // uint64 vdisk_cap = 30;
  if (this->vdisk_cap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->vdisk_cap(), target);
  }

  // string src_vdisk_id = 40;
  if (this->src_vdisk_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_vdisk_id().data(), static_cast<int>(this->src_vdisk_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbRequest.src_vdisk_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->src_vdisk_id(), target);
  }

  // uint32 clone_tick = 50;
  if (this->clone_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->clone_tick(), target);
  }

  // string clone_res_id = 60;
  if (this->clone_res_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clone_res_id().data(), static_cast<int>(this->clone_res_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbRequest.clone_res_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->clone_res_id(), target);
  }

  // uint64 peer_size_per_shard = 70;
  if (this->peer_size_per_shard() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(70, this->peer_size_per_shard(), target);
  }

  // .echo.PbCloneMode clone_mode = 80;
  if (this->clone_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      80, this->clone_mode(), target);
  }

  // string src_top_oid = 90;
  if (this->src_top_oid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_top_oid().data(), static_cast<int>(this->src_top_oid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbRequest.src_top_oid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        90, this->src_top_oid(), target);
  }

  // string src_oid = 100;
  if (this->src_oid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_oid().data(), static_cast<int>(this->src_oid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbRequest.src_oid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->src_oid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:echo.ChronoCloneLoginPbRequest)
  return target;
}

size_t ChronoCloneLoginPbRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:echo.ChronoCloneLoginPbRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string vdisk_id = 10;
  if (this->vdisk_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vdisk_id());
  }

  // string src_vdisk_id = 40;
  if (this->src_vdisk_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_vdisk_id());
  }

  // string clone_res_id = 60;
  if (this->clone_res_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clone_res_id());
  }

  // string src_top_oid = 90;
  if (this->src_top_oid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_top_oid());
  }

  // string src_oid = 100;
  if (this->src_oid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_oid());
  }

  // .echo.PbCloneMode clone_mode = 80;
  if (this->clone_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->clone_mode());
  }

  // uint64 vdisk_cap = 30;
  if (this->vdisk_cap() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->vdisk_cap());
  }

  // uint32 sector_size = 20;
  if (this->sector_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sector_size());
  }

  // uint32 clone_tick = 50;
  if (this->clone_tick() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clone_tick());
  }

  // uint64 peer_size_per_shard = 70;
  if (this->peer_size_per_shard() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->peer_size_per_shard());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChronoCloneLoginPbRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echo.ChronoCloneLoginPbRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChronoCloneLoginPbRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChronoCloneLoginPbRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echo.ChronoCloneLoginPbRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echo.ChronoCloneLoginPbRequest)
    MergeFrom(*source);
  }
}

void ChronoCloneLoginPbRequest::MergeFrom(const ChronoCloneLoginPbRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echo.ChronoCloneLoginPbRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vdisk_id().size() > 0) {

    vdisk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vdisk_id_);
  }
  if (from.src_vdisk_id().size() > 0) {

    src_vdisk_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_vdisk_id_);
  }
  if (from.clone_res_id().size() > 0) {

    clone_res_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clone_res_id_);
  }
  if (from.src_top_oid().size() > 0) {

    src_top_oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_top_oid_);
  }
  if (from.src_oid().size() > 0) {

    src_oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_oid_);
  }
  if (from.clone_mode() != 0) {
    set_clone_mode(from.clone_mode());
  }
  if (from.vdisk_cap() != 0) {
    set_vdisk_cap(from.vdisk_cap());
  }
  if (from.sector_size() != 0) {
    set_sector_size(from.sector_size());
  }
  if (from.clone_tick() != 0) {
    set_clone_tick(from.clone_tick());
  }
  if (from.peer_size_per_shard() != 0) {
    set_peer_size_per_shard(from.peer_size_per_shard());
  }
}

void ChronoCloneLoginPbRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echo.ChronoCloneLoginPbRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChronoCloneLoginPbRequest::CopyFrom(const ChronoCloneLoginPbRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echo.ChronoCloneLoginPbRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChronoCloneLoginPbRequest::IsInitialized() const {
  return true;
}

void ChronoCloneLoginPbRequest::Swap(ChronoCloneLoginPbRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChronoCloneLoginPbRequest::InternalSwap(ChronoCloneLoginPbRequest* other) {
  using std::swap;
  vdisk_id_.Swap(&other->vdisk_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  src_vdisk_id_.Swap(&other->src_vdisk_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clone_res_id_.Swap(&other->clone_res_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  src_top_oid_.Swap(&other->src_top_oid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  src_oid_.Swap(&other->src_oid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clone_mode_, other->clone_mode_);
  swap(vdisk_cap_, other->vdisk_cap_);
  swap(sector_size_, other->sector_size_);
  swap(clone_tick_, other->clone_tick_);
  swap(peer_size_per_shard_, other->peer_size_per_shard_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChronoCloneLoginPbRequest::GetMetadata() const {
  protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_echo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChronoCloneLoginPbResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChronoCloneLoginPbResponse::kRcFieldNumber;
const int ChronoCloneLoginPbResponse::kChronoIdFieldNumber;
const int ChronoCloneLoginPbResponse::kArkVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChronoCloneLoginPbResponse::ChronoCloneLoginPbResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_echo_2eproto::scc_info_ChronoCloneLoginPbResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:echo.ChronoCloneLoginPbResponse)
}
ChronoCloneLoginPbResponse::ChronoCloneLoginPbResponse(const ChronoCloneLoginPbResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chrono_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chrono_id().size() > 0) {
    chrono_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrono_id_);
  }
  ::memcpy(&rc_, &from.rc_,
    static_cast<size_t>(reinterpret_cast<char*>(&ark_version_) -
    reinterpret_cast<char*>(&rc_)) + sizeof(ark_version_));
  // @@protoc_insertion_point(copy_constructor:echo.ChronoCloneLoginPbResponse)
}

void ChronoCloneLoginPbResponse::SharedCtor() {
  chrono_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ark_version_) -
      reinterpret_cast<char*>(&rc_)) + sizeof(ark_version_));
}

ChronoCloneLoginPbResponse::~ChronoCloneLoginPbResponse() {
  // @@protoc_insertion_point(destructor:echo.ChronoCloneLoginPbResponse)
  SharedDtor();
}

void ChronoCloneLoginPbResponse::SharedDtor() {
  chrono_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChronoCloneLoginPbResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChronoCloneLoginPbResponse::descriptor() {
  ::protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_echo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChronoCloneLoginPbResponse& ChronoCloneLoginPbResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_echo_2eproto::scc_info_ChronoCloneLoginPbResponse.base);
  return *internal_default_instance();
}


void ChronoCloneLoginPbResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:echo.ChronoCloneLoginPbResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chrono_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ark_version_) -
      reinterpret_cast<char*>(&rc_)) + sizeof(ark_version_));
  _internal_metadata_.Clear();
}

bool ChronoCloneLoginPbResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echo.ChronoCloneLoginPbResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .echo.ResponseCode rc = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rc(static_cast< ::echo::ResponseCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chrono_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chrono_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chrono_id().data(), static_cast<int>(this->chrono_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echo.ChronoCloneLoginPbResponse.chrono_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ark_version = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ark_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echo.ChronoCloneLoginPbResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echo.ChronoCloneLoginPbResponse)
  return false;
#undef DO_
}

void ChronoCloneLoginPbResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echo.ChronoCloneLoginPbResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .echo.ResponseCode rc = 10;
  if (this->rc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->rc(), output);
  }

  // string chrono_id = 20;
  if (this->chrono_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chrono_id().data(), static_cast<int>(this->chrono_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbResponse.chrono_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->chrono_id(), output);
  }

  // uint32 ark_version = 30;
  if (this->ark_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->ark_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:echo.ChronoCloneLoginPbResponse)
}

::google::protobuf::uint8* ChronoCloneLoginPbResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:echo.ChronoCloneLoginPbResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .echo.ResponseCode rc = 10;
  if (this->rc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->rc(), target);
  }

  // string chrono_id = 20;
  if (this->chrono_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chrono_id().data(), static_cast<int>(this->chrono_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echo.ChronoCloneLoginPbResponse.chrono_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->chrono_id(), target);
  }

  // uint32 ark_version = 30;
  if (this->ark_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->ark_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:echo.ChronoCloneLoginPbResponse)
  return target;
}

size_t ChronoCloneLoginPbResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:echo.ChronoCloneLoginPbResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string chrono_id = 20;
  if (this->chrono_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chrono_id());
  }

  // .echo.ResponseCode rc = 10;
  if (this->rc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rc());
  }

  // uint32 ark_version = 30;
  if (this->ark_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ark_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChronoCloneLoginPbResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echo.ChronoCloneLoginPbResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChronoCloneLoginPbResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChronoCloneLoginPbResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echo.ChronoCloneLoginPbResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echo.ChronoCloneLoginPbResponse)
    MergeFrom(*source);
  }
}

void ChronoCloneLoginPbResponse::MergeFrom(const ChronoCloneLoginPbResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echo.ChronoCloneLoginPbResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chrono_id().size() > 0) {

    chrono_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrono_id_);
  }
  if (from.rc() != 0) {
    set_rc(from.rc());
  }
  if (from.ark_version() != 0) {
    set_ark_version(from.ark_version());
  }
}

void ChronoCloneLoginPbResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echo.ChronoCloneLoginPbResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChronoCloneLoginPbResponse::CopyFrom(const ChronoCloneLoginPbResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echo.ChronoCloneLoginPbResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChronoCloneLoginPbResponse::IsInitialized() const {
  return true;
}

void ChronoCloneLoginPbResponse::Swap(ChronoCloneLoginPbResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChronoCloneLoginPbResponse::InternalSwap(ChronoCloneLoginPbResponse* other) {
  using std::swap;
  chrono_id_.Swap(&other->chrono_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rc_, other->rc_);
  swap(ark_version_, other->ark_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChronoCloneLoginPbResponse::GetMetadata() const {
  protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_echo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

EchoService::~EchoService() {}

const ::google::protobuf::ServiceDescriptor* EchoService::descriptor() {
  protobuf_echo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_echo_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* EchoService::GetDescriptor() {
  return descriptor();
}

void EchoService::Echo(::google::protobuf::RpcController* controller,
                         const ::echo::EchoRequest*,
                         ::echo::EchoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Echo() not implemented.");
  done->Run();
}

void EchoService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_echo_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      Echo(controller,
             ::google::protobuf::down_cast<const ::echo::EchoRequest*>(request),
             ::google::protobuf::down_cast< ::echo::EchoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& EchoService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::echo::EchoRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& EchoService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::echo::EchoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

EchoService_Stub::EchoService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
EchoService_Stub::EchoService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
EchoService_Stub::~EchoService_Stub() {
  if (owns_channel_) delete channel_;
}

void EchoService_Stub::Echo(::google::protobuf::RpcController* controller,
                              const ::echo::EchoRequest* request,
                              ::echo::EchoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace echo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::echo::EchoRequest* Arena::CreateMaybeMessage< ::echo::EchoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::echo::EchoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::echo::EchoResponse* Arena::CreateMaybeMessage< ::echo::EchoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::echo::EchoResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::echo::ChronoCloneLoginPbRequest* Arena::CreateMaybeMessage< ::echo::ChronoCloneLoginPbRequest >(Arena* arena) {
  return Arena::CreateInternal< ::echo::ChronoCloneLoginPbRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::echo::ChronoCloneLoginPbResponse* Arena::CreateMaybeMessage< ::echo::ChronoCloneLoginPbResponse >(Arena* arena) {
  return Arena::CreateInternal< ::echo::ChronoCloneLoginPbResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
