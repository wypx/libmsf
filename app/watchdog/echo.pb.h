// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef PROTOBUF_INCLUDED_echo_2eproto
#define PROTOBUF_INCLUDED_echo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_echo_2eproto 

namespace protobuf_echo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_echo_2eproto
namespace echo {
class ChronoCloneLoginPbRequest;
class ChronoCloneLoginPbRequestDefaultTypeInternal;
extern ChronoCloneLoginPbRequestDefaultTypeInternal _ChronoCloneLoginPbRequest_default_instance_;
class ChronoCloneLoginPbResponse;
class ChronoCloneLoginPbResponseDefaultTypeInternal;
extern ChronoCloneLoginPbResponseDefaultTypeInternal _ChronoCloneLoginPbResponse_default_instance_;
class EchoRequest;
class EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EchoRequest_PeopleEntry_DoNotUse;
class EchoRequest_PeopleEntry_DoNotUseDefaultTypeInternal;
extern EchoRequest_PeopleEntry_DoNotUseDefaultTypeInternal _EchoRequest_PeopleEntry_DoNotUse_default_instance_;
class EchoResponse;
class EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
}  // namespace echo
namespace google {
namespace protobuf {
template<> ::echo::ChronoCloneLoginPbRequest* Arena::CreateMaybeMessage<::echo::ChronoCloneLoginPbRequest>(Arena*);
template<> ::echo::ChronoCloneLoginPbResponse* Arena::CreateMaybeMessage<::echo::ChronoCloneLoginPbResponse>(Arena*);
template<> ::echo::EchoRequest* Arena::CreateMaybeMessage<::echo::EchoRequest>(Arena*);
template<> ::echo::EchoRequest_PeopleEntry_DoNotUse* Arena::CreateMaybeMessage<::echo::EchoRequest_PeopleEntry_DoNotUse>(Arena*);
template<> ::echo::EchoResponse* Arena::CreateMaybeMessage<::echo::EchoResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace echo {

enum PbCloneMode {
  PB_CLONE_UTM_TO_UTM = 0,
  PB_CLONE_UTM_TO_NATIVE = 1,
  PB_CLONE_NATIVE_TO_UTM = 2,
  PB_CLONE_NATIVE_TO_NATIVE = 3,
  PB_CLONE_KOALA_IMAGE = 4,
  PbCloneMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PbCloneMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PbCloneMode_IsValid(int value);
const PbCloneMode PbCloneMode_MIN = PB_CLONE_UTM_TO_UTM;
const PbCloneMode PbCloneMode_MAX = PB_CLONE_KOALA_IMAGE;
const int PbCloneMode_ARRAYSIZE = PbCloneMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PbCloneMode_descriptor();
inline const ::std::string& PbCloneMode_Name(PbCloneMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PbCloneMode_descriptor(), value);
}
inline bool PbCloneMode_Parse(
    const ::std::string& name, PbCloneMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PbCloneMode>(
    PbCloneMode_descriptor(), name, value);
}
enum ResponseCode {
  SUCCESS = 0,
  ERROR = 10,
  ResponseCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResponseCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResponseCode_IsValid(int value);
const ResponseCode ResponseCode_MIN = SUCCESS;
const ResponseCode ResponseCode_MAX = ERROR;
const int ResponseCode_ARRAYSIZE = ResponseCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseCode_descriptor();
inline const ::std::string& ResponseCode_Name(ResponseCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseCode_descriptor(), value);
}
inline bool ResponseCode_Parse(
    const ::std::string& name, ResponseCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseCode>(
    ResponseCode_descriptor(), name, value);
}
// ===================================================================

class EchoRequest_PeopleEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<EchoRequest_PeopleEntry_DoNotUse, 
    ::std::string, ::google::protobuf::uint64,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<EchoRequest_PeopleEntry_DoNotUse, 
    ::std::string, ::google::protobuf::uint64,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    0 > SuperType;
  EchoRequest_PeopleEntry_DoNotUse();
  EchoRequest_PeopleEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const EchoRequest_PeopleEntry_DoNotUse& other);
  static const EchoRequest_PeopleEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EchoRequest_PeopleEntry_DoNotUse*>(&_EchoRequest_PeopleEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class EchoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo.EchoRequest) */ {
 public:
  EchoRequest();
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRequest& default_instance();

  enum RequestreplyCase {
    kRequest = 3,
    kResonse = 4,
    REQUESTREPLY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EchoRequest* other);
  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const final {
    return CreateMaybeMessage<EchoRequest>(NULL);
  }

  EchoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, uint64> people = 2;
  int people_size() const;
  void clear_people();
  static const int kPeopleFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >&
      people() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >*
      mutable_people();

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string request = 3;
  private:
  bool has_request() const;
  public:
  void clear_request();
  static const int kRequestFieldNumber = 3;
  const ::std::string& request() const;
  void set_request(const ::std::string& value);
  #if LANG_CXX11
  void set_request(::std::string&& value);
  #endif
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  ::std::string* mutable_request();
  ::std::string* release_request();
  void set_allocated_request(::std::string* request);

  // string resonse = 4;
  private:
  bool has_resonse() const;
  public:
  void clear_resonse();
  static const int kResonseFieldNumber = 4;
  const ::std::string& resonse() const;
  void set_resonse(const ::std::string& value);
  #if LANG_CXX11
  void set_resonse(::std::string&& value);
  #endif
  void set_resonse(const char* value);
  void set_resonse(const char* value, size_t size);
  ::std::string* mutable_resonse();
  ::std::string* release_resonse();
  void set_allocated_resonse(::std::string* resonse);

  void clear_requestreply();
  RequestreplyCase requestreply_case() const;
  // @@protoc_insertion_point(class_scope:echo.EchoRequest)
 private:
  void set_has_request();
  void set_has_resonse();

  inline bool has_requestreply() const;
  inline void clear_has_requestreply();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      EchoRequest_PeopleEntry_DoNotUse,
      ::std::string, ::google::protobuf::uint64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      0 > people_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  union RequestreplyUnion {
    RequestreplyUnion() {}
    ::google::protobuf::internal::ArenaStringPtr request_;
    ::google::protobuf::internal::ArenaStringPtr resonse_;
  } requestreply_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_echo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EchoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo.EchoResponse) */ {
 public:
  EchoResponse();
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoResponse(EchoResponse&& from) noexcept
    : EchoResponse() {
    *this = ::std::move(from);
  }

  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
               &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EchoResponse* other);
  friend void swap(EchoResponse& a, EchoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoResponse* New() const final {
    return CreateMaybeMessage<EchoResponse>(NULL);
  }

  EchoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string response = 1;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // @@protoc_insertion_point(class_scope:echo.EchoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_echo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChronoCloneLoginPbRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo.ChronoCloneLoginPbRequest) */ {
 public:
  ChronoCloneLoginPbRequest();
  virtual ~ChronoCloneLoginPbRequest();

  ChronoCloneLoginPbRequest(const ChronoCloneLoginPbRequest& from);

  inline ChronoCloneLoginPbRequest& operator=(const ChronoCloneLoginPbRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChronoCloneLoginPbRequest(ChronoCloneLoginPbRequest&& from) noexcept
    : ChronoCloneLoginPbRequest() {
    *this = ::std::move(from);
  }

  inline ChronoCloneLoginPbRequest& operator=(ChronoCloneLoginPbRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChronoCloneLoginPbRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChronoCloneLoginPbRequest* internal_default_instance() {
    return reinterpret_cast<const ChronoCloneLoginPbRequest*>(
               &_ChronoCloneLoginPbRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ChronoCloneLoginPbRequest* other);
  friend void swap(ChronoCloneLoginPbRequest& a, ChronoCloneLoginPbRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChronoCloneLoginPbRequest* New() const final {
    return CreateMaybeMessage<ChronoCloneLoginPbRequest>(NULL);
  }

  ChronoCloneLoginPbRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChronoCloneLoginPbRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChronoCloneLoginPbRequest& from);
  void MergeFrom(const ChronoCloneLoginPbRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChronoCloneLoginPbRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vdisk_id = 10;
  void clear_vdisk_id();
  static const int kVdiskIdFieldNumber = 10;
  const ::std::string& vdisk_id() const;
  void set_vdisk_id(const ::std::string& value);
  #if LANG_CXX11
  void set_vdisk_id(::std::string&& value);
  #endif
  void set_vdisk_id(const char* value);
  void set_vdisk_id(const char* value, size_t size);
  ::std::string* mutable_vdisk_id();
  ::std::string* release_vdisk_id();
  void set_allocated_vdisk_id(::std::string* vdisk_id);

  // string src_vdisk_id = 40;
  void clear_src_vdisk_id();
  static const int kSrcVdiskIdFieldNumber = 40;
  const ::std::string& src_vdisk_id() const;
  void set_src_vdisk_id(const ::std::string& value);
  #if LANG_CXX11
  void set_src_vdisk_id(::std::string&& value);
  #endif
  void set_src_vdisk_id(const char* value);
  void set_src_vdisk_id(const char* value, size_t size);
  ::std::string* mutable_src_vdisk_id();
  ::std::string* release_src_vdisk_id();
  void set_allocated_src_vdisk_id(::std::string* src_vdisk_id);

  // string clone_res_id = 60;
  void clear_clone_res_id();
  static const int kCloneResIdFieldNumber = 60;
  const ::std::string& clone_res_id() const;
  void set_clone_res_id(const ::std::string& value);
  #if LANG_CXX11
  void set_clone_res_id(::std::string&& value);
  #endif
  void set_clone_res_id(const char* value);
  void set_clone_res_id(const char* value, size_t size);
  ::std::string* mutable_clone_res_id();
  ::std::string* release_clone_res_id();
  void set_allocated_clone_res_id(::std::string* clone_res_id);

  // string src_top_oid = 90;
  void clear_src_top_oid();
  static const int kSrcTopOidFieldNumber = 90;
  const ::std::string& src_top_oid() const;
  void set_src_top_oid(const ::std::string& value);
  #if LANG_CXX11
  void set_src_top_oid(::std::string&& value);
  #endif
  void set_src_top_oid(const char* value);
  void set_src_top_oid(const char* value, size_t size);
  ::std::string* mutable_src_top_oid();
  ::std::string* release_src_top_oid();
  void set_allocated_src_top_oid(::std::string* src_top_oid);

  // string src_oid = 100;
  void clear_src_oid();
  static const int kSrcOidFieldNumber = 100;
  const ::std::string& src_oid() const;
  void set_src_oid(const ::std::string& value);
  #if LANG_CXX11
  void set_src_oid(::std::string&& value);
  #endif
  void set_src_oid(const char* value);
  void set_src_oid(const char* value, size_t size);
  ::std::string* mutable_src_oid();
  ::std::string* release_src_oid();
  void set_allocated_src_oid(::std::string* src_oid);

  // .echo.PbCloneMode clone_mode = 80;
  void clear_clone_mode();
  static const int kCloneModeFieldNumber = 80;
  ::echo::PbCloneMode clone_mode() const;
  void set_clone_mode(::echo::PbCloneMode value);

  // uint64 vdisk_cap = 30;
  void clear_vdisk_cap();
  static const int kVdiskCapFieldNumber = 30;
  ::google::protobuf::uint64 vdisk_cap() const;
  void set_vdisk_cap(::google::protobuf::uint64 value);

  // uint32 sector_size = 20;
  void clear_sector_size();
  static const int kSectorSizeFieldNumber = 20;
  ::google::protobuf::uint32 sector_size() const;
  void set_sector_size(::google::protobuf::uint32 value);

  // uint32 clone_tick = 50;
  void clear_clone_tick();
  static const int kCloneTickFieldNumber = 50;
  ::google::protobuf::uint32 clone_tick() const;
  void set_clone_tick(::google::protobuf::uint32 value);

  // uint64 peer_size_per_shard = 70;
  void clear_peer_size_per_shard();
  static const int kPeerSizePerShardFieldNumber = 70;
  ::google::protobuf::uint64 peer_size_per_shard() const;
  void set_peer_size_per_shard(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:echo.ChronoCloneLoginPbRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vdisk_id_;
  ::google::protobuf::internal::ArenaStringPtr src_vdisk_id_;
  ::google::protobuf::internal::ArenaStringPtr clone_res_id_;
  ::google::protobuf::internal::ArenaStringPtr src_top_oid_;
  ::google::protobuf::internal::ArenaStringPtr src_oid_;
  int clone_mode_;
  ::google::protobuf::uint64 vdisk_cap_;
  ::google::protobuf::uint32 sector_size_;
  ::google::protobuf::uint32 clone_tick_;
  ::google::protobuf::uint64 peer_size_per_shard_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_echo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChronoCloneLoginPbResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo.ChronoCloneLoginPbResponse) */ {
 public:
  ChronoCloneLoginPbResponse();
  virtual ~ChronoCloneLoginPbResponse();

  ChronoCloneLoginPbResponse(const ChronoCloneLoginPbResponse& from);

  inline ChronoCloneLoginPbResponse& operator=(const ChronoCloneLoginPbResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChronoCloneLoginPbResponse(ChronoCloneLoginPbResponse&& from) noexcept
    : ChronoCloneLoginPbResponse() {
    *this = ::std::move(from);
  }

  inline ChronoCloneLoginPbResponse& operator=(ChronoCloneLoginPbResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChronoCloneLoginPbResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChronoCloneLoginPbResponse* internal_default_instance() {
    return reinterpret_cast<const ChronoCloneLoginPbResponse*>(
               &_ChronoCloneLoginPbResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ChronoCloneLoginPbResponse* other);
  friend void swap(ChronoCloneLoginPbResponse& a, ChronoCloneLoginPbResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChronoCloneLoginPbResponse* New() const final {
    return CreateMaybeMessage<ChronoCloneLoginPbResponse>(NULL);
  }

  ChronoCloneLoginPbResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChronoCloneLoginPbResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChronoCloneLoginPbResponse& from);
  void MergeFrom(const ChronoCloneLoginPbResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChronoCloneLoginPbResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string chrono_id = 20;
  void clear_chrono_id();
  static const int kChronoIdFieldNumber = 20;
  const ::std::string& chrono_id() const;
  void set_chrono_id(const ::std::string& value);
  #if LANG_CXX11
  void set_chrono_id(::std::string&& value);
  #endif
  void set_chrono_id(const char* value);
  void set_chrono_id(const char* value, size_t size);
  ::std::string* mutable_chrono_id();
  ::std::string* release_chrono_id();
  void set_allocated_chrono_id(::std::string* chrono_id);

  // .echo.ResponseCode rc = 10;
  void clear_rc();
  static const int kRcFieldNumber = 10;
  ::echo::ResponseCode rc() const;
  void set_rc(::echo::ResponseCode value);

  // uint32 ark_version = 30;
  void clear_ark_version();
  static const int kArkVersionFieldNumber = 30;
  ::google::protobuf::uint32 ark_version() const;
  void set_ark_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:echo.ChronoCloneLoginPbResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chrono_id_;
  int rc_;
  ::google::protobuf::uint32 ark_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_echo_2eproto::TableStruct;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();

  typedef EchoService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::google::protobuf::RpcChannel* channel);
  EchoService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EchoService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements EchoService ------------------------------------------

  void Echo(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EchoRequest

// string message = 1;
inline void EchoRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoRequest::message() const {
  // @@protoc_insertion_point(field_get:echo.EchoRequest.message)
  return message_.GetNoArena();
}
inline void EchoRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.EchoRequest.message)
}
#if LANG_CXX11
inline void EchoRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.EchoRequest.message)
}
#endif
inline void EchoRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.EchoRequest.message)
}
inline void EchoRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.EchoRequest.message)
}
inline ::std::string* EchoRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:echo.EchoRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoRequest::release_message() {
  // @@protoc_insertion_point(field_release:echo.EchoRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:echo.EchoRequest.message)
}

// map<string, uint64> people = 2;
inline int EchoRequest::people_size() const {
  return people_.size();
}
inline void EchoRequest::clear_people() {
  people_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >&
EchoRequest::people() const {
  // @@protoc_insertion_point(field_map:echo.EchoRequest.people)
  return people_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >*
EchoRequest::mutable_people() {
  // @@protoc_insertion_point(field_mutable_map:echo.EchoRequest.people)
  return people_.MutableMap();
}

// string request = 3;
inline bool EchoRequest::has_request() const {
  return requestreply_case() == kRequest;
}
inline void EchoRequest::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void EchoRequest::clear_request() {
  if (has_request()) {
    requestreply_.request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_requestreply();
  }
}
inline const ::std::string& EchoRequest::request() const {
  // @@protoc_insertion_point(field_get:echo.EchoRequest.request)
  if (has_request()) {
    return requestreply_.request_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void EchoRequest::set_request(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:echo.EchoRequest.request)
  if (!has_request()) {
    clear_requestreply();
    set_has_request();
    requestreply_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.EchoRequest.request)
}
#if LANG_CXX11
inline void EchoRequest::set_request(::std::string&& value) {
  // @@protoc_insertion_point(field_set:echo.EchoRequest.request)
  if (!has_request()) {
    clear_requestreply();
    set_has_request();
    requestreply_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.EchoRequest.request)
}
#endif
inline void EchoRequest::set_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_request()) {
    clear_requestreply();
    set_has_request();
    requestreply_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.EchoRequest.request)
}
inline void EchoRequest::set_request(const char* value, size_t size) {
  if (!has_request()) {
    clear_requestreply();
    set_has_request();
    requestreply_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.EchoRequest.request)
}
inline ::std::string* EchoRequest::mutable_request() {
  if (!has_request()) {
    clear_requestreply();
    set_has_request();
    requestreply_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:echo.EchoRequest.request)
  return requestreply_.request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoRequest::release_request() {
  // @@protoc_insertion_point(field_release:echo.EchoRequest.request)
  if (has_request()) {
    clear_has_requestreply();
    return requestreply_.request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void EchoRequest::set_allocated_request(::std::string* request) {
  if (!has_request()) {
    requestreply_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_requestreply();
  if (request != NULL) {
    set_has_request();
    requestreply_.request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request);
  }
  // @@protoc_insertion_point(field_set_allocated:echo.EchoRequest.request)
}

// string resonse = 4;
inline bool EchoRequest::has_resonse() const {
  return requestreply_case() == kResonse;
}
inline void EchoRequest::set_has_resonse() {
  _oneof_case_[0] = kResonse;
}
inline void EchoRequest::clear_resonse() {
  if (has_resonse()) {
    requestreply_.resonse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_requestreply();
  }
}
inline const ::std::string& EchoRequest::resonse() const {
  // @@protoc_insertion_point(field_get:echo.EchoRequest.resonse)
  if (has_resonse()) {
    return requestreply_.resonse_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void EchoRequest::set_resonse(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:echo.EchoRequest.resonse)
  if (!has_resonse()) {
    clear_requestreply();
    set_has_resonse();
    requestreply_.resonse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.resonse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.EchoRequest.resonse)
}
#if LANG_CXX11
inline void EchoRequest::set_resonse(::std::string&& value) {
  // @@protoc_insertion_point(field_set:echo.EchoRequest.resonse)
  if (!has_resonse()) {
    clear_requestreply();
    set_has_resonse();
    requestreply_.resonse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.resonse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.EchoRequest.resonse)
}
#endif
inline void EchoRequest::set_resonse(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_resonse()) {
    clear_requestreply();
    set_has_resonse();
    requestreply_.resonse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.resonse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.EchoRequest.resonse)
}
inline void EchoRequest::set_resonse(const char* value, size_t size) {
  if (!has_resonse()) {
    clear_requestreply();
    set_has_resonse();
    requestreply_.resonse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  requestreply_.resonse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.EchoRequest.resonse)
}
inline ::std::string* EchoRequest::mutable_resonse() {
  if (!has_resonse()) {
    clear_requestreply();
    set_has_resonse();
    requestreply_.resonse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:echo.EchoRequest.resonse)
  return requestreply_.resonse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoRequest::release_resonse() {
  // @@protoc_insertion_point(field_release:echo.EchoRequest.resonse)
  if (has_resonse()) {
    clear_has_requestreply();
    return requestreply_.resonse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void EchoRequest::set_allocated_resonse(::std::string* resonse) {
  if (!has_resonse()) {
    requestreply_.resonse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_requestreply();
  if (resonse != NULL) {
    set_has_resonse();
    requestreply_.resonse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resonse);
  }
  // @@protoc_insertion_point(field_set_allocated:echo.EchoRequest.resonse)
}

inline bool EchoRequest::has_requestreply() const {
  return requestreply_case() != REQUESTREPLY_NOT_SET;
}
inline void EchoRequest::clear_has_requestreply() {
  _oneof_case_[0] = REQUESTREPLY_NOT_SET;
}
inline EchoRequest::RequestreplyCase EchoRequest::requestreply_case() const {
  return EchoRequest::RequestreplyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EchoResponse

// string response = 1;
inline void EchoResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoResponse::response() const {
  // @@protoc_insertion_point(field_get:echo.EchoResponse.response)
  return response_.GetNoArena();
}
inline void EchoResponse::set_response(const ::std::string& value) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.EchoResponse.response)
}
#if LANG_CXX11
inline void EchoResponse::set_response(::std::string&& value) {
  
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.EchoResponse.response)
}
#endif
inline void EchoResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.EchoResponse.response)
}
inline void EchoResponse::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.EchoResponse.response)
}
inline ::std::string* EchoResponse::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:echo.EchoResponse.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoResponse::release_response() {
  // @@protoc_insertion_point(field_release:echo.EchoResponse.response)
  
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoResponse::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:echo.EchoResponse.response)
}

// -------------------------------------------------------------------

// ChronoCloneLoginPbRequest

// string vdisk_id = 10;
inline void ChronoCloneLoginPbRequest::clear_vdisk_id() {
  vdisk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChronoCloneLoginPbRequest::vdisk_id() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.vdisk_id)
  return vdisk_id_.GetNoArena();
}
inline void ChronoCloneLoginPbRequest::set_vdisk_id(const ::std::string& value) {
  
  vdisk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.vdisk_id)
}
#if LANG_CXX11
inline void ChronoCloneLoginPbRequest::set_vdisk_id(::std::string&& value) {
  
  vdisk_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.ChronoCloneLoginPbRequest.vdisk_id)
}
#endif
inline void ChronoCloneLoginPbRequest::set_vdisk_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vdisk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.ChronoCloneLoginPbRequest.vdisk_id)
}
inline void ChronoCloneLoginPbRequest::set_vdisk_id(const char* value, size_t size) {
  
  vdisk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.ChronoCloneLoginPbRequest.vdisk_id)
}
inline ::std::string* ChronoCloneLoginPbRequest::mutable_vdisk_id() {
  
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbRequest.vdisk_id)
  return vdisk_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChronoCloneLoginPbRequest::release_vdisk_id() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbRequest.vdisk_id)
  
  return vdisk_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChronoCloneLoginPbRequest::set_allocated_vdisk_id(::std::string* vdisk_id) {
  if (vdisk_id != NULL) {
    
  } else {
    
  }
  vdisk_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vdisk_id);
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbRequest.vdisk_id)
}

// uint32 sector_size = 20;
inline void ChronoCloneLoginPbRequest::clear_sector_size() {
  sector_size_ = 0u;
}
inline ::google::protobuf::uint32 ChronoCloneLoginPbRequest::sector_size() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.sector_size)
  return sector_size_;
}
inline void ChronoCloneLoginPbRequest::set_sector_size(::google::protobuf::uint32 value) {
  
  sector_size_ = value;
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.sector_size)
}

// uint64 vdisk_cap = 30;
inline void ChronoCloneLoginPbRequest::clear_vdisk_cap() {
  vdisk_cap_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChronoCloneLoginPbRequest::vdisk_cap() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.vdisk_cap)
  return vdisk_cap_;
}
inline void ChronoCloneLoginPbRequest::set_vdisk_cap(::google::protobuf::uint64 value) {
  
  vdisk_cap_ = value;
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.vdisk_cap)
}

// string src_vdisk_id = 40;
inline void ChronoCloneLoginPbRequest::clear_src_vdisk_id() {
  src_vdisk_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChronoCloneLoginPbRequest::src_vdisk_id() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
  return src_vdisk_id_.GetNoArena();
}
inline void ChronoCloneLoginPbRequest::set_src_vdisk_id(const ::std::string& value) {
  
  src_vdisk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
}
#if LANG_CXX11
inline void ChronoCloneLoginPbRequest::set_src_vdisk_id(::std::string&& value) {
  
  src_vdisk_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
}
#endif
inline void ChronoCloneLoginPbRequest::set_src_vdisk_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_vdisk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
}
inline void ChronoCloneLoginPbRequest::set_src_vdisk_id(const char* value, size_t size) {
  
  src_vdisk_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
}
inline ::std::string* ChronoCloneLoginPbRequest::mutable_src_vdisk_id() {
  
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
  return src_vdisk_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChronoCloneLoginPbRequest::release_src_vdisk_id() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
  
  return src_vdisk_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChronoCloneLoginPbRequest::set_allocated_src_vdisk_id(::std::string* src_vdisk_id) {
  if (src_vdisk_id != NULL) {
    
  } else {
    
  }
  src_vdisk_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_vdisk_id);
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbRequest.src_vdisk_id)
}

// uint32 clone_tick = 50;
inline void ChronoCloneLoginPbRequest::clear_clone_tick() {
  clone_tick_ = 0u;
}
inline ::google::protobuf::uint32 ChronoCloneLoginPbRequest::clone_tick() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.clone_tick)
  return clone_tick_;
}
inline void ChronoCloneLoginPbRequest::set_clone_tick(::google::protobuf::uint32 value) {
  
  clone_tick_ = value;
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.clone_tick)
}

// string clone_res_id = 60;
inline void ChronoCloneLoginPbRequest::clear_clone_res_id() {
  clone_res_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChronoCloneLoginPbRequest::clone_res_id() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.clone_res_id)
  return clone_res_id_.GetNoArena();
}
inline void ChronoCloneLoginPbRequest::set_clone_res_id(const ::std::string& value) {
  
  clone_res_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.clone_res_id)
}
#if LANG_CXX11
inline void ChronoCloneLoginPbRequest::set_clone_res_id(::std::string&& value) {
  
  clone_res_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.ChronoCloneLoginPbRequest.clone_res_id)
}
#endif
inline void ChronoCloneLoginPbRequest::set_clone_res_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clone_res_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.ChronoCloneLoginPbRequest.clone_res_id)
}
inline void ChronoCloneLoginPbRequest::set_clone_res_id(const char* value, size_t size) {
  
  clone_res_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.ChronoCloneLoginPbRequest.clone_res_id)
}
inline ::std::string* ChronoCloneLoginPbRequest::mutable_clone_res_id() {
  
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbRequest.clone_res_id)
  return clone_res_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChronoCloneLoginPbRequest::release_clone_res_id() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbRequest.clone_res_id)
  
  return clone_res_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChronoCloneLoginPbRequest::set_allocated_clone_res_id(::std::string* clone_res_id) {
  if (clone_res_id != NULL) {
    
  } else {
    
  }
  clone_res_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clone_res_id);
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbRequest.clone_res_id)
}

// uint64 peer_size_per_shard = 70;
inline void ChronoCloneLoginPbRequest::clear_peer_size_per_shard() {
  peer_size_per_shard_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChronoCloneLoginPbRequest::peer_size_per_shard() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.peer_size_per_shard)
  return peer_size_per_shard_;
}
inline void ChronoCloneLoginPbRequest::set_peer_size_per_shard(::google::protobuf::uint64 value) {
  
  peer_size_per_shard_ = value;
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.peer_size_per_shard)
}

// .echo.PbCloneMode clone_mode = 80;
inline void ChronoCloneLoginPbRequest::clear_clone_mode() {
  clone_mode_ = 0;
}
inline ::echo::PbCloneMode ChronoCloneLoginPbRequest::clone_mode() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.clone_mode)
  return static_cast< ::echo::PbCloneMode >(clone_mode_);
}
inline void ChronoCloneLoginPbRequest::set_clone_mode(::echo::PbCloneMode value) {
  
  clone_mode_ = value;
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.clone_mode)
}

// string src_top_oid = 90;
inline void ChronoCloneLoginPbRequest::clear_src_top_oid() {
  src_top_oid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChronoCloneLoginPbRequest::src_top_oid() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.src_top_oid)
  return src_top_oid_.GetNoArena();
}
inline void ChronoCloneLoginPbRequest::set_src_top_oid(const ::std::string& value) {
  
  src_top_oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.src_top_oid)
}
#if LANG_CXX11
inline void ChronoCloneLoginPbRequest::set_src_top_oid(::std::string&& value) {
  
  src_top_oid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.ChronoCloneLoginPbRequest.src_top_oid)
}
#endif
inline void ChronoCloneLoginPbRequest::set_src_top_oid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_top_oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.ChronoCloneLoginPbRequest.src_top_oid)
}
inline void ChronoCloneLoginPbRequest::set_src_top_oid(const char* value, size_t size) {
  
  src_top_oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.ChronoCloneLoginPbRequest.src_top_oid)
}
inline ::std::string* ChronoCloneLoginPbRequest::mutable_src_top_oid() {
  
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbRequest.src_top_oid)
  return src_top_oid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChronoCloneLoginPbRequest::release_src_top_oid() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbRequest.src_top_oid)
  
  return src_top_oid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChronoCloneLoginPbRequest::set_allocated_src_top_oid(::std::string* src_top_oid) {
  if (src_top_oid != NULL) {
    
  } else {
    
  }
  src_top_oid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_top_oid);
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbRequest.src_top_oid)
}

// string src_oid = 100;
inline void ChronoCloneLoginPbRequest::clear_src_oid() {
  src_oid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChronoCloneLoginPbRequest::src_oid() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbRequest.src_oid)
  return src_oid_.GetNoArena();
}
inline void ChronoCloneLoginPbRequest::set_src_oid(const ::std::string& value) {
  
  src_oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbRequest.src_oid)
}
#if LANG_CXX11
inline void ChronoCloneLoginPbRequest::set_src_oid(::std::string&& value) {
  
  src_oid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.ChronoCloneLoginPbRequest.src_oid)
}
#endif
inline void ChronoCloneLoginPbRequest::set_src_oid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.ChronoCloneLoginPbRequest.src_oid)
}
inline void ChronoCloneLoginPbRequest::set_src_oid(const char* value, size_t size) {
  
  src_oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.ChronoCloneLoginPbRequest.src_oid)
}
inline ::std::string* ChronoCloneLoginPbRequest::mutable_src_oid() {
  
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbRequest.src_oid)
  return src_oid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChronoCloneLoginPbRequest::release_src_oid() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbRequest.src_oid)
  
  return src_oid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChronoCloneLoginPbRequest::set_allocated_src_oid(::std::string* src_oid) {
  if (src_oid != NULL) {
    
  } else {
    
  }
  src_oid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_oid);
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbRequest.src_oid)
}

// -------------------------------------------------------------------

// ChronoCloneLoginPbResponse

// .echo.ResponseCode rc = 10;
inline void ChronoCloneLoginPbResponse::clear_rc() {
  rc_ = 0;
}
inline ::echo::ResponseCode ChronoCloneLoginPbResponse::rc() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbResponse.rc)
  return static_cast< ::echo::ResponseCode >(rc_);
}
inline void ChronoCloneLoginPbResponse::set_rc(::echo::ResponseCode value) {
  
  rc_ = value;
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbResponse.rc)
}

// string chrono_id = 20;
inline void ChronoCloneLoginPbResponse::clear_chrono_id() {
  chrono_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChronoCloneLoginPbResponse::chrono_id() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbResponse.chrono_id)
  return chrono_id_.GetNoArena();
}
inline void ChronoCloneLoginPbResponse::set_chrono_id(const ::std::string& value) {
  
  chrono_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbResponse.chrono_id)
}
#if LANG_CXX11
inline void ChronoCloneLoginPbResponse::set_chrono_id(::std::string&& value) {
  
  chrono_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.ChronoCloneLoginPbResponse.chrono_id)
}
#endif
inline void ChronoCloneLoginPbResponse::set_chrono_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chrono_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.ChronoCloneLoginPbResponse.chrono_id)
}
inline void ChronoCloneLoginPbResponse::set_chrono_id(const char* value, size_t size) {
  
  chrono_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.ChronoCloneLoginPbResponse.chrono_id)
}
inline ::std::string* ChronoCloneLoginPbResponse::mutable_chrono_id() {
  
  // @@protoc_insertion_point(field_mutable:echo.ChronoCloneLoginPbResponse.chrono_id)
  return chrono_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChronoCloneLoginPbResponse::release_chrono_id() {
  // @@protoc_insertion_point(field_release:echo.ChronoCloneLoginPbResponse.chrono_id)
  
  return chrono_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChronoCloneLoginPbResponse::set_allocated_chrono_id(::std::string* chrono_id) {
  if (chrono_id != NULL) {
    
  } else {
    
  }
  chrono_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrono_id);
  // @@protoc_insertion_point(field_set_allocated:echo.ChronoCloneLoginPbResponse.chrono_id)
}

// uint32 ark_version = 30;
inline void ChronoCloneLoginPbResponse::clear_ark_version() {
  ark_version_ = 0u;
}
inline ::google::protobuf::uint32 ChronoCloneLoginPbResponse::ark_version() const {
  // @@protoc_insertion_point(field_get:echo.ChronoCloneLoginPbResponse.ark_version)
  return ark_version_;
}
inline void ChronoCloneLoginPbResponse::set_ark_version(::google::protobuf::uint32 value) {
  
  ark_version_ = value;
  // @@protoc_insertion_point(field_set:echo.ChronoCloneLoginPbResponse.ark_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace echo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::echo::PbCloneMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::echo::PbCloneMode>() {
  return ::echo::PbCloneMode_descriptor();
}
template <> struct is_proto_enum< ::echo::ResponseCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::echo::ResponseCode>() {
  return ::echo::ResponseCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_echo_2eproto
