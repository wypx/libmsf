// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: watchdog.proto

#include "watchdog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace WatchDog {
constexpr WatchdogPing::WatchdogPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pid_(0)
  , id_(0u)
  , ts_(0u){}
struct WatchdogPingDefaultTypeInternal {
  constexpr WatchdogPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchdogPingDefaultTypeInternal() {}
  union {
    WatchdogPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchdogPingDefaultTypeInternal _WatchdogPing_default_instance_;
constexpr WatchdogStartProcess::WatchdogStartProcess(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_persistent_(false){}
struct WatchdogStartProcessDefaultTypeInternal {
  constexpr WatchdogStartProcessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchdogStartProcessDefaultTypeInternal() {}
  union {
    WatchdogStartProcess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchdogStartProcessDefaultTypeInternal _WatchdogStartProcess_default_instance_;
constexpr WatchdogStopProcess::WatchdogStopProcess(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_persistent_(false){}
struct WatchdogStopProcessDefaultTypeInternal {
  constexpr WatchdogStopProcessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchdogStopProcessDefaultTypeInternal() {}
  union {
    WatchdogStopProcess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchdogStopProcessDefaultTypeInternal _WatchdogStopProcess_default_instance_;
constexpr WatchdogHeader::WatchdogHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : magic_(0u)
  , version_(0u)
  , command_(0u){}
struct WatchdogHeaderDefaultTypeInternal {
  constexpr WatchdogHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchdogHeaderDefaultTypeInternal() {}
  union {
    WatchdogHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchdogHeaderDefaultTypeInternal _WatchdogHeader_default_instance_;
constexpr WatchdogMessage::WatchdogMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ping_(nullptr)
  , start_(nullptr)
  , stop_(nullptr){}
struct WatchdogMessageDefaultTypeInternal {
  constexpr WatchdogMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchdogMessageDefaultTypeInternal() {}
  union {
    WatchdogMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchdogMessageDefaultTypeInternal _WatchdogMessage_default_instance_;
}  // namespace WatchDog
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_watchdog_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_watchdog_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_watchdog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_watchdog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogPing, name_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogPing, pid_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogPing, id_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogPing, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogStartProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogStartProcess, name_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogStartProcess, path_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogStartProcess, is_persistent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogStopProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogStopProcess, name_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogStopProcess, path_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogStopProcess, is_persistent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogHeader, magic_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogHeader, version_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogHeader, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogMessage, ping_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogMessage, start_),
  PROTOBUF_FIELD_OFFSET(::WatchDog::WatchdogMessage, stop_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::WatchDog::WatchdogPing)},
  { 9, -1, sizeof(::WatchDog::WatchdogStartProcess)},
  { 17, -1, sizeof(::WatchDog::WatchdogStopProcess)},
  { 25, -1, sizeof(::WatchDog::WatchdogHeader)},
  { 33, -1, sizeof(::WatchDog::WatchdogMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WatchDog::_WatchdogPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WatchDog::_WatchdogStartProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WatchDog::_WatchdogStopProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WatchDog::_WatchdogHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::WatchDog::_WatchdogMessage_default_instance_),
};

const char descriptor_table_protodef_watchdog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016watchdog.proto\022\010WatchDog\"A\n\014WatchdogPi"
  "ng\022\014\n\004name\030\001 \001(\t\022\013\n\003pid\030\002 \001(\005\022\n\n\002id\030\003 \001("
  "\r\022\n\n\002ts\030\004 \001(\r\"I\n\024WatchdogStartProcess\022\014\n"
  "\004name\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022\025\n\ris_persiste"
  "nt\030\003 \001(\010\"H\n\023WatchdogStopProcess\022\014\n\004name\030"
  "\001 \001(\t\022\014\n\004path\030\002 \001(\t\022\025\n\ris_persistent\030\003 \001"
  "(\010\"A\n\016WatchdogHeader\022\r\n\005magic\030\001 \001(\r\022\017\n\007v"
  "ersion\030\002 \001(\r\022\017\n\007command\030\003 \001(\r\"\223\001\n\017Watchd"
  "ogMessage\022$\n\004ping\030\001 \001(\0132\026.WatchDog.Watch"
  "dogPing\022-\n\005start\030\002 \001(\0132\036.WatchDog.Watchd"
  "ogStartProcess\022+\n\004stop\030\003 \001(\0132\035.WatchDog."
  "WatchdogStopProcess*\204\002\n\017WatchDogCommand\022"
  "\030\n\024WATCHDOG_CMD_UNKNOWN\020\000\022\026\n\022WATCHDOG_SU"
  "BSCRIBE\020\001\022\030\n\024WATCHDOG_UNSUBSCRIBE\020\002\022\026\n\022W"
  "ATCHDOG_KICK_PING\020\003\022\031\n\025WATCHDOG_SET_LOGL"
  "EVEL\020\004\022\034\n\030WATCHDOG_RESTART_PROCESS\020\005\022\035\n\031"
  "WATCHDOG_RELOAD_CONFIGURE\020\006\022\032\n\026WATCHDOG_"
  "START_PROCESS\020\007\022\031\n\025WATCHDOG_STOP_PROCESS"
  "\020\010B\003\200\001\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_watchdog_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_watchdog_2eproto = {
  false, false, 735, descriptor_table_protodef_watchdog_2eproto, "watchdog.proto", 
  &descriptor_table_watchdog_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_watchdog_2eproto::offsets,
  file_level_metadata_watchdog_2eproto, file_level_enum_descriptors_watchdog_2eproto, file_level_service_descriptors_watchdog_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_watchdog_2eproto_getter() {
  return &descriptor_table_watchdog_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_watchdog_2eproto(&descriptor_table_watchdog_2eproto);
namespace WatchDog {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchDogCommand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_watchdog_2eproto);
  return file_level_enum_descriptors_watchdog_2eproto[0];
}
bool WatchDogCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class WatchdogPing::_Internal {
 public:
};

WatchdogPing::WatchdogPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WatchDog.WatchdogPing)
}
WatchdogPing::WatchdogPing(const WatchdogPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(ts_));
  // @@protoc_insertion_point(copy_constructor:WatchDog.WatchdogPing)
}

inline void WatchdogPing::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ts_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(ts_));
}

WatchdogPing::~WatchdogPing() {
  // @@protoc_insertion_point(destructor:WatchDog.WatchdogPing)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchdogPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WatchdogPing::ArenaDtor(void* object) {
  WatchdogPing* _this = reinterpret_cast< WatchdogPing* >(object);
  (void)_this;
}
void WatchdogPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchdogPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchdogPing::Clear() {
// @@protoc_insertion_point(message_clear_start:WatchDog.WatchdogPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ts_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchdogPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WatchDog.WatchdogPing.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchdogPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WatchDog.WatchdogPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WatchDog.WatchdogPing.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pid(), target);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  // uint32 ts = 4;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WatchDog.WatchdogPing)
  return target;
}

size_t WatchdogPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WatchDog.WatchdogPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 ts = 4;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchdogPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchdogPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchdogPing::GetClassData() const { return &_class_data_; }

void WatchdogPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WatchdogPing *>(to)->MergeFrom(
      static_cast<const WatchdogPing &>(from));
}


void WatchdogPing::MergeFrom(const WatchdogPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WatchDog.WatchdogPing)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchdogPing::CopyFrom(const WatchdogPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WatchDog.WatchdogPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchdogPing::IsInitialized() const {
  return true;
}

void WatchdogPing::InternalSwap(WatchdogPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchdogPing, ts_)
      + sizeof(WatchdogPing::ts_)
      - PROTOBUF_FIELD_OFFSET(WatchdogPing, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchdogPing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_watchdog_2eproto_getter, &descriptor_table_watchdog_2eproto_once,
      file_level_metadata_watchdog_2eproto[0]);
}

// ===================================================================

class WatchdogStartProcess::_Internal {
 public:
};

WatchdogStartProcess::WatchdogStartProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WatchDog.WatchdogStartProcess)
}
WatchdogStartProcess::WatchdogStartProcess(const WatchdogStartProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  is_persistent_ = from.is_persistent_;
  // @@protoc_insertion_point(copy_constructor:WatchDog.WatchdogStartProcess)
}

inline void WatchdogStartProcess::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_persistent_ = false;
}

WatchdogStartProcess::~WatchdogStartProcess() {
  // @@protoc_insertion_point(destructor:WatchDog.WatchdogStartProcess)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchdogStartProcess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WatchdogStartProcess::ArenaDtor(void* object) {
  WatchdogStartProcess* _this = reinterpret_cast< WatchdogStartProcess* >(object);
  (void)_this;
}
void WatchdogStartProcess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchdogStartProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchdogStartProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:WatchDog.WatchdogStartProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  path_.ClearToEmpty();
  is_persistent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchdogStartProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WatchDog.WatchdogStartProcess.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WatchDog.WatchdogStartProcess.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_persistent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchdogStartProcess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WatchDog.WatchdogStartProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WatchDog.WatchdogStartProcess.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2;
  if (!this->path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WatchDog.WatchdogStartProcess.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // bool is_persistent = 3;
  if (this->is_persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WatchDog.WatchdogStartProcess)
  return target;
}

size_t WatchdogStartProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WatchDog.WatchdogStartProcess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2;
  if (!this->path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // bool is_persistent = 3;
  if (this->is_persistent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchdogStartProcess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchdogStartProcess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchdogStartProcess::GetClassData() const { return &_class_data_; }

void WatchdogStartProcess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WatchdogStartProcess *>(to)->MergeFrom(
      static_cast<const WatchdogStartProcess &>(from));
}


void WatchdogStartProcess::MergeFrom(const WatchdogStartProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WatchDog.WatchdogStartProcess)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from.is_persistent() != 0) {
    _internal_set_is_persistent(from._internal_is_persistent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchdogStartProcess::CopyFrom(const WatchdogStartProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WatchDog.WatchdogStartProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchdogStartProcess::IsInitialized() const {
  return true;
}

void WatchdogStartProcess::InternalSwap(WatchdogStartProcess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, GetArenaForAllocation(),
      &other->path_, other->GetArenaForAllocation()
  );
  swap(is_persistent_, other->is_persistent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchdogStartProcess::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_watchdog_2eproto_getter, &descriptor_table_watchdog_2eproto_once,
      file_level_metadata_watchdog_2eproto[1]);
}

// ===================================================================

class WatchdogStopProcess::_Internal {
 public:
};

WatchdogStopProcess::WatchdogStopProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WatchDog.WatchdogStopProcess)
}
WatchdogStopProcess::WatchdogStopProcess(const WatchdogStopProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  is_persistent_ = from.is_persistent_;
  // @@protoc_insertion_point(copy_constructor:WatchDog.WatchdogStopProcess)
}

inline void WatchdogStopProcess::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_persistent_ = false;
}

WatchdogStopProcess::~WatchdogStopProcess() {
  // @@protoc_insertion_point(destructor:WatchDog.WatchdogStopProcess)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchdogStopProcess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WatchdogStopProcess::ArenaDtor(void* object) {
  WatchdogStopProcess* _this = reinterpret_cast< WatchdogStopProcess* >(object);
  (void)_this;
}
void WatchdogStopProcess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchdogStopProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchdogStopProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:WatchDog.WatchdogStopProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  path_.ClearToEmpty();
  is_persistent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchdogStopProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WatchDog.WatchdogStopProcess.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WatchDog.WatchdogStopProcess.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_persistent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchdogStopProcess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WatchDog.WatchdogStopProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WatchDog.WatchdogStopProcess.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2;
  if (!this->path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WatchDog.WatchdogStopProcess.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // bool is_persistent = 3;
  if (this->is_persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WatchDog.WatchdogStopProcess)
  return target;
}

size_t WatchdogStopProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WatchDog.WatchdogStopProcess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2;
  if (!this->path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // bool is_persistent = 3;
  if (this->is_persistent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchdogStopProcess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchdogStopProcess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchdogStopProcess::GetClassData() const { return &_class_data_; }

void WatchdogStopProcess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WatchdogStopProcess *>(to)->MergeFrom(
      static_cast<const WatchdogStopProcess &>(from));
}


void WatchdogStopProcess::MergeFrom(const WatchdogStopProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WatchDog.WatchdogStopProcess)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from.is_persistent() != 0) {
    _internal_set_is_persistent(from._internal_is_persistent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchdogStopProcess::CopyFrom(const WatchdogStopProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WatchDog.WatchdogStopProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchdogStopProcess::IsInitialized() const {
  return true;
}

void WatchdogStopProcess::InternalSwap(WatchdogStopProcess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, GetArenaForAllocation(),
      &other->path_, other->GetArenaForAllocation()
  );
  swap(is_persistent_, other->is_persistent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchdogStopProcess::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_watchdog_2eproto_getter, &descriptor_table_watchdog_2eproto_once,
      file_level_metadata_watchdog_2eproto[2]);
}

// ===================================================================

class WatchdogHeader::_Internal {
 public:
};

WatchdogHeader::WatchdogHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WatchDog.WatchdogHeader)
}
WatchdogHeader::WatchdogHeader(const WatchdogHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&magic_, &from.magic_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:WatchDog.WatchdogHeader)
}

inline void WatchdogHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&magic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&magic_)) + sizeof(command_));
}

WatchdogHeader::~WatchdogHeader() {
  // @@protoc_insertion_point(destructor:WatchDog.WatchdogHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchdogHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WatchdogHeader::ArenaDtor(void* object) {
  WatchdogHeader* _this = reinterpret_cast< WatchdogHeader* >(object);
  (void)_this;
}
void WatchdogHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchdogHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchdogHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:WatchDog.WatchdogHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&magic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&magic_)) + sizeof(command_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchdogHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 magic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchdogHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WatchDog.WatchdogHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_magic(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint32 command = 3;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WatchDog.WatchdogHeader)
  return target;
}

size_t WatchdogHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WatchDog.WatchdogHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 magic = 1;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_magic());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 command = 3;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchdogHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchdogHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchdogHeader::GetClassData() const { return &_class_data_; }

void WatchdogHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WatchdogHeader *>(to)->MergeFrom(
      static_cast<const WatchdogHeader &>(from));
}


void WatchdogHeader::MergeFrom(const WatchdogHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WatchDog.WatchdogHeader)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magic() != 0) {
    _internal_set_magic(from._internal_magic());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchdogHeader::CopyFrom(const WatchdogHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WatchDog.WatchdogHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchdogHeader::IsInitialized() const {
  return true;
}

void WatchdogHeader::InternalSwap(WatchdogHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchdogHeader, command_)
      + sizeof(WatchdogHeader::command_)
      - PROTOBUF_FIELD_OFFSET(WatchdogHeader, magic_)>(
          reinterpret_cast<char*>(&magic_),
          reinterpret_cast<char*>(&other->magic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchdogHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_watchdog_2eproto_getter, &descriptor_table_watchdog_2eproto_once,
      file_level_metadata_watchdog_2eproto[3]);
}

// ===================================================================

class WatchdogMessage::_Internal {
 public:
  static const ::WatchDog::WatchdogPing& ping(const WatchdogMessage* msg);
  static const ::WatchDog::WatchdogStartProcess& start(const WatchdogMessage* msg);
  static const ::WatchDog::WatchdogStopProcess& stop(const WatchdogMessage* msg);
};

const ::WatchDog::WatchdogPing&
WatchdogMessage::_Internal::ping(const WatchdogMessage* msg) {
  return *msg->ping_;
}
const ::WatchDog::WatchdogStartProcess&
WatchdogMessage::_Internal::start(const WatchdogMessage* msg) {
  return *msg->start_;
}
const ::WatchDog::WatchdogStopProcess&
WatchdogMessage::_Internal::stop(const WatchdogMessage* msg) {
  return *msg->stop_;
}
WatchdogMessage::WatchdogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:WatchDog.WatchdogMessage)
}
WatchdogMessage::WatchdogMessage(const WatchdogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping()) {
    ping_ = new ::WatchDog::WatchdogPing(*from.ping_);
  } else {
    ping_ = nullptr;
  }
  if (from._internal_has_start()) {
    start_ = new ::WatchDog::WatchdogStartProcess(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_stop()) {
    stop_ = new ::WatchDog::WatchdogStopProcess(*from.stop_);
  } else {
    stop_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:WatchDog.WatchdogMessage)
}

inline void WatchdogMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ping_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&ping_)) + sizeof(stop_));
}

WatchdogMessage::~WatchdogMessage() {
  // @@protoc_insertion_point(destructor:WatchDog.WatchdogMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchdogMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ping_;
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete stop_;
}

void WatchdogMessage::ArenaDtor(void* object) {
  WatchdogMessage* _this = reinterpret_cast< WatchdogMessage* >(object);
  (void)_this;
}
void WatchdogMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchdogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchdogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:WatchDog.WatchdogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ping_ != nullptr) {
    delete ping_;
  }
  ping_ = nullptr;
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stop_ != nullptr) {
    delete stop_;
  }
  stop_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchdogMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .WatchDog.WatchdogPing ping = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WatchDog.WatchdogStartProcess start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WatchDog.WatchdogStopProcess stop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchdogMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WatchDog.WatchdogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .WatchDog.WatchdogPing ping = 1;
  if (this->has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ping(this), target, stream);
  }

  // .WatchDog.WatchdogStartProcess start = 2;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start(this), target, stream);
  }

  // .WatchDog.WatchdogStopProcess stop = 3;
  if (this->has_stop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WatchDog.WatchdogMessage)
  return target;
}

size_t WatchdogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WatchDog.WatchdogMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .WatchDog.WatchdogPing ping = 1;
  if (this->has_ping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ping_);
  }

  // .WatchDog.WatchdogStartProcess start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .WatchDog.WatchdogStopProcess stop = 3;
  if (this->has_stop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchdogMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchdogMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchdogMessage::GetClassData() const { return &_class_data_; }

void WatchdogMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WatchdogMessage *>(to)->MergeFrom(
      static_cast<const WatchdogMessage &>(from));
}


void WatchdogMessage::MergeFrom(const WatchdogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WatchDog.WatchdogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ping()) {
    _internal_mutable_ping()->::WatchDog::WatchdogPing::MergeFrom(from._internal_ping());
  }
  if (from.has_start()) {
    _internal_mutable_start()->::WatchDog::WatchdogStartProcess::MergeFrom(from._internal_start());
  }
  if (from.has_stop()) {
    _internal_mutable_stop()->::WatchDog::WatchdogStopProcess::MergeFrom(from._internal_stop());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchdogMessage::CopyFrom(const WatchdogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WatchDog.WatchdogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchdogMessage::IsInitialized() const {
  return true;
}

void WatchdogMessage::InternalSwap(WatchdogMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchdogMessage, stop_)
      + sizeof(WatchdogMessage::stop_)
      - PROTOBUF_FIELD_OFFSET(WatchdogMessage, ping_)>(
          reinterpret_cast<char*>(&ping_),
          reinterpret_cast<char*>(&other->ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchdogMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_watchdog_2eproto_getter, &descriptor_table_watchdog_2eproto_once,
      file_level_metadata_watchdog_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace WatchDog
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::WatchDog::WatchdogPing* Arena::CreateMaybeMessage< ::WatchDog::WatchdogPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WatchDog::WatchdogPing >(arena);
}
template<> PROTOBUF_NOINLINE ::WatchDog::WatchdogStartProcess* Arena::CreateMaybeMessage< ::WatchDog::WatchdogStartProcess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WatchDog::WatchdogStartProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::WatchDog::WatchdogStopProcess* Arena::CreateMaybeMessage< ::WatchDog::WatchdogStopProcess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WatchDog::WatchdogStopProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::WatchDog::WatchdogHeader* Arena::CreateMaybeMessage< ::WatchDog::WatchdogHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WatchDog::WatchdogHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::WatchDog::WatchdogMessage* Arena::CreateMaybeMessage< ::WatchDog::WatchdogMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WatchDog::WatchdogMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
