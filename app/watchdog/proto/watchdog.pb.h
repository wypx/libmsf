// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: watchdog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_watchdog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_watchdog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_watchdog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_watchdog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_watchdog_2eproto;
namespace WatchDog {
class WatchdogHeader;
struct WatchdogHeaderDefaultTypeInternal;
extern WatchdogHeaderDefaultTypeInternal _WatchdogHeader_default_instance_;
class WatchdogMessage;
struct WatchdogMessageDefaultTypeInternal;
extern WatchdogMessageDefaultTypeInternal _WatchdogMessage_default_instance_;
class WatchdogPing;
struct WatchdogPingDefaultTypeInternal;
extern WatchdogPingDefaultTypeInternal _WatchdogPing_default_instance_;
class WatchdogStartProcess;
struct WatchdogStartProcessDefaultTypeInternal;
extern WatchdogStartProcessDefaultTypeInternal _WatchdogStartProcess_default_instance_;
class WatchdogStopProcess;
struct WatchdogStopProcessDefaultTypeInternal;
extern WatchdogStopProcessDefaultTypeInternal _WatchdogStopProcess_default_instance_;
}  // namespace WatchDog
PROTOBUF_NAMESPACE_OPEN
template<> ::WatchDog::WatchdogHeader* Arena::CreateMaybeMessage<::WatchDog::WatchdogHeader>(Arena*);
template<> ::WatchDog::WatchdogMessage* Arena::CreateMaybeMessage<::WatchDog::WatchdogMessage>(Arena*);
template<> ::WatchDog::WatchdogPing* Arena::CreateMaybeMessage<::WatchDog::WatchdogPing>(Arena*);
template<> ::WatchDog::WatchdogStartProcess* Arena::CreateMaybeMessage<::WatchDog::WatchdogStartProcess>(Arena*);
template<> ::WatchDog::WatchdogStopProcess* Arena::CreateMaybeMessage<::WatchDog::WatchdogStopProcess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WatchDog {

enum WatchDogCommand : int {
  WATCHDOG_CMD_UNKNOWN = 0,
  WATCHDOG_SUBSCRIBE = 1,
  WATCHDOG_UNSUBSCRIBE = 2,
  WATCHDOG_KICK_PING = 3,
  WATCHDOG_SET_LOGLEVEL = 4,
  WATCHDOG_RESTART_PROCESS = 5,
  WATCHDOG_RELOAD_CONFIGURE = 6,
  WATCHDOG_START_PROCESS = 7,
  WATCHDOG_STOP_PROCESS = 8,
  WatchDogCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WatchDogCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WatchDogCommand_IsValid(int value);
constexpr WatchDogCommand WatchDogCommand_MIN = WATCHDOG_CMD_UNKNOWN;
constexpr WatchDogCommand WatchDogCommand_MAX = WATCHDOG_STOP_PROCESS;
constexpr int WatchDogCommand_ARRAYSIZE = WatchDogCommand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchDogCommand_descriptor();
template<typename T>
inline const std::string& WatchDogCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WatchDogCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WatchDogCommand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WatchDogCommand_descriptor(), enum_t_value);
}
inline bool WatchDogCommand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WatchDogCommand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WatchDogCommand>(
    WatchDogCommand_descriptor(), name, value);
}
// ===================================================================

class WatchdogPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WatchDog.WatchdogPing) */ {
 public:
  inline WatchdogPing() : WatchdogPing(nullptr) {}
  ~WatchdogPing() override;
  explicit constexpr WatchdogPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchdogPing(const WatchdogPing& from);
  WatchdogPing(WatchdogPing&& from) noexcept
    : WatchdogPing() {
    *this = ::std::move(from);
  }

  inline WatchdogPing& operator=(const WatchdogPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchdogPing& operator=(WatchdogPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchdogPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchdogPing* internal_default_instance() {
    return reinterpret_cast<const WatchdogPing*>(
               &_WatchdogPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WatchdogPing& a, WatchdogPing& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchdogPing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchdogPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchdogPing* New() const final {
    return new WatchdogPing();
  }

  WatchdogPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchdogPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchdogPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchdogPing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchdogPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WatchDog.WatchdogPing";
  }
  protected:
  explicit WatchdogPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPidFieldNumber = 2,
    kIdFieldNumber = 3,
    kTsFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 pid = 2;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ts = 4;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::uint32 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:WatchDog.WatchdogPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_watchdog_2eproto;
};
// -------------------------------------------------------------------

class WatchdogStartProcess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WatchDog.WatchdogStartProcess) */ {
 public:
  inline WatchdogStartProcess() : WatchdogStartProcess(nullptr) {}
  ~WatchdogStartProcess() override;
  explicit constexpr WatchdogStartProcess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchdogStartProcess(const WatchdogStartProcess& from);
  WatchdogStartProcess(WatchdogStartProcess&& from) noexcept
    : WatchdogStartProcess() {
    *this = ::std::move(from);
  }

  inline WatchdogStartProcess& operator=(const WatchdogStartProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchdogStartProcess& operator=(WatchdogStartProcess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchdogStartProcess& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchdogStartProcess* internal_default_instance() {
    return reinterpret_cast<const WatchdogStartProcess*>(
               &_WatchdogStartProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WatchdogStartProcess& a, WatchdogStartProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchdogStartProcess* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchdogStartProcess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchdogStartProcess* New() const final {
    return new WatchdogStartProcess();
  }

  WatchdogStartProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchdogStartProcess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchdogStartProcess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchdogStartProcess& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchdogStartProcess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WatchDog.WatchdogStartProcess";
  }
  protected:
  explicit WatchdogStartProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kIsPersistentFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bool is_persistent = 3;
  void clear_is_persistent();
  bool is_persistent() const;
  void set_is_persistent(bool value);
  private:
  bool _internal_is_persistent() const;
  void _internal_set_is_persistent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:WatchDog.WatchdogStartProcess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  bool is_persistent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_watchdog_2eproto;
};
// -------------------------------------------------------------------

class WatchdogStopProcess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WatchDog.WatchdogStopProcess) */ {
 public:
  inline WatchdogStopProcess() : WatchdogStopProcess(nullptr) {}
  ~WatchdogStopProcess() override;
  explicit constexpr WatchdogStopProcess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchdogStopProcess(const WatchdogStopProcess& from);
  WatchdogStopProcess(WatchdogStopProcess&& from) noexcept
    : WatchdogStopProcess() {
    *this = ::std::move(from);
  }

  inline WatchdogStopProcess& operator=(const WatchdogStopProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchdogStopProcess& operator=(WatchdogStopProcess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchdogStopProcess& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchdogStopProcess* internal_default_instance() {
    return reinterpret_cast<const WatchdogStopProcess*>(
               &_WatchdogStopProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WatchdogStopProcess& a, WatchdogStopProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchdogStopProcess* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchdogStopProcess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchdogStopProcess* New() const final {
    return new WatchdogStopProcess();
  }

  WatchdogStopProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchdogStopProcess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchdogStopProcess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchdogStopProcess& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchdogStopProcess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WatchDog.WatchdogStopProcess";
  }
  protected:
  explicit WatchdogStopProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kIsPersistentFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bool is_persistent = 3;
  void clear_is_persistent();
  bool is_persistent() const;
  void set_is_persistent(bool value);
  private:
  bool _internal_is_persistent() const;
  void _internal_set_is_persistent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:WatchDog.WatchdogStopProcess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  bool is_persistent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_watchdog_2eproto;
};
// -------------------------------------------------------------------

class WatchdogHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WatchDog.WatchdogHeader) */ {
 public:
  inline WatchdogHeader() : WatchdogHeader(nullptr) {}
  ~WatchdogHeader() override;
  explicit constexpr WatchdogHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchdogHeader(const WatchdogHeader& from);
  WatchdogHeader(WatchdogHeader&& from) noexcept
    : WatchdogHeader() {
    *this = ::std::move(from);
  }

  inline WatchdogHeader& operator=(const WatchdogHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchdogHeader& operator=(WatchdogHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchdogHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchdogHeader* internal_default_instance() {
    return reinterpret_cast<const WatchdogHeader*>(
               &_WatchdogHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WatchdogHeader& a, WatchdogHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchdogHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchdogHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchdogHeader* New() const final {
    return new WatchdogHeader();
  }

  WatchdogHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchdogHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchdogHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchdogHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchdogHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WatchDog.WatchdogHeader";
  }
  protected:
  explicit WatchdogHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
    kVersionFieldNumber = 2,
    kCommandFieldNumber = 3,
  };
  // uint32 magic = 1;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint32 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_magic() const;
  void _internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 command = 3;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command() const;
  void _internal_set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:WatchDog.WatchdogHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_watchdog_2eproto;
};
// -------------------------------------------------------------------

class WatchdogMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WatchDog.WatchdogMessage) */ {
 public:
  inline WatchdogMessage() : WatchdogMessage(nullptr) {}
  ~WatchdogMessage() override;
  explicit constexpr WatchdogMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchdogMessage(const WatchdogMessage& from);
  WatchdogMessage(WatchdogMessage&& from) noexcept
    : WatchdogMessage() {
    *this = ::std::move(from);
  }

  inline WatchdogMessage& operator=(const WatchdogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchdogMessage& operator=(WatchdogMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchdogMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchdogMessage* internal_default_instance() {
    return reinterpret_cast<const WatchdogMessage*>(
               &_WatchdogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WatchdogMessage& a, WatchdogMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchdogMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchdogMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchdogMessage* New() const final {
    return new WatchdogMessage();
  }

  WatchdogMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchdogMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchdogMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchdogMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchdogMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WatchDog.WatchdogMessage";
  }
  protected:
  explicit WatchdogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingFieldNumber = 1,
    kStartFieldNumber = 2,
    kStopFieldNumber = 3,
  };
  // .WatchDog.WatchdogPing ping = 1;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::WatchDog::WatchdogPing& ping() const;
  PROTOBUF_MUST_USE_RESULT ::WatchDog::WatchdogPing* release_ping();
  ::WatchDog::WatchdogPing* mutable_ping();
  void set_allocated_ping(::WatchDog::WatchdogPing* ping);
  private:
  const ::WatchDog::WatchdogPing& _internal_ping() const;
  ::WatchDog::WatchdogPing* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::WatchDog::WatchdogPing* ping);
  ::WatchDog::WatchdogPing* unsafe_arena_release_ping();

  // .WatchDog.WatchdogStartProcess start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::WatchDog::WatchdogStartProcess& start() const;
  PROTOBUF_MUST_USE_RESULT ::WatchDog::WatchdogStartProcess* release_start();
  ::WatchDog::WatchdogStartProcess* mutable_start();
  void set_allocated_start(::WatchDog::WatchdogStartProcess* start);
  private:
  const ::WatchDog::WatchdogStartProcess& _internal_start() const;
  ::WatchDog::WatchdogStartProcess* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::WatchDog::WatchdogStartProcess* start);
  ::WatchDog::WatchdogStartProcess* unsafe_arena_release_start();

  // .WatchDog.WatchdogStopProcess stop = 3;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  const ::WatchDog::WatchdogStopProcess& stop() const;
  PROTOBUF_MUST_USE_RESULT ::WatchDog::WatchdogStopProcess* release_stop();
  ::WatchDog::WatchdogStopProcess* mutable_stop();
  void set_allocated_stop(::WatchDog::WatchdogStopProcess* stop);
  private:
  const ::WatchDog::WatchdogStopProcess& _internal_stop() const;
  ::WatchDog::WatchdogStopProcess* _internal_mutable_stop();
  public:
  void unsafe_arena_set_allocated_stop(
      ::WatchDog::WatchdogStopProcess* stop);
  ::WatchDog::WatchdogStopProcess* unsafe_arena_release_stop();

  // @@protoc_insertion_point(class_scope:WatchDog.WatchdogMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::WatchDog::WatchdogPing* ping_;
  ::WatchDog::WatchdogStartProcess* start_;
  ::WatchDog::WatchdogStopProcess* stop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_watchdog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WatchdogPing

// string name = 1;
inline void WatchdogPing::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WatchdogPing::name() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogPing.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchdogPing::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogPing.name)
}
inline std::string* WatchdogPing::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:WatchDog.WatchdogPing.name)
  return _s;
}
inline const std::string& WatchdogPing::_internal_name() const {
  return name_.Get();
}
inline void WatchdogPing::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchdogPing::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchdogPing::release_name() {
  // @@protoc_insertion_point(field_release:WatchDog.WatchdogPing.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchdogPing::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:WatchDog.WatchdogPing.name)
}

// int32 pid = 2;
inline void WatchdogPing::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WatchdogPing::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WatchdogPing::pid() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogPing.pid)
  return _internal_pid();
}
inline void WatchdogPing::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void WatchdogPing::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogPing.pid)
}

// uint32 id = 3;
inline void WatchdogPing::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchdogPing::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchdogPing::id() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogPing.id)
  return _internal_id();
}
inline void WatchdogPing::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void WatchdogPing::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogPing.id)
}

// uint32 ts = 4;
inline void WatchdogPing::clear_ts() {
  ts_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchdogPing::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchdogPing::ts() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogPing.ts)
  return _internal_ts();
}
inline void WatchdogPing::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ts_ = value;
}
inline void WatchdogPing::set_ts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogPing.ts)
}

// -------------------------------------------------------------------

// WatchdogStartProcess

// string name = 1;
inline void WatchdogStartProcess::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WatchdogStartProcess::name() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogStartProcess.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchdogStartProcess::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogStartProcess.name)
}
inline std::string* WatchdogStartProcess::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:WatchDog.WatchdogStartProcess.name)
  return _s;
}
inline const std::string& WatchdogStartProcess::_internal_name() const {
  return name_.Get();
}
inline void WatchdogStartProcess::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchdogStartProcess::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchdogStartProcess::release_name() {
  // @@protoc_insertion_point(field_release:WatchDog.WatchdogStartProcess.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchdogStartProcess::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:WatchDog.WatchdogStartProcess.name)
}

// string path = 2;
inline void WatchdogStartProcess::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& WatchdogStartProcess::path() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogStartProcess.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchdogStartProcess::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogStartProcess.path)
}
inline std::string* WatchdogStartProcess::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:WatchDog.WatchdogStartProcess.path)
  return _s;
}
inline const std::string& WatchdogStartProcess::_internal_path() const {
  return path_.Get();
}
inline void WatchdogStartProcess::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchdogStartProcess::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchdogStartProcess::release_path() {
  // @@protoc_insertion_point(field_release:WatchDog.WatchdogStartProcess.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchdogStartProcess::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:WatchDog.WatchdogStartProcess.path)
}

// bool is_persistent = 3;
inline void WatchdogStartProcess::clear_is_persistent() {
  is_persistent_ = false;
}
inline bool WatchdogStartProcess::_internal_is_persistent() const {
  return is_persistent_;
}
inline bool WatchdogStartProcess::is_persistent() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogStartProcess.is_persistent)
  return _internal_is_persistent();
}
inline void WatchdogStartProcess::_internal_set_is_persistent(bool value) {
  
  is_persistent_ = value;
}
inline void WatchdogStartProcess::set_is_persistent(bool value) {
  _internal_set_is_persistent(value);
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogStartProcess.is_persistent)
}

// -------------------------------------------------------------------

// WatchdogStopProcess

// string name = 1;
inline void WatchdogStopProcess::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WatchdogStopProcess::name() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogStopProcess.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchdogStopProcess::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogStopProcess.name)
}
inline std::string* WatchdogStopProcess::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:WatchDog.WatchdogStopProcess.name)
  return _s;
}
inline const std::string& WatchdogStopProcess::_internal_name() const {
  return name_.Get();
}
inline void WatchdogStopProcess::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchdogStopProcess::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchdogStopProcess::release_name() {
  // @@protoc_insertion_point(field_release:WatchDog.WatchdogStopProcess.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchdogStopProcess::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:WatchDog.WatchdogStopProcess.name)
}

// string path = 2;
inline void WatchdogStopProcess::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& WatchdogStopProcess::path() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogStopProcess.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchdogStopProcess::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogStopProcess.path)
}
inline std::string* WatchdogStopProcess::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:WatchDog.WatchdogStopProcess.path)
  return _s;
}
inline const std::string& WatchdogStopProcess::_internal_path() const {
  return path_.Get();
}
inline void WatchdogStopProcess::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchdogStopProcess::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchdogStopProcess::release_path() {
  // @@protoc_insertion_point(field_release:WatchDog.WatchdogStopProcess.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchdogStopProcess::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:WatchDog.WatchdogStopProcess.path)
}

// bool is_persistent = 3;
inline void WatchdogStopProcess::clear_is_persistent() {
  is_persistent_ = false;
}
inline bool WatchdogStopProcess::_internal_is_persistent() const {
  return is_persistent_;
}
inline bool WatchdogStopProcess::is_persistent() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogStopProcess.is_persistent)
  return _internal_is_persistent();
}
inline void WatchdogStopProcess::_internal_set_is_persistent(bool value) {
  
  is_persistent_ = value;
}
inline void WatchdogStopProcess::set_is_persistent(bool value) {
  _internal_set_is_persistent(value);
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogStopProcess.is_persistent)
}

// -------------------------------------------------------------------

// WatchdogHeader

// uint32 magic = 1;
inline void WatchdogHeader::clear_magic() {
  magic_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchdogHeader::_internal_magic() const {
  return magic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchdogHeader::magic() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogHeader.magic)
  return _internal_magic();
}
inline void WatchdogHeader::_internal_set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magic_ = value;
}
inline void WatchdogHeader::set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogHeader.magic)
}

// uint32 version = 2;
inline void WatchdogHeader::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchdogHeader::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchdogHeader::version() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogHeader.version)
  return _internal_version();
}
inline void WatchdogHeader::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void WatchdogHeader::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogHeader.version)
}

// uint32 command = 3;
inline void WatchdogHeader::clear_command() {
  command_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchdogHeader::_internal_command() const {
  return command_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchdogHeader::command() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogHeader.command)
  return _internal_command();
}
inline void WatchdogHeader::_internal_set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  command_ = value;
}
inline void WatchdogHeader::set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:WatchDog.WatchdogHeader.command)
}

// -------------------------------------------------------------------

// WatchdogMessage

// .WatchDog.WatchdogPing ping = 1;
inline bool WatchdogMessage::_internal_has_ping() const {
  return this != internal_default_instance() && ping_ != nullptr;
}
inline bool WatchdogMessage::has_ping() const {
  return _internal_has_ping();
}
inline void WatchdogMessage::clear_ping() {
  if (GetArenaForAllocation() == nullptr && ping_ != nullptr) {
    delete ping_;
  }
  ping_ = nullptr;
}
inline const ::WatchDog::WatchdogPing& WatchdogMessage::_internal_ping() const {
  const ::WatchDog::WatchdogPing* p = ping_;
  return p != nullptr ? *p : reinterpret_cast<const ::WatchDog::WatchdogPing&>(
      ::WatchDog::_WatchdogPing_default_instance_);
}
inline const ::WatchDog::WatchdogPing& WatchdogMessage::ping() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogMessage.ping)
  return _internal_ping();
}
inline void WatchdogMessage::unsafe_arena_set_allocated_ping(
    ::WatchDog::WatchdogPing* ping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_);
  }
  ping_ = ping;
  if (ping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WatchDog.WatchdogMessage.ping)
}
inline ::WatchDog::WatchdogPing* WatchdogMessage::release_ping() {
  
  ::WatchDog::WatchdogPing* temp = ping_;
  ping_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::WatchDog::WatchdogPing* WatchdogMessage::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_release:WatchDog.WatchdogMessage.ping)
  
  ::WatchDog::WatchdogPing* temp = ping_;
  ping_ = nullptr;
  return temp;
}
inline ::WatchDog::WatchdogPing* WatchdogMessage::_internal_mutable_ping() {
  
  if (ping_ == nullptr) {
    auto* p = CreateMaybeMessage<::WatchDog::WatchdogPing>(GetArenaForAllocation());
    ping_ = p;
  }
  return ping_;
}
inline ::WatchDog::WatchdogPing* WatchdogMessage::mutable_ping() {
  ::WatchDog::WatchdogPing* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:WatchDog.WatchdogMessage.ping)
  return _msg;
}
inline void WatchdogMessage::set_allocated_ping(::WatchDog::WatchdogPing* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ping_;
  }
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::WatchDog::WatchdogPing>::GetOwningArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    
  } else {
    
  }
  ping_ = ping;
  // @@protoc_insertion_point(field_set_allocated:WatchDog.WatchdogMessage.ping)
}

// .WatchDog.WatchdogStartProcess start = 2;
inline bool WatchdogMessage::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool WatchdogMessage::has_start() const {
  return _internal_has_start();
}
inline void WatchdogMessage::clear_start() {
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
inline const ::WatchDog::WatchdogStartProcess& WatchdogMessage::_internal_start() const {
  const ::WatchDog::WatchdogStartProcess* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::WatchDog::WatchdogStartProcess&>(
      ::WatchDog::_WatchdogStartProcess_default_instance_);
}
inline const ::WatchDog::WatchdogStartProcess& WatchdogMessage::start() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogMessage.start)
  return _internal_start();
}
inline void WatchdogMessage::unsafe_arena_set_allocated_start(
    ::WatchDog::WatchdogStartProcess* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WatchDog.WatchdogMessage.start)
}
inline ::WatchDog::WatchdogStartProcess* WatchdogMessage::release_start() {
  
  ::WatchDog::WatchdogStartProcess* temp = start_;
  start_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::WatchDog::WatchdogStartProcess* WatchdogMessage::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:WatchDog.WatchdogMessage.start)
  
  ::WatchDog::WatchdogStartProcess* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::WatchDog::WatchdogStartProcess* WatchdogMessage::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::WatchDog::WatchdogStartProcess>(GetArenaForAllocation());
    start_ = p;
  }
  return start_;
}
inline ::WatchDog::WatchdogStartProcess* WatchdogMessage::mutable_start() {
  ::WatchDog::WatchdogStartProcess* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:WatchDog.WatchdogMessage.start)
  return _msg;
}
inline void WatchdogMessage::set_allocated_start(::WatchDog::WatchdogStartProcess* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::WatchDog::WatchdogStartProcess>::GetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:WatchDog.WatchdogMessage.start)
}

// .WatchDog.WatchdogStopProcess stop = 3;
inline bool WatchdogMessage::_internal_has_stop() const {
  return this != internal_default_instance() && stop_ != nullptr;
}
inline bool WatchdogMessage::has_stop() const {
  return _internal_has_stop();
}
inline void WatchdogMessage::clear_stop() {
  if (GetArenaForAllocation() == nullptr && stop_ != nullptr) {
    delete stop_;
  }
  stop_ = nullptr;
}
inline const ::WatchDog::WatchdogStopProcess& WatchdogMessage::_internal_stop() const {
  const ::WatchDog::WatchdogStopProcess* p = stop_;
  return p != nullptr ? *p : reinterpret_cast<const ::WatchDog::WatchdogStopProcess&>(
      ::WatchDog::_WatchdogStopProcess_default_instance_);
}
inline const ::WatchDog::WatchdogStopProcess& WatchdogMessage::stop() const {
  // @@protoc_insertion_point(field_get:WatchDog.WatchdogMessage.stop)
  return _internal_stop();
}
inline void WatchdogMessage::unsafe_arena_set_allocated_stop(
    ::WatchDog::WatchdogStopProcess* stop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_);
  }
  stop_ = stop;
  if (stop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WatchDog.WatchdogMessage.stop)
}
inline ::WatchDog::WatchdogStopProcess* WatchdogMessage::release_stop() {
  
  ::WatchDog::WatchdogStopProcess* temp = stop_;
  stop_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::WatchDog::WatchdogStopProcess* WatchdogMessage::unsafe_arena_release_stop() {
  // @@protoc_insertion_point(field_release:WatchDog.WatchdogMessage.stop)
  
  ::WatchDog::WatchdogStopProcess* temp = stop_;
  stop_ = nullptr;
  return temp;
}
inline ::WatchDog::WatchdogStopProcess* WatchdogMessage::_internal_mutable_stop() {
  
  if (stop_ == nullptr) {
    auto* p = CreateMaybeMessage<::WatchDog::WatchdogStopProcess>(GetArenaForAllocation());
    stop_ = p;
  }
  return stop_;
}
inline ::WatchDog::WatchdogStopProcess* WatchdogMessage::mutable_stop() {
  ::WatchDog::WatchdogStopProcess* _msg = _internal_mutable_stop();
  // @@protoc_insertion_point(field_mutable:WatchDog.WatchdogMessage.stop)
  return _msg;
}
inline void WatchdogMessage::set_allocated_stop(::WatchDog::WatchdogStopProcess* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stop_;
  }
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::WatchDog::WatchdogStopProcess>::GetOwningArena(stop);
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    
  } else {
    
  }
  stop_ = stop;
  // @@protoc_insertion_point(field_set_allocated:WatchDog.WatchdogMessage.stop)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace WatchDog

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::WatchDog::WatchDogCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WatchDog::WatchDogCommand>() {
  return ::WatchDog::WatchDogCommand_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_watchdog_2eproto
