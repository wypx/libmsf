// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: leader_election.proto

#include "leader_election.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace fraft {
class DummyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Dummy>
      _instance;
} _Dummy_default_instance_;
class NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Notification>
      _instance;
} _Notification_default_instance_;
}  // namespace fraft
namespace protobuf_leader_5felection_2eproto {
static void InitDefaultsDummy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fraft::_Dummy_default_instance_;
    new (ptr) ::fraft::Dummy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fraft::Dummy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Dummy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDummy}, {}};

static void InitDefaultsNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fraft::_Notification_default_instance_;
    new (ptr) ::fraft::Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fraft::Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotification}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Dummy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Notification.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::Dummy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::Notification, leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::Notification, zxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::Notification, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::Notification, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::Notification, server_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fraft::Dummy)},
  { 5, -1, sizeof(::fraft::Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fraft::_Dummy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fraft::_Notification_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "leader_election.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025leader_election.proto\022\005fraft\"\007\n\005Dummy\""
      "]\n\014Notification\022\016\n\006leader\030\001 \001(\004\022\014\n\004zxid\030"
      "\002 \001(\004\022\r\n\005epoch\030\003 \001(\004\022\r\n\005state\030\004 \001(\r\022\021\n\ts"
      "erver_id\030\005 \001(\0042E\n\016LeaderElection\0223\n\016Lead"
      "erProposal\022\023.fraft.Notification\032\014.fraft."
      "DummyB\003\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 218);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "leader_election.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_leader_5felection_2eproto
namespace fraft {

// ===================================================================

void Dummy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dummy::Dummy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_leader_5felection_2eproto::scc_info_Dummy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fraft.Dummy)
}
Dummy::Dummy(const Dummy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fraft.Dummy)
}

void Dummy::SharedCtor() {
}

Dummy::~Dummy() {
  // @@protoc_insertion_point(destructor:fraft.Dummy)
  SharedDtor();
}

void Dummy::SharedDtor() {
}

void Dummy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Dummy::descriptor() {
  ::protobuf_leader_5felection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_leader_5felection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Dummy& Dummy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_leader_5felection_2eproto::scc_info_Dummy.base);
  return *internal_default_instance();
}


void Dummy::Clear() {
// @@protoc_insertion_point(message_clear_start:fraft.Dummy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Dummy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fraft.Dummy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:fraft.Dummy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fraft.Dummy)
  return false;
#undef DO_
}

void Dummy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fraft.Dummy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fraft.Dummy)
}

::google::protobuf::uint8* Dummy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fraft.Dummy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fraft.Dummy)
  return target;
}

size_t Dummy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fraft.Dummy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dummy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fraft.Dummy)
  GOOGLE_DCHECK_NE(&from, this);
  const Dummy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dummy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fraft.Dummy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fraft.Dummy)
    MergeFrom(*source);
  }
}

void Dummy::MergeFrom(const Dummy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fraft.Dummy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Dummy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fraft.Dummy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dummy::CopyFrom(const Dummy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fraft.Dummy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dummy::IsInitialized() const {
  return true;
}

void Dummy::Swap(Dummy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dummy::InternalSwap(Dummy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Dummy::GetMetadata() const {
  protobuf_leader_5felection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_leader_5felection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notification::kLeaderFieldNumber;
const int Notification::kZxidFieldNumber;
const int Notification::kEpochFieldNumber;
const int Notification::kStateFieldNumber;
const int Notification::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notification::Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_leader_5felection_2eproto::scc_info_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fraft.Notification)
}
Notification::Notification(const Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leader_, &from.leader_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&leader_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:fraft.Notification)
}

void Notification::SharedCtor() {
  ::memset(&leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&leader_)) + sizeof(state_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:fraft.Notification)
  SharedDtor();
}

void Notification::SharedDtor() {
}

void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Notification::descriptor() {
  ::protobuf_leader_5felection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_leader_5felection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Notification& Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_leader_5felection_2eproto::scc_info_Notification.base);
  return *internal_default_instance();
}


void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:fraft.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&leader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&leader_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fraft.Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 leader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 zxid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 epoch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 server_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fraft.Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fraft.Notification)
  return false;
#undef DO_
}

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fraft.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 leader = 1;
  if (this->leader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->leader(), output);
  }

  // uint64 zxid = 2;
  if (this->zxid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->zxid(), output);
  }

  // uint64 epoch = 3;
  if (this->epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->epoch(), output);
  }

  // uint32 state = 4;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }

  // uint64 server_id = 5;
  if (this->server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->server_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fraft.Notification)
}

::google::protobuf::uint8* Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fraft.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 leader = 1;
  if (this->leader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->leader(), target);
  }

  // uint64 zxid = 2;
  if (this->zxid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->zxid(), target);
  }

  // uint64 epoch = 3;
  if (this->epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->epoch(), target);
  }

  // uint32 state = 4;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }

  // uint64 server_id = 5;
  if (this->server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->server_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fraft.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fraft.Notification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 leader = 1;
  if (this->leader() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader());
  }

  // uint64 zxid = 2;
  if (this->zxid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->zxid());
  }

  // uint64 epoch = 3;
  if (this->epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->epoch());
  }

  // uint64 server_id = 5;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->server_id());
  }

  // uint32 state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fraft.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fraft.Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fraft.Notification)
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fraft.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader() != 0) {
    set_leader(from.leader());
  }
  if (from.zxid() != 0) {
    set_zxid(from.zxid());
  }
  if (from.epoch() != 0) {
    set_epoch(from.epoch());
  }
  if (from.server_id() != 0) {
    set_server_id(from.server_id());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fraft.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fraft.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::Swap(Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notification::InternalSwap(Notification* other) {
  using std::swap;
  swap(leader_, other->leader_);
  swap(zxid_, other->zxid_);
  swap(epoch_, other->epoch_);
  swap(server_id_, other->server_id_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Notification::GetMetadata() const {
  protobuf_leader_5felection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_leader_5felection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

LeaderElection::~LeaderElection() {}

const ::google::protobuf::ServiceDescriptor* LeaderElection::descriptor() {
  protobuf_leader_5felection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_leader_5felection_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* LeaderElection::GetDescriptor() {
  return descriptor();
}

void LeaderElection::LeaderProposal(::google::protobuf::RpcController* controller,
                         const ::fraft::Notification*,
                         ::fraft::Dummy*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LeaderProposal() not implemented.");
  done->Run();
}

void LeaderElection::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_leader_5felection_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      LeaderProposal(controller,
             ::google::protobuf::down_cast<const ::fraft::Notification*>(request),
             ::google::protobuf::down_cast< ::fraft::Dummy*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& LeaderElection::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fraft::Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& LeaderElection::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fraft::Dummy::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

LeaderElection_Stub::LeaderElection_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
LeaderElection_Stub::LeaderElection_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
LeaderElection_Stub::~LeaderElection_Stub() {
  if (owns_channel_) delete channel_;
}

void LeaderElection_Stub::LeaderProposal(::google::protobuf::RpcController* controller,
                              const ::fraft::Notification* request,
                              ::fraft::Dummy* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fraft
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fraft::Dummy* Arena::CreateMaybeMessage< ::fraft::Dummy >(Arena* arena) {
  return Arena::CreateInternal< ::fraft::Dummy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fraft::Notification* Arena::CreateMaybeMessage< ::fraft::Notification >(Arena* arena) {
  return Arena::CreateInternal< ::fraft::Notification >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
