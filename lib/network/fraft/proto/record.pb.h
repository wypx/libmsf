// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_record_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_record_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_record_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_record_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_record_2eproto;
namespace fraft {
class ACL;
struct ACLDefaultTypeInternal;
extern ACLDefaultTypeInternal _ACL_default_instance_;
class Create;
struct CreateDefaultTypeInternal;
extern CreateDefaultTypeInternal _Create_default_instance_;
class Delete;
struct DeleteDefaultTypeInternal;
extern DeleteDefaultTypeInternal _Delete_default_instance_;
class Id;
struct IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class SetACL;
struct SetACLDefaultTypeInternal;
extern SetACLDefaultTypeInternal _SetACL_default_instance_;
class SetData;
struct SetDataDefaultTypeInternal;
extern SetDataDefaultTypeInternal _SetData_default_instance_;
}  // namespace fraft
PROTOBUF_NAMESPACE_OPEN
template<> ::fraft::ACL* Arena::CreateMaybeMessage<::fraft::ACL>(Arena*);
template<> ::fraft::Create* Arena::CreateMaybeMessage<::fraft::Create>(Arena*);
template<> ::fraft::Delete* Arena::CreateMaybeMessage<::fraft::Delete>(Arena*);
template<> ::fraft::Id* Arena::CreateMaybeMessage<::fraft::Id>(Arena*);
template<> ::fraft::SetACL* Arena::CreateMaybeMessage<::fraft::SetACL>(Arena*);
template<> ::fraft::SetData* Arena::CreateMaybeMessage<::fraft::SetData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fraft {

// ===================================================================

class Id final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.Id) */ {
 public:
  inline Id() : Id(nullptr) {}
  ~Id() override;
  explicit constexpr Id(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Id(const Id& from);
  Id(Id&& from) noexcept
    : Id() {
    *this = ::std::move(from);
  }

  inline Id& operator=(const Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline Id& operator=(Id&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Id& default_instance() {
    return *internal_default_instance();
  }
  static inline const Id* internal_default_instance() {
    return reinterpret_cast<const Id*>(
               &_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Id& a, Id& b) {
    a.Swap(&b);
  }
  inline void Swap(Id* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Id* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Id* New() const final {
    return new Id();
  }

  Id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Id>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Id& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Id& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Id* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.Id";
  }
  protected:
  explicit Id(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string scheme = 1;
  void clear_scheme();
  const std::string& scheme() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scheme(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scheme();
  PROTOBUF_MUST_USE_RESULT std::string* release_scheme();
  void set_allocated_scheme(std::string* scheme);
  private:
  const std::string& _internal_scheme() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scheme(const std::string& value);
  std::string* _internal_mutable_scheme();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:fraft.Id)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheme_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_2eproto;
};
// -------------------------------------------------------------------

class ACL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.ACL) */ {
 public:
  inline ACL() : ACL(nullptr) {}
  ~ACL() override;
  explicit constexpr ACL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ACL(const ACL& from);
  ACL(ACL&& from) noexcept
    : ACL() {
    *this = ::std::move(from);
  }

  inline ACL& operator=(const ACL& from) {
    CopyFrom(from);
    return *this;
  }
  inline ACL& operator=(ACL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ACL& default_instance() {
    return *internal_default_instance();
  }
  static inline const ACL* internal_default_instance() {
    return reinterpret_cast<const ACL*>(
               &_ACL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ACL& a, ACL& b) {
    a.Swap(&b);
  }
  inline void Swap(ACL* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ACL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ACL* New() const final {
    return new ACL();
  }

  ACL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ACL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ACL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ACL& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.ACL";
  }
  protected:
  explicit ACL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kPermissionFieldNumber = 1,
  };
  // .fraft.Id id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::fraft::Id& id() const;
  PROTOBUF_MUST_USE_RESULT ::fraft::Id* release_id();
  ::fraft::Id* mutable_id();
  void set_allocated_id(::fraft::Id* id);
  private:
  const ::fraft::Id& _internal_id() const;
  ::fraft::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::fraft::Id* id);
  ::fraft::Id* unsafe_arena_release_id();

  // uint32 permission = 1;
  void clear_permission();
  ::PROTOBUF_NAMESPACE_ID::uint32 permission() const;
  void set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission() const;
  void _internal_set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fraft.ACL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fraft::Id* id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_2eproto;
};
// -------------------------------------------------------------------

class Create final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.Create) */ {
 public:
  inline Create() : Create(nullptr) {}
  ~Create() override;
  explicit constexpr Create(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Create(const Create& from);
  Create(Create&& from) noexcept
    : Create() {
    *this = ::std::move(from);
  }

  inline Create& operator=(const Create& from) {
    CopyFrom(from);
    return *this;
  }
  inline Create& operator=(Create&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Create& default_instance() {
    return *internal_default_instance();
  }
  static inline const Create* internal_default_instance() {
    return reinterpret_cast<const Create*>(
               &_Create_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Create& a, Create& b) {
    a.Swap(&b);
  }
  inline void Swap(Create* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Create* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Create* New() const final {
    return new Create();
  }

  Create* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Create>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Create& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Create& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Create* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.Create";
  }
  protected:
  explicit Create(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAclListFieldNumber = 3,
    kPathFieldNumber = 1,
    kDataFieldNumber = 2,
    kEphemeralFieldNumber = 4,
  };
  // repeated .fraft.ACL acl_list = 3;
  int acl_list_size() const;
  private:
  int _internal_acl_list_size() const;
  public:
  void clear_acl_list();
  ::fraft::ACL* mutable_acl_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ACL >*
      mutable_acl_list();
  private:
  const ::fraft::ACL& _internal_acl_list(int index) const;
  ::fraft::ACL* _internal_add_acl_list();
  public:
  const ::fraft::ACL& acl_list(int index) const;
  ::fraft::ACL* add_acl_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ACL >&
      acl_list() const;

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool ephemeral = 4;
  void clear_ephemeral();
  bool ephemeral() const;
  void set_ephemeral(bool value);
  private:
  bool _internal_ephemeral() const;
  void _internal_set_ephemeral(bool value);
  public:

  // @@protoc_insertion_point(class_scope:fraft.Create)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ACL > acl_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool ephemeral_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_2eproto;
};
// -------------------------------------------------------------------

class Delete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.Delete) */ {
 public:
  inline Delete() : Delete(nullptr) {}
  ~Delete() override;
  explicit constexpr Delete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Delete(const Delete& from);
  Delete(Delete&& from) noexcept
    : Delete() {
    *this = ::std::move(from);
  }

  inline Delete& operator=(const Delete& from) {
    CopyFrom(from);
    return *this;
  }
  inline Delete& operator=(Delete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Delete& default_instance() {
    return *internal_default_instance();
  }
  static inline const Delete* internal_default_instance() {
    return reinterpret_cast<const Delete*>(
               &_Delete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Delete& a, Delete& b) {
    a.Swap(&b);
  }
  inline void Swap(Delete* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Delete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Delete* New() const final {
    return new Delete();
  }

  Delete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Delete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Delete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Delete& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Delete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.Delete";
  }
  protected:
  explicit Delete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:fraft.Delete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_2eproto;
};
// -------------------------------------------------------------------

class SetData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.SetData) */ {
 public:
  inline SetData() : SetData(nullptr) {}
  ~SetData() override;
  explicit constexpr SetData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetData(const SetData& from);
  SetData(SetData&& from) noexcept
    : SetData() {
    *this = ::std::move(from);
  }

  inline SetData& operator=(const SetData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetData& operator=(SetData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetData* internal_default_instance() {
    return reinterpret_cast<const SetData*>(
               &_SetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetData& a, SetData& b) {
    a.Swap(&b);
  }
  inline void Swap(SetData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetData* New() const final {
    return new SetData();
  }

  SetData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.SetData";
  }
  protected:
  explicit SetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kDataFieldNumber = 2,
    kVecsionFieldNumber = 3,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 vecsion = 3;
  void clear_vecsion();
  ::PROTOBUF_NAMESPACE_ID::uint32 vecsion() const;
  void set_vecsion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vecsion() const;
  void _internal_set_vecsion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fraft.SetData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vecsion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_2eproto;
};
// -------------------------------------------------------------------

class SetACL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.SetACL) */ {
 public:
  inline SetACL() : SetACL(nullptr) {}
  ~SetACL() override;
  explicit constexpr SetACL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetACL(const SetACL& from);
  SetACL(SetACL&& from) noexcept
    : SetACL() {
    *this = ::std::move(from);
  }

  inline SetACL& operator=(const SetACL& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetACL& operator=(SetACL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetACL& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetACL* internal_default_instance() {
    return reinterpret_cast<const SetACL*>(
               &_SetACL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetACL& a, SetACL& b) {
    a.Swap(&b);
  }
  inline void Swap(SetACL* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetACL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetACL* New() const final {
    return new SetACL();
  }

  SetACL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetACL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetACL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetACL& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetACL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.SetACL";
  }
  protected:
  explicit SetACL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAclListFieldNumber = 2,
    kPathFieldNumber = 1,
    kVecsionFieldNumber = 3,
  };
  // repeated .fraft.ACL acl_list = 2;
  int acl_list_size() const;
  private:
  int _internal_acl_list_size() const;
  public:
  void clear_acl_list();
  ::fraft::ACL* mutable_acl_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ACL >*
      mutable_acl_list();
  private:
  const ::fraft::ACL& _internal_acl_list(int index) const;
  ::fraft::ACL* _internal_add_acl_list();
  public:
  const ::fraft::ACL& acl_list(int index) const;
  ::fraft::ACL* add_acl_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ACL >&
      acl_list() const;

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // uint32 vecsion = 3;
  void clear_vecsion();
  ::PROTOBUF_NAMESPACE_ID::uint32 vecsion() const;
  void set_vecsion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vecsion() const;
  void _internal_set_vecsion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fraft.SetACL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ACL > acl_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vecsion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_record_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Id

// string scheme = 1;
inline void Id::clear_scheme() {
  scheme_.ClearToEmpty();
}
inline const std::string& Id::scheme() const {
  // @@protoc_insertion_point(field_get:fraft.Id.scheme)
  return _internal_scheme();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Id::set_scheme(ArgT0&& arg0, ArgT... args) {
 
 scheme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.Id.scheme)
}
inline std::string* Id::mutable_scheme() {
  std::string* _s = _internal_mutable_scheme();
  // @@protoc_insertion_point(field_mutable:fraft.Id.scheme)
  return _s;
}
inline const std::string& Id::_internal_scheme() const {
  return scheme_.Get();
}
inline void Id::_internal_set_scheme(const std::string& value) {
  
  scheme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Id::_internal_mutable_scheme() {
  
  return scheme_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Id::release_scheme() {
  // @@protoc_insertion_point(field_release:fraft.Id.scheme)
  return scheme_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Id::set_allocated_scheme(std::string* scheme) {
  if (scheme != nullptr) {
    
  } else {
    
  }
  scheme_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheme,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.Id.scheme)
}

// string id = 2;
inline void Id::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Id::id() const {
  // @@protoc_insertion_point(field_get:fraft.Id.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Id::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.Id.id)
}
inline std::string* Id::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:fraft.Id.id)
  return _s;
}
inline const std::string& Id::_internal_id() const {
  return id_.Get();
}
inline void Id::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Id::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Id::release_id() {
  // @@protoc_insertion_point(field_release:fraft.Id.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Id::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.Id.id)
}

// -------------------------------------------------------------------

// ACL

// uint32 permission = 1;
inline void ACL::clear_permission() {
  permission_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ACL::_internal_permission() const {
  return permission_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ACL::permission() const {
  // @@protoc_insertion_point(field_get:fraft.ACL.permission)
  return _internal_permission();
}
inline void ACL::_internal_set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  permission_ = value;
}
inline void ACL::set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:fraft.ACL.permission)
}

// .fraft.Id id = 2;
inline bool ACL::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ACL::has_id() const {
  return _internal_has_id();
}
inline void ACL::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::fraft::Id& ACL::_internal_id() const {
  const ::fraft::Id* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::fraft::Id&>(
      ::fraft::_Id_default_instance_);
}
inline const ::fraft::Id& ACL::id() const {
  // @@protoc_insertion_point(field_get:fraft.ACL.id)
  return _internal_id();
}
inline void ACL::unsafe_arena_set_allocated_id(
    ::fraft::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fraft.ACL.id)
}
inline ::fraft::Id* ACL::release_id() {
  
  ::fraft::Id* temp = id_;
  id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::fraft::Id* ACL::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:fraft.ACL.id)
  
  ::fraft::Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::fraft::Id* ACL::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::fraft::Id>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::fraft::Id* ACL::mutable_id() {
  ::fraft::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:fraft.ACL.id)
  return _msg;
}
inline void ACL::set_allocated_id(::fraft::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fraft::Id>::GetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:fraft.ACL.id)
}

// -------------------------------------------------------------------

// Create

// string path = 1;
inline void Create::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& Create::path() const {
  // @@protoc_insertion_point(field_get:fraft.Create.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Create::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.Create.path)
}
inline std::string* Create::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:fraft.Create.path)
  return _s;
}
inline const std::string& Create::_internal_path() const {
  return path_.Get();
}
inline void Create::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Create::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Create::release_path() {
  // @@protoc_insertion_point(field_release:fraft.Create.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Create::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.Create.path)
}

// bytes data = 2;
inline void Create::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& Create::data() const {
  // @@protoc_insertion_point(field_get:fraft.Create.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Create::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.Create.data)
}
inline std::string* Create::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:fraft.Create.data)
  return _s;
}
inline const std::string& Create::_internal_data() const {
  return data_.Get();
}
inline void Create::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Create::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Create::release_data() {
  // @@protoc_insertion_point(field_release:fraft.Create.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Create::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.Create.data)
}

// repeated .fraft.ACL acl_list = 3;
inline int Create::_internal_acl_list_size() const {
  return acl_list_.size();
}
inline int Create::acl_list_size() const {
  return _internal_acl_list_size();
}
inline void Create::clear_acl_list() {
  acl_list_.Clear();
}
inline ::fraft::ACL* Create::mutable_acl_list(int index) {
  // @@protoc_insertion_point(field_mutable:fraft.Create.acl_list)
  return acl_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ACL >*
Create::mutable_acl_list() {
  // @@protoc_insertion_point(field_mutable_list:fraft.Create.acl_list)
  return &acl_list_;
}
inline const ::fraft::ACL& Create::_internal_acl_list(int index) const {
  return acl_list_.Get(index);
}
inline const ::fraft::ACL& Create::acl_list(int index) const {
  // @@protoc_insertion_point(field_get:fraft.Create.acl_list)
  return _internal_acl_list(index);
}
inline ::fraft::ACL* Create::_internal_add_acl_list() {
  return acl_list_.Add();
}
inline ::fraft::ACL* Create::add_acl_list() {
  ::fraft::ACL* _add = _internal_add_acl_list();
  // @@protoc_insertion_point(field_add:fraft.Create.acl_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ACL >&
Create::acl_list() const {
  // @@protoc_insertion_point(field_list:fraft.Create.acl_list)
  return acl_list_;
}

// bool ephemeral = 4;
inline void Create::clear_ephemeral() {
  ephemeral_ = false;
}
inline bool Create::_internal_ephemeral() const {
  return ephemeral_;
}
inline bool Create::ephemeral() const {
  // @@protoc_insertion_point(field_get:fraft.Create.ephemeral)
  return _internal_ephemeral();
}
inline void Create::_internal_set_ephemeral(bool value) {
  
  ephemeral_ = value;
}
inline void Create::set_ephemeral(bool value) {
  _internal_set_ephemeral(value);
  // @@protoc_insertion_point(field_set:fraft.Create.ephemeral)
}

// -------------------------------------------------------------------

// Delete

// string path = 1;
inline void Delete::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& Delete::path() const {
  // @@protoc_insertion_point(field_get:fraft.Delete.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Delete::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.Delete.path)
}
inline std::string* Delete::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:fraft.Delete.path)
  return _s;
}
inline const std::string& Delete::_internal_path() const {
  return path_.Get();
}
inline void Delete::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Delete::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Delete::release_path() {
  // @@protoc_insertion_point(field_release:fraft.Delete.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Delete::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.Delete.path)
}

// -------------------------------------------------------------------

// SetData

// string path = 1;
inline void SetData::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& SetData::path() const {
  // @@protoc_insertion_point(field_get:fraft.SetData.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetData::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.SetData.path)
}
inline std::string* SetData::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:fraft.SetData.path)
  return _s;
}
inline const std::string& SetData::_internal_path() const {
  return path_.Get();
}
inline void SetData::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetData::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetData::release_path() {
  // @@protoc_insertion_point(field_release:fraft.SetData.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetData::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.SetData.path)
}

// bytes data = 2;
inline void SetData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SetData::data() const {
  // @@protoc_insertion_point(field_get:fraft.SetData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.SetData.data)
}
inline std::string* SetData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:fraft.SetData.data)
  return _s;
}
inline const std::string& SetData::_internal_data() const {
  return data_.Get();
}
inline void SetData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetData::release_data() {
  // @@protoc_insertion_point(field_release:fraft.SetData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.SetData.data)
}

// uint32 vecsion = 3;
inline void SetData::clear_vecsion() {
  vecsion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetData::_internal_vecsion() const {
  return vecsion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetData::vecsion() const {
  // @@protoc_insertion_point(field_get:fraft.SetData.vecsion)
  return _internal_vecsion();
}
inline void SetData::_internal_set_vecsion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vecsion_ = value;
}
inline void SetData::set_vecsion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vecsion(value);
  // @@protoc_insertion_point(field_set:fraft.SetData.vecsion)
}

// -------------------------------------------------------------------

// SetACL

// string path = 1;
inline void SetACL::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& SetACL::path() const {
  // @@protoc_insertion_point(field_get:fraft.SetACL.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetACL::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.SetACL.path)
}
inline std::string* SetACL::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:fraft.SetACL.path)
  return _s;
}
inline const std::string& SetACL::_internal_path() const {
  return path_.Get();
}
inline void SetACL::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetACL::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetACL::release_path() {
  // @@protoc_insertion_point(field_release:fraft.SetACL.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetACL::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.SetACL.path)
}

// repeated .fraft.ACL acl_list = 2;
inline int SetACL::_internal_acl_list_size() const {
  return acl_list_.size();
}
inline int SetACL::acl_list_size() const {
  return _internal_acl_list_size();
}
inline void SetACL::clear_acl_list() {
  acl_list_.Clear();
}
inline ::fraft::ACL* SetACL::mutable_acl_list(int index) {
  // @@protoc_insertion_point(field_mutable:fraft.SetACL.acl_list)
  return acl_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ACL >*
SetACL::mutable_acl_list() {
  // @@protoc_insertion_point(field_mutable_list:fraft.SetACL.acl_list)
  return &acl_list_;
}
inline const ::fraft::ACL& SetACL::_internal_acl_list(int index) const {
  return acl_list_.Get(index);
}
inline const ::fraft::ACL& SetACL::acl_list(int index) const {
  // @@protoc_insertion_point(field_get:fraft.SetACL.acl_list)
  return _internal_acl_list(index);
}
inline ::fraft::ACL* SetACL::_internal_add_acl_list() {
  return acl_list_.Add();
}
inline ::fraft::ACL* SetACL::add_acl_list() {
  ::fraft::ACL* _add = _internal_add_acl_list();
  // @@protoc_insertion_point(field_add:fraft.SetACL.acl_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ACL >&
SetACL::acl_list() const {
  // @@protoc_insertion_point(field_list:fraft.SetACL.acl_list)
  return acl_list_;
}

// uint32 vecsion = 3;
inline void SetACL::clear_vecsion() {
  vecsion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetACL::_internal_vecsion() const {
  return vecsion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetACL::vecsion() const {
  // @@protoc_insertion_point(field_get:fraft.SetACL.vecsion)
  return _internal_vecsion();
}
inline void SetACL::_internal_set_vecsion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vecsion_ = value;
}
inline void SetACL::set_vecsion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vecsion(value);
  // @@protoc_insertion_point(field_set:fraft.SetACL.vecsion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fraft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_record_2eproto
