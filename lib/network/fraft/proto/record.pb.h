// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef PROTOBUF_INCLUDED_record_2eproto
#define PROTOBUF_INCLUDED_record_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_record_2eproto 

namespace protobuf_record_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_record_2eproto
namespace fraft {
class ACL;
class ACLDefaultTypeInternal;
extern ACLDefaultTypeInternal _ACL_default_instance_;
class Create;
class CreateDefaultTypeInternal;
extern CreateDefaultTypeInternal _Create_default_instance_;
class Delete;
class DeleteDefaultTypeInternal;
extern DeleteDefaultTypeInternal _Delete_default_instance_;
class Id;
class IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class SetACL;
class SetACLDefaultTypeInternal;
extern SetACLDefaultTypeInternal _SetACL_default_instance_;
class SetData;
class SetDataDefaultTypeInternal;
extern SetDataDefaultTypeInternal _SetData_default_instance_;
}  // namespace fraft
namespace google {
namespace protobuf {
template<> ::fraft::ACL* Arena::CreateMaybeMessage<::fraft::ACL>(Arena*);
template<> ::fraft::Create* Arena::CreateMaybeMessage<::fraft::Create>(Arena*);
template<> ::fraft::Delete* Arena::CreateMaybeMessage<::fraft::Delete>(Arena*);
template<> ::fraft::Id* Arena::CreateMaybeMessage<::fraft::Id>(Arena*);
template<> ::fraft::SetACL* Arena::CreateMaybeMessage<::fraft::SetACL>(Arena*);
template<> ::fraft::SetData* Arena::CreateMaybeMessage<::fraft::SetData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fraft {

// ===================================================================

class Id : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.Id) */ {
 public:
  Id();
  virtual ~Id();

  Id(const Id& from);

  inline Id& operator=(const Id& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Id(Id&& from) noexcept
    : Id() {
    *this = ::std::move(from);
  }

  inline Id& operator=(Id&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Id* internal_default_instance() {
    return reinterpret_cast<const Id*>(
               &_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Id* other);
  friend void swap(Id& a, Id& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Id* New() const final {
    return CreateMaybeMessage<Id>(NULL);
  }

  Id* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Id>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Id& from);
  void MergeFrom(const Id& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Id* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string scheme = 1;
  void clear_scheme();
  static const int kSchemeFieldNumber = 1;
  const ::std::string& scheme() const;
  void set_scheme(const ::std::string& value);
  #if LANG_CXX11
  void set_scheme(::std::string&& value);
  #endif
  void set_scheme(const char* value);
  void set_scheme(const char* value, size_t size);
  ::std::string* mutable_scheme();
  ::std::string* release_scheme();
  void set_allocated_scheme(::std::string* scheme);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:fraft.Id)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr scheme_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ACL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.ACL) */ {
 public:
  ACL();
  virtual ~ACL();

  ACL(const ACL& from);

  inline ACL& operator=(const ACL& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ACL(ACL&& from) noexcept
    : ACL() {
    *this = ::std::move(from);
  }

  inline ACL& operator=(ACL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ACL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ACL* internal_default_instance() {
    return reinterpret_cast<const ACL*>(
               &_ACL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ACL* other);
  friend void swap(ACL& a, ACL& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ACL* New() const final {
    return CreateMaybeMessage<ACL>(NULL);
  }

  ACL* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ACL>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ACL& from);
  void MergeFrom(const ACL& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .fraft.Id id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::fraft::Id& _internal_id() const;
  public:
  const ::fraft::Id& id() const;
  ::fraft::Id* release_id();
  ::fraft::Id* mutable_id();
  void set_allocated_id(::fraft::Id* id);

  // uint32 permission = 1;
  void clear_permission();
  static const int kPermissionFieldNumber = 1;
  ::google::protobuf::uint32 permission() const;
  void set_permission(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fraft.ACL)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::fraft::Id* id_;
  ::google::protobuf::uint32 permission_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Create : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.Create) */ {
 public:
  Create();
  virtual ~Create();

  Create(const Create& from);

  inline Create& operator=(const Create& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Create(Create&& from) noexcept
    : Create() {
    *this = ::std::move(from);
  }

  inline Create& operator=(Create&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Create& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Create* internal_default_instance() {
    return reinterpret_cast<const Create*>(
               &_Create_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Create* other);
  friend void swap(Create& a, Create& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Create* New() const final {
    return CreateMaybeMessage<Create>(NULL);
  }

  Create* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Create>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Create& from);
  void MergeFrom(const Create& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Create* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fraft.ACL acl_list = 3;
  int acl_list_size() const;
  void clear_acl_list();
  static const int kAclListFieldNumber = 3;
  ::fraft::ACL* mutable_acl_list(int index);
  ::google::protobuf::RepeatedPtrField< ::fraft::ACL >*
      mutable_acl_list();
  const ::fraft::ACL& acl_list(int index) const;
  ::fraft::ACL* add_acl_list();
  const ::google::protobuf::RepeatedPtrField< ::fraft::ACL >&
      acl_list() const;

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // bool ephemeral = 4;
  void clear_ephemeral();
  static const int kEphemeralFieldNumber = 4;
  bool ephemeral() const;
  void set_ephemeral(bool value);

  // @@protoc_insertion_point(class_scope:fraft.Create)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fraft::ACL > acl_list_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  bool ephemeral_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Delete : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.Delete) */ {
 public:
  Delete();
  virtual ~Delete();

  Delete(const Delete& from);

  inline Delete& operator=(const Delete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Delete(Delete&& from) noexcept
    : Delete() {
    *this = ::std::move(from);
  }

  inline Delete& operator=(Delete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Delete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Delete* internal_default_instance() {
    return reinterpret_cast<const Delete*>(
               &_Delete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Delete* other);
  friend void swap(Delete& a, Delete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Delete* New() const final {
    return CreateMaybeMessage<Delete>(NULL);
  }

  Delete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Delete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Delete& from);
  void MergeFrom(const Delete& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Delete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:fraft.Delete)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.SetData) */ {
 public:
  SetData();
  virtual ~SetData();

  SetData(const SetData& from);

  inline SetData& operator=(const SetData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetData(SetData&& from) noexcept
    : SetData() {
    *this = ::std::move(from);
  }

  inline SetData& operator=(SetData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetData* internal_default_instance() {
    return reinterpret_cast<const SetData*>(
               &_SetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SetData* other);
  friend void swap(SetData& a, SetData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetData* New() const final {
    return CreateMaybeMessage<SetData>(NULL);
  }

  SetData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetData& from);
  void MergeFrom(const SetData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 vecsion = 3;
  void clear_vecsion();
  static const int kVecsionFieldNumber = 3;
  ::google::protobuf::uint32 vecsion() const;
  void set_vecsion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fraft.SetData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 vecsion_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetACL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.SetACL) */ {
 public:
  SetACL();
  virtual ~SetACL();

  SetACL(const SetACL& from);

  inline SetACL& operator=(const SetACL& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetACL(SetACL&& from) noexcept
    : SetACL() {
    *this = ::std::move(from);
  }

  inline SetACL& operator=(SetACL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetACL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetACL* internal_default_instance() {
    return reinterpret_cast<const SetACL*>(
               &_SetACL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SetACL* other);
  friend void swap(SetACL& a, SetACL& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetACL* New() const final {
    return CreateMaybeMessage<SetACL>(NULL);
  }

  SetACL* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetACL>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetACL& from);
  void MergeFrom(const SetACL& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetACL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fraft.ACL acl_list = 2;
  int acl_list_size() const;
  void clear_acl_list();
  static const int kAclListFieldNumber = 2;
  ::fraft::ACL* mutable_acl_list(int index);
  ::google::protobuf::RepeatedPtrField< ::fraft::ACL >*
      mutable_acl_list();
  const ::fraft::ACL& acl_list(int index) const;
  ::fraft::ACL* add_acl_list();
  const ::google::protobuf::RepeatedPtrField< ::fraft::ACL >&
      acl_list() const;

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // uint32 vecsion = 3;
  void clear_vecsion();
  static const int kVecsionFieldNumber = 3;
  ::google::protobuf::uint32 vecsion() const;
  void set_vecsion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fraft.SetACL)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fraft::ACL > acl_list_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::uint32 vecsion_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_record_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Id

// string scheme = 1;
inline void Id::clear_scheme() {
  scheme_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Id::scheme() const {
  // @@protoc_insertion_point(field_get:fraft.Id.scheme)
  return scheme_.GetNoArena();
}
inline void Id::set_scheme(const ::std::string& value) {
  
  scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.Id.scheme)
}
#if LANG_CXX11
inline void Id::set_scheme(::std::string&& value) {
  
  scheme_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.Id.scheme)
}
#endif
inline void Id::set_scheme(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.Id.scheme)
}
inline void Id::set_scheme(const char* value, size_t size) {
  
  scheme_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.Id.scheme)
}
inline ::std::string* Id::mutable_scheme() {
  
  // @@protoc_insertion_point(field_mutable:fraft.Id.scheme)
  return scheme_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Id::release_scheme() {
  // @@protoc_insertion_point(field_release:fraft.Id.scheme)
  
  return scheme_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Id::set_allocated_scheme(::std::string* scheme) {
  if (scheme != NULL) {
    
  } else {
    
  }
  scheme_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scheme);
  // @@protoc_insertion_point(field_set_allocated:fraft.Id.scheme)
}

// string id = 2;
inline void Id::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Id::id() const {
  // @@protoc_insertion_point(field_get:fraft.Id.id)
  return id_.GetNoArena();
}
inline void Id::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.Id.id)
}
#if LANG_CXX11
inline void Id::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.Id.id)
}
#endif
inline void Id::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.Id.id)
}
inline void Id::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.Id.id)
}
inline ::std::string* Id::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:fraft.Id.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Id::release_id() {
  // @@protoc_insertion_point(field_release:fraft.Id.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Id::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fraft.Id.id)
}

// -------------------------------------------------------------------

// ACL

// uint32 permission = 1;
inline void ACL::clear_permission() {
  permission_ = 0u;
}
inline ::google::protobuf::uint32 ACL::permission() const {
  // @@protoc_insertion_point(field_get:fraft.ACL.permission)
  return permission_;
}
inline void ACL::set_permission(::google::protobuf::uint32 value) {
  
  permission_ = value;
  // @@protoc_insertion_point(field_set:fraft.ACL.permission)
}

// .fraft.Id id = 2;
inline bool ACL::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void ACL::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::fraft::Id& ACL::_internal_id() const {
  return *id_;
}
inline const ::fraft::Id& ACL::id() const {
  const ::fraft::Id* p = id_;
  // @@protoc_insertion_point(field_get:fraft.ACL.id)
  return p != NULL ? *p : *reinterpret_cast<const ::fraft::Id*>(
      &::fraft::_Id_default_instance_);
}
inline ::fraft::Id* ACL::release_id() {
  // @@protoc_insertion_point(field_release:fraft.ACL.id)
  
  ::fraft::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::fraft::Id* ACL::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::fraft::Id>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fraft.ACL.id)
  return id_;
}
inline void ACL::set_allocated_id(::fraft::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:fraft.ACL.id)
}

// -------------------------------------------------------------------

// Create

// string path = 1;
inline void Create::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Create::path() const {
  // @@protoc_insertion_point(field_get:fraft.Create.path)
  return path_.GetNoArena();
}
inline void Create::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.Create.path)
}
#if LANG_CXX11
inline void Create::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.Create.path)
}
#endif
inline void Create::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.Create.path)
}
inline void Create::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.Create.path)
}
inline ::std::string* Create::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:fraft.Create.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Create::release_path() {
  // @@protoc_insertion_point(field_release:fraft.Create.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Create::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:fraft.Create.path)
}

// bytes data = 2;
inline void Create::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Create::data() const {
  // @@protoc_insertion_point(field_get:fraft.Create.data)
  return data_.GetNoArena();
}
inline void Create::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.Create.data)
}
#if LANG_CXX11
inline void Create::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.Create.data)
}
#endif
inline void Create::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.Create.data)
}
inline void Create::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.Create.data)
}
inline ::std::string* Create::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:fraft.Create.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Create::release_data() {
  // @@protoc_insertion_point(field_release:fraft.Create.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Create::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fraft.Create.data)
}

// repeated .fraft.ACL acl_list = 3;
inline int Create::acl_list_size() const {
  return acl_list_.size();
}
inline void Create::clear_acl_list() {
  acl_list_.Clear();
}
inline ::fraft::ACL* Create::mutable_acl_list(int index) {
  // @@protoc_insertion_point(field_mutable:fraft.Create.acl_list)
  return acl_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fraft::ACL >*
Create::mutable_acl_list() {
  // @@protoc_insertion_point(field_mutable_list:fraft.Create.acl_list)
  return &acl_list_;
}
inline const ::fraft::ACL& Create::acl_list(int index) const {
  // @@protoc_insertion_point(field_get:fraft.Create.acl_list)
  return acl_list_.Get(index);
}
inline ::fraft::ACL* Create::add_acl_list() {
  // @@protoc_insertion_point(field_add:fraft.Create.acl_list)
  return acl_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fraft::ACL >&
Create::acl_list() const {
  // @@protoc_insertion_point(field_list:fraft.Create.acl_list)
  return acl_list_;
}

// bool ephemeral = 4;
inline void Create::clear_ephemeral() {
  ephemeral_ = false;
}
inline bool Create::ephemeral() const {
  // @@protoc_insertion_point(field_get:fraft.Create.ephemeral)
  return ephemeral_;
}
inline void Create::set_ephemeral(bool value) {
  
  ephemeral_ = value;
  // @@protoc_insertion_point(field_set:fraft.Create.ephemeral)
}

// -------------------------------------------------------------------

// Delete

// string path = 1;
inline void Delete::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Delete::path() const {
  // @@protoc_insertion_point(field_get:fraft.Delete.path)
  return path_.GetNoArena();
}
inline void Delete::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.Delete.path)
}
#if LANG_CXX11
inline void Delete::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.Delete.path)
}
#endif
inline void Delete::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.Delete.path)
}
inline void Delete::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.Delete.path)
}
inline ::std::string* Delete::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:fraft.Delete.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Delete::release_path() {
  // @@protoc_insertion_point(field_release:fraft.Delete.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Delete::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:fraft.Delete.path)
}

// -------------------------------------------------------------------

// SetData

// string path = 1;
inline void SetData::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetData::path() const {
  // @@protoc_insertion_point(field_get:fraft.SetData.path)
  return path_.GetNoArena();
}
inline void SetData::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.SetData.path)
}
#if LANG_CXX11
inline void SetData::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.SetData.path)
}
#endif
inline void SetData::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.SetData.path)
}
inline void SetData::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.SetData.path)
}
inline ::std::string* SetData::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:fraft.SetData.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetData::release_path() {
  // @@protoc_insertion_point(field_release:fraft.SetData.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetData::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:fraft.SetData.path)
}

// bytes data = 2;
inline void SetData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetData::data() const {
  // @@protoc_insertion_point(field_get:fraft.SetData.data)
  return data_.GetNoArena();
}
inline void SetData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.SetData.data)
}
#if LANG_CXX11
inline void SetData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.SetData.data)
}
#endif
inline void SetData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.SetData.data)
}
inline void SetData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.SetData.data)
}
inline ::std::string* SetData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:fraft.SetData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetData::release_data() {
  // @@protoc_insertion_point(field_release:fraft.SetData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fraft.SetData.data)
}

// uint32 vecsion = 3;
inline void SetData::clear_vecsion() {
  vecsion_ = 0u;
}
inline ::google::protobuf::uint32 SetData::vecsion() const {
  // @@protoc_insertion_point(field_get:fraft.SetData.vecsion)
  return vecsion_;
}
inline void SetData::set_vecsion(::google::protobuf::uint32 value) {
  
  vecsion_ = value;
  // @@protoc_insertion_point(field_set:fraft.SetData.vecsion)
}

// -------------------------------------------------------------------

// SetACL

// string path = 1;
inline void SetACL::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetACL::path() const {
  // @@protoc_insertion_point(field_get:fraft.SetACL.path)
  return path_.GetNoArena();
}
inline void SetACL::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.SetACL.path)
}
#if LANG_CXX11
inline void SetACL::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.SetACL.path)
}
#endif
inline void SetACL::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.SetACL.path)
}
inline void SetACL::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.SetACL.path)
}
inline ::std::string* SetACL::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:fraft.SetACL.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetACL::release_path() {
  // @@protoc_insertion_point(field_release:fraft.SetACL.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetACL::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:fraft.SetACL.path)
}

// repeated .fraft.ACL acl_list = 2;
inline int SetACL::acl_list_size() const {
  return acl_list_.size();
}
inline void SetACL::clear_acl_list() {
  acl_list_.Clear();
}
inline ::fraft::ACL* SetACL::mutable_acl_list(int index) {
  // @@protoc_insertion_point(field_mutable:fraft.SetACL.acl_list)
  return acl_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fraft::ACL >*
SetACL::mutable_acl_list() {
  // @@protoc_insertion_point(field_mutable_list:fraft.SetACL.acl_list)
  return &acl_list_;
}
inline const ::fraft::ACL& SetACL::acl_list(int index) const {
  // @@protoc_insertion_point(field_get:fraft.SetACL.acl_list)
  return acl_list_.Get(index);
}
inline ::fraft::ACL* SetACL::add_acl_list() {
  // @@protoc_insertion_point(field_add:fraft.SetACL.acl_list)
  return acl_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fraft::ACL >&
SetACL::acl_list() const {
  // @@protoc_insertion_point(field_list:fraft.SetACL.acl_list)
  return acl_list_;
}

// uint32 vecsion = 3;
inline void SetACL::clear_vecsion() {
  vecsion_ = 0u;
}
inline ::google::protobuf::uint32 SetACL::vecsion() const {
  // @@protoc_insertion_point(field_get:fraft.SetACL.vecsion)
  return vecsion_;
}
inline void SetACL::set_vecsion(::google::protobuf::uint32 value) {
  
  vecsion_ = value;
  // @@protoc_insertion_point(field_set:fraft.SetACL.vecsion)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fraft

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_record_2eproto
