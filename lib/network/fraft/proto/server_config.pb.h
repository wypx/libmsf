// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_config.proto

#ifndef PROTOBUF_INCLUDED_server_5fconfig_2eproto
#define PROTOBUF_INCLUDED_server_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_server_5fconfig_2eproto 

namespace protobuf_server_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_server_5fconfig_2eproto
namespace fraft {
class ServerConfig;
class ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
class ServerInfo;
class ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
}  // namespace fraft
namespace google {
namespace protobuf {
template<> ::fraft::ServerConfig* Arena::CreateMaybeMessage<::fraft::ServerConfig>(Arena*);
template<> ::fraft::ServerInfo* Arena::CreateMaybeMessage<::fraft::ServerInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fraft {

// ===================================================================

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerInfo* other);
  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return CreateMaybeMessage<ServerInfo>(NULL);
  }

  ServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_host = 1;
  void clear_server_host();
  static const int kServerHostFieldNumber = 1;
  const ::std::string& server_host() const;
  void set_server_host(const ::std::string& value);
  #if LANG_CXX11
  void set_server_host(::std::string&& value);
  #endif
  void set_server_host(const char* value);
  void set_server_host(const char* value, size_t size);
  ::std::string* mutable_server_host();
  ::std::string* release_server_host();
  void set_allocated_server_host(::std::string* server_host);

  // uint32 leader_port = 2;
  void clear_leader_port();
  static const int kLeaderPortFieldNumber = 2;
  ::google::protobuf::uint32 leader_port() const;
  void set_leader_port(::google::protobuf::uint32 value);

  // uint32 election_port = 3;
  void clear_election_port();
  static const int kElectionPortFieldNumber = 3;
  ::google::protobuf::uint32 election_port() const;
  void set_election_port(::google::protobuf::uint32 value);

  // uint64 server_id = 4;
  void clear_server_id();
  static const int kServerIdFieldNumber = 4;
  ::google::protobuf::uint64 server_id() const;
  void set_server_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fraft.ServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_host_;
  ::google::protobuf::uint32 leader_port_;
  ::google::protobuf::uint32 election_port_;
  ::google::protobuf::uint64 server_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerConfig* other);
  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const final {
    return CreateMaybeMessage<ServerConfig>(NULL);
  }

  ServerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fraft.ServerInfo server_info = 2;
  int server_info_size() const;
  void clear_server_info();
  static const int kServerInfoFieldNumber = 2;
  ::fraft::ServerInfo* mutable_server_info(int index);
  ::google::protobuf::RepeatedPtrField< ::fraft::ServerInfo >*
      mutable_server_info();
  const ::fraft::ServerInfo& server_info(int index) const;
  ::fraft::ServerInfo* add_server_info();
  const ::google::protobuf::RepeatedPtrField< ::fraft::ServerInfo >&
      server_info() const;

  // uint64 my_server_id = 1;
  void clear_my_server_id();
  static const int kMyServerIdFieldNumber = 1;
  ::google::protobuf::uint64 my_server_id() const;
  void set_my_server_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fraft.ServerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fraft::ServerInfo > server_info_;
  ::google::protobuf::uint64 my_server_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfo

// string server_host = 1;
inline void ServerInfo::clear_server_host() {
  server_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfo::server_host() const {
  // @@protoc_insertion_point(field_get:fraft.ServerInfo.server_host)
  return server_host_.GetNoArena();
}
inline void ServerInfo::set_server_host(const ::std::string& value) {
  
  server_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.ServerInfo.server_host)
}
#if LANG_CXX11
inline void ServerInfo::set_server_host(::std::string&& value) {
  
  server_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.ServerInfo.server_host)
}
#endif
inline void ServerInfo::set_server_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.ServerInfo.server_host)
}
inline void ServerInfo::set_server_host(const char* value, size_t size) {
  
  server_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.ServerInfo.server_host)
}
inline ::std::string* ServerInfo::mutable_server_host() {
  
  // @@protoc_insertion_point(field_mutable:fraft.ServerInfo.server_host)
  return server_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_server_host() {
  // @@protoc_insertion_point(field_release:fraft.ServerInfo.server_host)
  
  return server_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_server_host(::std::string* server_host) {
  if (server_host != NULL) {
    
  } else {
    
  }
  server_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_host);
  // @@protoc_insertion_point(field_set_allocated:fraft.ServerInfo.server_host)
}

// uint32 leader_port = 2;
inline void ServerInfo::clear_leader_port() {
  leader_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::leader_port() const {
  // @@protoc_insertion_point(field_get:fraft.ServerInfo.leader_port)
  return leader_port_;
}
inline void ServerInfo::set_leader_port(::google::protobuf::uint32 value) {
  
  leader_port_ = value;
  // @@protoc_insertion_point(field_set:fraft.ServerInfo.leader_port)
}

// uint32 election_port = 3;
inline void ServerInfo::clear_election_port() {
  election_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfo::election_port() const {
  // @@protoc_insertion_point(field_get:fraft.ServerInfo.election_port)
  return election_port_;
}
inline void ServerInfo::set_election_port(::google::protobuf::uint32 value) {
  
  election_port_ = value;
  // @@protoc_insertion_point(field_set:fraft.ServerInfo.election_port)
}

// uint64 server_id = 4;
inline void ServerInfo::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:fraft.ServerInfo.server_id)
  return server_id_;
}
inline void ServerInfo::set_server_id(::google::protobuf::uint64 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:fraft.ServerInfo.server_id)
}

// -------------------------------------------------------------------

// ServerConfig

// uint64 my_server_id = 1;
inline void ServerConfig::clear_my_server_id() {
  my_server_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerConfig::my_server_id() const {
  // @@protoc_insertion_point(field_get:fraft.ServerConfig.my_server_id)
  return my_server_id_;
}
inline void ServerConfig::set_my_server_id(::google::protobuf::uint64 value) {
  
  my_server_id_ = value;
  // @@protoc_insertion_point(field_set:fraft.ServerConfig.my_server_id)
}

// repeated .fraft.ServerInfo server_info = 2;
inline int ServerConfig::server_info_size() const {
  return server_info_.size();
}
inline void ServerConfig::clear_server_info() {
  server_info_.Clear();
}
inline ::fraft::ServerInfo* ServerConfig::mutable_server_info(int index) {
  // @@protoc_insertion_point(field_mutable:fraft.ServerConfig.server_info)
  return server_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fraft::ServerInfo >*
ServerConfig::mutable_server_info() {
  // @@protoc_insertion_point(field_mutable_list:fraft.ServerConfig.server_info)
  return &server_info_;
}
inline const ::fraft::ServerInfo& ServerConfig::server_info(int index) const {
  // @@protoc_insertion_point(field_get:fraft.ServerConfig.server_info)
  return server_info_.Get(index);
}
inline ::fraft::ServerInfo* ServerConfig::add_server_info() {
  // @@protoc_insertion_point(field_add:fraft.ServerConfig.server_info)
  return server_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fraft::ServerInfo >&
ServerConfig::server_info() const {
  // @@protoc_insertion_point(field_list:fraft.ServerConfig.server_info)
  return server_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fraft

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_server_5fconfig_2eproto
