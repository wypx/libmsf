// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fconfig_2eproto;
namespace fraft {
class ServerConfig;
struct ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
}  // namespace fraft
PROTOBUF_NAMESPACE_OPEN
template<> ::fraft::ServerConfig* Arena::CreateMaybeMessage<::fraft::ServerConfig>(Arena*);
template<> ::fraft::ServerInfo* Arena::CreateMaybeMessage<::fraft::ServerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fraft {

// ===================================================================

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit constexpr ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return new ServerInfo();
  }

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerHostFieldNumber = 1,
    kLeaderPortFieldNumber = 2,
    kElectionPortFieldNumber = 3,
    kServerIdFieldNumber = 4,
  };
  // string server_host = 1;
  void clear_server_host();
  const std::string& server_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_host();
  PROTOBUF_MUST_USE_RESULT std::string* release_server_host();
  void set_allocated_server_host(std::string* server_host);
  private:
  const std::string& _internal_server_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_host(const std::string& value);
  std::string* _internal_mutable_server_host();
  public:

  // uint32 leader_port = 2;
  void clear_leader_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_port() const;
  void set_leader_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leader_port() const;
  void _internal_set_leader_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 election_port = 3;
  void clear_election_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 election_port() const;
  void set_election_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_election_port() const;
  void _internal_set_election_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 server_id = 4;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fraft.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_host_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 election_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ServerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.ServerConfig) */ {
 public:
  inline ServerConfig() : ServerConfig(nullptr) {}
  ~ServerConfig() override;
  explicit constexpr ServerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerConfig(const ServerConfig& from);
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const final {
    return new ServerConfig();
  }

  ServerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.ServerConfig";
  }
  protected:
  explicit ServerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerInfoFieldNumber = 2,
    kMyServerIdFieldNumber = 1,
  };
  // repeated .fraft.ServerInfo server_info = 2;
  int server_info_size() const;
  private:
  int _internal_server_info_size() const;
  public:
  void clear_server_info();
  ::fraft::ServerInfo* mutable_server_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ServerInfo >*
      mutable_server_info();
  private:
  const ::fraft::ServerInfo& _internal_server_info(int index) const;
  ::fraft::ServerInfo* _internal_add_server_info();
  public:
  const ::fraft::ServerInfo& server_info(int index) const;
  ::fraft::ServerInfo* add_server_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ServerInfo >&
      server_info() const;

  // uint64 my_server_id = 1;
  void clear_my_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 my_server_id() const;
  void set_my_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_my_server_id() const;
  void _internal_set_my_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fraft.ServerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ServerInfo > server_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 my_server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfo

// string server_host = 1;
inline void ServerInfo::clear_server_host() {
  server_host_.ClearToEmpty();
}
inline const std::string& ServerInfo::server_host() const {
  // @@protoc_insertion_point(field_get:fraft.ServerInfo.server_host)
  return _internal_server_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_server_host(ArgT0&& arg0, ArgT... args) {
 
 server_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.ServerInfo.server_host)
}
inline std::string* ServerInfo::mutable_server_host() {
  std::string* _s = _internal_mutable_server_host();
  // @@protoc_insertion_point(field_mutable:fraft.ServerInfo.server_host)
  return _s;
}
inline const std::string& ServerInfo::_internal_server_host() const {
  return server_host_.Get();
}
inline void ServerInfo::_internal_set_server_host(const std::string& value) {
  
  server_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_server_host() {
  
  return server_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerInfo::release_server_host() {
  // @@protoc_insertion_point(field_release:fraft.ServerInfo.server_host)
  return server_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerInfo::set_allocated_server_host(std::string* server_host) {
  if (server_host != nullptr) {
    
  } else {
    
  }
  server_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_host,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.ServerInfo.server_host)
}

// uint32 leader_port = 2;
inline void ServerInfo::clear_leader_port() {
  leader_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerInfo::_internal_leader_port() const {
  return leader_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerInfo::leader_port() const {
  // @@protoc_insertion_point(field_get:fraft.ServerInfo.leader_port)
  return _internal_leader_port();
}
inline void ServerInfo::_internal_set_leader_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  leader_port_ = value;
}
inline void ServerInfo::set_leader_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leader_port(value);
  // @@protoc_insertion_point(field_set:fraft.ServerInfo.leader_port)
}

// uint32 election_port = 3;
inline void ServerInfo::clear_election_port() {
  election_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerInfo::_internal_election_port() const {
  return election_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerInfo::election_port() const {
  // @@protoc_insertion_point(field_get:fraft.ServerInfo.election_port)
  return _internal_election_port();
}
inline void ServerInfo::_internal_set_election_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  election_port_ = value;
}
inline void ServerInfo::set_election_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_election_port(value);
  // @@protoc_insertion_point(field_set:fraft.ServerInfo.election_port)
}

// uint64 server_id = 4;
inline void ServerInfo::clear_server_id() {
  server_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerInfo::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:fraft.ServerInfo.server_id)
  return _internal_server_id();
}
inline void ServerInfo::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_id_ = value;
}
inline void ServerInfo::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:fraft.ServerInfo.server_id)
}

// -------------------------------------------------------------------

// ServerConfig

// uint64 my_server_id = 1;
inline void ServerConfig::clear_my_server_id() {
  my_server_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerConfig::_internal_my_server_id() const {
  return my_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerConfig::my_server_id() const {
  // @@protoc_insertion_point(field_get:fraft.ServerConfig.my_server_id)
  return _internal_my_server_id();
}
inline void ServerConfig::_internal_set_my_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  my_server_id_ = value;
}
inline void ServerConfig::set_my_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_my_server_id(value);
  // @@protoc_insertion_point(field_set:fraft.ServerConfig.my_server_id)
}

// repeated .fraft.ServerInfo server_info = 2;
inline int ServerConfig::_internal_server_info_size() const {
  return server_info_.size();
}
inline int ServerConfig::server_info_size() const {
  return _internal_server_info_size();
}
inline void ServerConfig::clear_server_info() {
  server_info_.Clear();
}
inline ::fraft::ServerInfo* ServerConfig::mutable_server_info(int index) {
  // @@protoc_insertion_point(field_mutable:fraft.ServerConfig.server_info)
  return server_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ServerInfo >*
ServerConfig::mutable_server_info() {
  // @@protoc_insertion_point(field_mutable_list:fraft.ServerConfig.server_info)
  return &server_info_;
}
inline const ::fraft::ServerInfo& ServerConfig::_internal_server_info(int index) const {
  return server_info_.Get(index);
}
inline const ::fraft::ServerInfo& ServerConfig::server_info(int index) const {
  // @@protoc_insertion_point(field_get:fraft.ServerConfig.server_info)
  return _internal_server_info(index);
}
inline ::fraft::ServerInfo* ServerConfig::_internal_add_server_info() {
  return server_info_.Add();
}
inline ::fraft::ServerInfo* ServerConfig::add_server_info() {
  ::fraft::ServerInfo* _add = _internal_add_server_info();
  // @@protoc_insertion_point(field_add:fraft.ServerConfig.server_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::ServerInfo >&
ServerConfig::server_info() const {
  // @@protoc_insertion_point(field_list:fraft.ServerConfig.server_info)
  return server_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fraft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fconfig_2eproto
