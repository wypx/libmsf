// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#include "transaction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_transaction_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transaction_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeStat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transaction_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Session;
}  // namespace protobuf_transaction_2eproto
namespace fraft {
class SessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Session>
      _instance;
} _Session_default_instance_;
class SessionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionList>
      _instance;
} _SessionList_default_instance_;
class NodeStatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeStat>
      _instance;
} _NodeStat_default_instance_;
class NodeDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeData>
      _instance;
} _NodeData_default_instance_;
}  // namespace fraft
namespace protobuf_transaction_2eproto {
static void InitDefaultsSession() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fraft::_Session_default_instance_;
    new (ptr) ::fraft::Session();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fraft::Session::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Session =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSession}, {}};

static void InitDefaultsSessionList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fraft::_SessionList_default_instance_;
    new (ptr) ::fraft::SessionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fraft::SessionList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SessionList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSessionList}, {
      &protobuf_transaction_2eproto::scc_info_Session.base,}};

static void InitDefaultsNodeStat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fraft::_NodeStat_default_instance_;
    new (ptr) ::fraft::NodeStat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fraft::NodeStat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeStat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeStat}, {}};

static void InitDefaultsNodeData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fraft::_NodeData_default_instance_;
    new (ptr) ::fraft::NodeData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fraft::NodeData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NodeData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodeData}, {
      &protobuf_transaction_2eproto::scc_info_NodeStat.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Session.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SessionList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeStat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeData.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::Session, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::Session, timeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::SessionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::SessionList, sessions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeStat, cgxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeStat, mgxid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeStat, ctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeStat, mtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeStat, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeStat, cversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeStat, aversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeStat, ephemeral_owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeStat, pgxid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeData, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeData, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeData, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeData, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fraft::NodeData, data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fraft::Session)},
  { 7, -1, sizeof(::fraft::SessionList)},
  { 13, -1, sizeof(::fraft::NodeStat)},
  { 27, -1, sizeof(::fraft::NodeData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fraft::_Session_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fraft::_SessionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fraft::_NodeStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fraft::_NodeData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "transaction.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021transaction.proto\022\005fraft\"&\n\007Session\022\n\n"
      "\002id\030\001 \001(\004\022\017\n\007timeout\030\002 \001(\004\"/\n\013SessionLis"
      "t\022 \n\010sessions\030\001 \003(\0132\016.fraft.Session\"\243\001\n\010"
      "NodeStat\022\r\n\005cgxid\030\001 \001(\004\022\r\n\005mgxid\030\002 \001(\004\022\r"
      "\n\005ctime\030\003 \001(\004\022\r\n\005mtime\030\004 \001(\004\022\017\n\007version\030"
      "\005 \001(\r\022\020\n\010cversion\030\006 \001(\r\022\020\n\010aversion\030\007 \001("
      "\r\022\027\n\017ephemeral_owner\030\010 \001(\004\022\r\n\005pgxid\030\t \001("
      "\004\"h\n\010NodeData\022\014\n\004path\030\001 \001(\t\022\022\n\npermissio"
      "n\030\002 \001(\r\022\r\n\005owner\030\003 \001(\004\022\035\n\004stat\030\004 \001(\0132\017.f"
      "raft.NodeStat\022\014\n\004data\030\007 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transaction.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_transaction_2eproto
namespace fraft {

// ===================================================================

void Session::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kIdFieldNumber;
const int Session::kTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transaction_2eproto::scc_info_Session.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fraft.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&id_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:fraft.Session)
}

void Session::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timeout_));
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:fraft.Session)
  SharedDtor();
}

void Session::SharedDtor() {
}

void Session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  ::protobuf_transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transaction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Session& Session::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transaction_2eproto::scc_info_Session.base);
  return *internal_default_instance();
}


void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:fraft.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timeout_));
  _internal_metadata_.Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fraft.Session)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fraft.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fraft.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fraft.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // uint64 timeout = 2;
  if (this->timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timeout(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fraft.Session)
}

::google::protobuf::uint8* Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fraft.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // uint64 timeout = 2;
  if (this->timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timeout(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fraft.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fraft.Session)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 timeout = 2;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fraft.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fraft.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fraft.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fraft.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fraft.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fraft.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(timeout_, other->timeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transaction_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SessionList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionList::kSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionList::SessionList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transaction_2eproto::scc_info_SessionList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fraft.SessionList)
}
SessionList::SessionList(const SessionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fraft.SessionList)
}

void SessionList::SharedCtor() {
}

SessionList::~SessionList() {
  // @@protoc_insertion_point(destructor:fraft.SessionList)
  SharedDtor();
}

void SessionList::SharedDtor() {
}

void SessionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SessionList::descriptor() {
  ::protobuf_transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transaction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionList& SessionList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transaction_2eproto::scc_info_SessionList.base);
  return *internal_default_instance();
}


void SessionList::Clear() {
// @@protoc_insertion_point(message_clear_start:fraft.SessionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessions_.Clear();
  _internal_metadata_.Clear();
}

bool SessionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fraft.SessionList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fraft.Session sessions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fraft.SessionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fraft.SessionList)
  return false;
#undef DO_
}

void SessionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fraft.SessionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fraft.Session sessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sessions(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fraft.SessionList)
}

::google::protobuf::uint8* SessionList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fraft.SessionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fraft.Session sessions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sessions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sessions(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fraft.SessionList)
  return target;
}

size_t SessionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fraft.SessionList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .fraft.Session sessions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sessions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sessions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fraft.SessionList)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fraft.SessionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fraft.SessionList)
    MergeFrom(*source);
  }
}

void SessionList::MergeFrom(const SessionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fraft.SessionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sessions_.MergeFrom(from.sessions_);
}

void SessionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fraft.SessionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionList::CopyFrom(const SessionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fraft.SessionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionList::IsInitialized() const {
  return true;
}

void SessionList::Swap(SessionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionList::InternalSwap(SessionList* other) {
  using std::swap;
  CastToBase(&sessions_)->InternalSwap(CastToBase(&other->sessions_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SessionList::GetMetadata() const {
  protobuf_transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transaction_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeStat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeStat::kCgxidFieldNumber;
const int NodeStat::kMgxidFieldNumber;
const int NodeStat::kCtimeFieldNumber;
const int NodeStat::kMtimeFieldNumber;
const int NodeStat::kVersionFieldNumber;
const int NodeStat::kCversionFieldNumber;
const int NodeStat::kAversionFieldNumber;
const int NodeStat::kEphemeralOwnerFieldNumber;
const int NodeStat::kPgxidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeStat::NodeStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transaction_2eproto::scc_info_NodeStat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fraft.NodeStat)
}
NodeStat::NodeStat(const NodeStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cgxid_, &from.cgxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&aversion_) -
    reinterpret_cast<char*>(&cgxid_)) + sizeof(aversion_));
  // @@protoc_insertion_point(copy_constructor:fraft.NodeStat)
}

void NodeStat::SharedCtor() {
  ::memset(&cgxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aversion_) -
      reinterpret_cast<char*>(&cgxid_)) + sizeof(aversion_));
}

NodeStat::~NodeStat() {
  // @@protoc_insertion_point(destructor:fraft.NodeStat)
  SharedDtor();
}

void NodeStat::SharedDtor() {
}

void NodeStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeStat::descriptor() {
  ::protobuf_transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transaction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeStat& NodeStat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transaction_2eproto::scc_info_NodeStat.base);
  return *internal_default_instance();
}


void NodeStat::Clear() {
// @@protoc_insertion_point(message_clear_start:fraft.NodeStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cgxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aversion_) -
      reinterpret_cast<char*>(&cgxid_)) + sizeof(aversion_));
  _internal_metadata_.Clear();
}

bool NodeStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fraft.NodeStat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 cgxid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cgxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 mgxid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mgxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ctime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 mtime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cversion = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 aversion = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ephemeral_owner = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ephemeral_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 pgxid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pgxid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fraft.NodeStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fraft.NodeStat)
  return false;
#undef DO_
}

void NodeStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fraft.NodeStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cgxid = 1;
  if (this->cgxid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cgxid(), output);
  }

  // uint64 mgxid = 2;
  if (this->mgxid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mgxid(), output);
  }

  // uint64 ctime = 3;
  if (this->ctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ctime(), output);
  }

  // uint64 mtime = 4;
  if (this->mtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mtime(), output);
  }

  // uint32 version = 5;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->version(), output);
  }

  // uint32 cversion = 6;
  if (this->cversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cversion(), output);
  }

  // uint32 aversion = 7;
  if (this->aversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->aversion(), output);
  }

  // uint64 ephemeral_owner = 8;
  if (this->ephemeral_owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ephemeral_owner(), output);
  }

  // uint64 pgxid = 9;
  if (this->pgxid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->pgxid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fraft.NodeStat)
}

::google::protobuf::uint8* NodeStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fraft.NodeStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cgxid = 1;
  if (this->cgxid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cgxid(), target);
  }

  // uint64 mgxid = 2;
  if (this->mgxid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mgxid(), target);
  }

  // uint64 ctime = 3;
  if (this->ctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ctime(), target);
  }

  // uint64 mtime = 4;
  if (this->mtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mtime(), target);
  }

  // uint32 version = 5;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->version(), target);
  }

  // uint32 cversion = 6;
  if (this->cversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cversion(), target);
  }

  // uint32 aversion = 7;
  if (this->aversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->aversion(), target);
  }

  // uint64 ephemeral_owner = 8;
  if (this->ephemeral_owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ephemeral_owner(), target);
  }

  // uint64 pgxid = 9;
  if (this->pgxid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->pgxid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fraft.NodeStat)
  return target;
}

size_t NodeStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fraft.NodeStat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 cgxid = 1;
  if (this->cgxid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cgxid());
  }

  // uint64 mgxid = 2;
  if (this->mgxid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mgxid());
  }

  // uint64 ctime = 3;
  if (this->ctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ctime());
  }

  // uint64 mtime = 4;
  if (this->mtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mtime());
  }

  // uint32 version = 5;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // uint32 cversion = 6;
  if (this->cversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cversion());
  }

  // uint64 ephemeral_owner = 8;
  if (this->ephemeral_owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ephemeral_owner());
  }

  // uint64 pgxid = 9;
  if (this->pgxid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pgxid());
  }

  // uint32 aversion = 7;
  if (this->aversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aversion());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fraft.NodeStat)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fraft.NodeStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fraft.NodeStat)
    MergeFrom(*source);
  }
}

void NodeStat::MergeFrom(const NodeStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fraft.NodeStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cgxid() != 0) {
    set_cgxid(from.cgxid());
  }
  if (from.mgxid() != 0) {
    set_mgxid(from.mgxid());
  }
  if (from.ctime() != 0) {
    set_ctime(from.ctime());
  }
  if (from.mtime() != 0) {
    set_mtime(from.mtime());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.cversion() != 0) {
    set_cversion(from.cversion());
  }
  if (from.ephemeral_owner() != 0) {
    set_ephemeral_owner(from.ephemeral_owner());
  }
  if (from.pgxid() != 0) {
    set_pgxid(from.pgxid());
  }
  if (from.aversion() != 0) {
    set_aversion(from.aversion());
  }
}

void NodeStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fraft.NodeStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStat::CopyFrom(const NodeStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fraft.NodeStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStat::IsInitialized() const {
  return true;
}

void NodeStat::Swap(NodeStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeStat::InternalSwap(NodeStat* other) {
  using std::swap;
  swap(cgxid_, other->cgxid_);
  swap(mgxid_, other->mgxid_);
  swap(ctime_, other->ctime_);
  swap(mtime_, other->mtime_);
  swap(version_, other->version_);
  swap(cversion_, other->cversion_);
  swap(ephemeral_owner_, other->ephemeral_owner_);
  swap(pgxid_, other->pgxid_);
  swap(aversion_, other->aversion_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeStat::GetMetadata() const {
  protobuf_transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transaction_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeData::InitAsDefaultInstance() {
  ::fraft::_NodeData_default_instance_._instance.get_mutable()->stat_ = const_cast< ::fraft::NodeStat*>(
      ::fraft::NodeStat::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeData::kPathFieldNumber;
const int NodeData::kPermissionFieldNumber;
const int NodeData::kOwnerFieldNumber;
const int NodeData::kStatFieldNumber;
const int NodeData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeData::NodeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transaction_2eproto::scc_info_NodeData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fraft.NodeData)
}
NodeData::NodeData(const NodeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_stat()) {
    stat_ = new ::fraft::NodeStat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  ::memcpy(&owner_, &from.owner_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&owner_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:fraft.NodeData)
}

void NodeData::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&stat_)) + sizeof(permission_));
}

NodeData::~NodeData() {
  // @@protoc_insertion_point(destructor:fraft.NodeData)
  SharedDtor();
}

void NodeData::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stat_;
}

void NodeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeData::descriptor() {
  ::protobuf_transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transaction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeData& NodeData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transaction_2eproto::scc_info_NodeData.base);
  return *internal_default_instance();
}


void NodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:fraft.NodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stat_ != NULL) {
    delete stat_;
  }
  stat_ = NULL;
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(permission_));
  _internal_metadata_.Clear();
}

bool NodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fraft.NodeData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fraft.NodeData.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 owner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fraft.NodeStat stat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fraft.NodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fraft.NodeData)
  return false;
#undef DO_
}

void NodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fraft.NodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fraft.NodeData.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // uint32 permission = 2;
  if (this->permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->permission(), output);
  }

  // uint64 owner = 3;
  if (this->owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->owner(), output);
  }

  // .fraft.NodeStat stat = 4;
  if (this->has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_stat(), output);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:fraft.NodeData)
}

::google::protobuf::uint8* NodeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fraft.NodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fraft.NodeData.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // uint32 permission = 2;
  if (this->permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->permission(), target);
  }

  // uint64 owner = 3;
  if (this->owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->owner(), target);
  }

  // .fraft.NodeStat stat = 4;
  if (this->has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_stat(), deterministic, target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fraft.NodeData)
  return target;
}

size_t NodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fraft.NodeData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .fraft.NodeStat stat = 4;
  if (this->has_stat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stat_);
  }

  // uint64 owner = 3;
  if (this->owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->owner());
  }

  // uint32 permission = 2;
  if (this->permission() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->permission());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fraft.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fraft.NodeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fraft.NodeData)
    MergeFrom(*source);
  }
}

void NodeData::MergeFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fraft.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_stat()) {
    mutable_stat()->::fraft::NodeStat::MergeFrom(from.stat());
  }
  if (from.owner() != 0) {
    set_owner(from.owner());
  }
  if (from.permission() != 0) {
    set_permission(from.permission());
  }
}

void NodeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fraft.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeData::CopyFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fraft.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeData::IsInitialized() const {
  return true;
}

void NodeData::Swap(NodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeData::InternalSwap(NodeData* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stat_, other->stat_);
  swap(owner_, other->owner_);
  swap(permission_, other->permission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeData::GetMetadata() const {
  protobuf_transaction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transaction_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fraft
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fraft::Session* Arena::CreateMaybeMessage< ::fraft::Session >(Arena* arena) {
  return Arena::CreateInternal< ::fraft::Session >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fraft::SessionList* Arena::CreateMaybeMessage< ::fraft::SessionList >(Arena* arena) {
  return Arena::CreateInternal< ::fraft::SessionList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fraft::NodeStat* Arena::CreateMaybeMessage< ::fraft::NodeStat >(Arena* arena) {
  return Arena::CreateInternal< ::fraft::NodeStat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fraft::NodeData* Arena::CreateMaybeMessage< ::fraft::NodeData >(Arena* arena) {
  return Arena::CreateInternal< ::fraft::NodeData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
