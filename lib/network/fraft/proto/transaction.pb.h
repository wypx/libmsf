// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#ifndef PROTOBUF_INCLUDED_transaction_2eproto
#define PROTOBUF_INCLUDED_transaction_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_transaction_2eproto 

namespace protobuf_transaction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_transaction_2eproto
namespace fraft {
class NodeData;
class NodeDataDefaultTypeInternal;
extern NodeDataDefaultTypeInternal _NodeData_default_instance_;
class NodeStat;
class NodeStatDefaultTypeInternal;
extern NodeStatDefaultTypeInternal _NodeStat_default_instance_;
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionList;
class SessionListDefaultTypeInternal;
extern SessionListDefaultTypeInternal _SessionList_default_instance_;
}  // namespace fraft
namespace google {
namespace protobuf {
template<> ::fraft::NodeData* Arena::CreateMaybeMessage<::fraft::NodeData>(Arena*);
template<> ::fraft::NodeStat* Arena::CreateMaybeMessage<::fraft::NodeStat>(Arena*);
template<> ::fraft::Session* Arena::CreateMaybeMessage<::fraft::Session>(Arena*);
template<> ::fraft::SessionList* Arena::CreateMaybeMessage<::fraft::SessionList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fraft {

// ===================================================================

class Session : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Session* other);
  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(NULL);
  }

  Session* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 timeout = 2;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  ::google::protobuf::uint64 timeout() const;
  void set_timeout(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fraft.Session)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 timeout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.SessionList) */ {
 public:
  SessionList();
  virtual ~SessionList();

  SessionList(const SessionList& from);

  inline SessionList& operator=(const SessionList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionList(SessionList&& from) noexcept
    : SessionList() {
    *this = ::std::move(from);
  }

  inline SessionList& operator=(SessionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionList* internal_default_instance() {
    return reinterpret_cast<const SessionList*>(
               &_SessionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SessionList* other);
  friend void swap(SessionList& a, SessionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionList* New() const final {
    return CreateMaybeMessage<SessionList>(NULL);
  }

  SessionList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SessionList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SessionList& from);
  void MergeFrom(const SessionList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fraft.Session sessions = 1;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  ::fraft::Session* mutable_sessions(int index);
  ::google::protobuf::RepeatedPtrField< ::fraft::Session >*
      mutable_sessions();
  const ::fraft::Session& sessions(int index) const;
  ::fraft::Session* add_sessions();
  const ::google::protobuf::RepeatedPtrField< ::fraft::Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:fraft.SessionList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fraft::Session > sessions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.NodeStat) */ {
 public:
  NodeStat();
  virtual ~NodeStat();

  NodeStat(const NodeStat& from);

  inline NodeStat& operator=(const NodeStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeStat(NodeStat&& from) noexcept
    : NodeStat() {
    *this = ::std::move(from);
  }

  inline NodeStat& operator=(NodeStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeStat* internal_default_instance() {
    return reinterpret_cast<const NodeStat*>(
               &_NodeStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NodeStat* other);
  friend void swap(NodeStat& a, NodeStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeStat* New() const final {
    return CreateMaybeMessage<NodeStat>(NULL);
  }

  NodeStat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeStat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeStat& from);
  void MergeFrom(const NodeStat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 cgxid = 1;
  void clear_cgxid();
  static const int kCgxidFieldNumber = 1;
  ::google::protobuf::uint64 cgxid() const;
  void set_cgxid(::google::protobuf::uint64 value);

  // uint64 mgxid = 2;
  void clear_mgxid();
  static const int kMgxidFieldNumber = 2;
  ::google::protobuf::uint64 mgxid() const;
  void set_mgxid(::google::protobuf::uint64 value);

  // uint64 ctime = 3;
  void clear_ctime();
  static const int kCtimeFieldNumber = 3;
  ::google::protobuf::uint64 ctime() const;
  void set_ctime(::google::protobuf::uint64 value);

  // uint64 mtime = 4;
  void clear_mtime();
  static const int kMtimeFieldNumber = 4;
  ::google::protobuf::uint64 mtime() const;
  void set_mtime(::google::protobuf::uint64 value);

  // uint32 version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 cversion = 6;
  void clear_cversion();
  static const int kCversionFieldNumber = 6;
  ::google::protobuf::uint32 cversion() const;
  void set_cversion(::google::protobuf::uint32 value);

  // uint64 ephemeral_owner = 8;
  void clear_ephemeral_owner();
  static const int kEphemeralOwnerFieldNumber = 8;
  ::google::protobuf::uint64 ephemeral_owner() const;
  void set_ephemeral_owner(::google::protobuf::uint64 value);

  // uint64 pgxid = 9;
  void clear_pgxid();
  static const int kPgxidFieldNumber = 9;
  ::google::protobuf::uint64 pgxid() const;
  void set_pgxid(::google::protobuf::uint64 value);

  // uint32 aversion = 7;
  void clear_aversion();
  static const int kAversionFieldNumber = 7;
  ::google::protobuf::uint32 aversion() const;
  void set_aversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fraft.NodeStat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 cgxid_;
  ::google::protobuf::uint64 mgxid_;
  ::google::protobuf::uint64 ctime_;
  ::google::protobuf::uint64 mtime_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 cversion_;
  ::google::protobuf::uint64 ephemeral_owner_;
  ::google::protobuf::uint64 pgxid_;
  ::google::protobuf::uint32 aversion_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fraft.NodeData) */ {
 public:
  NodeData();
  virtual ~NodeData();

  NodeData(const NodeData& from);

  inline NodeData& operator=(const NodeData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeData(NodeData&& from) noexcept
    : NodeData() {
    *this = ::std::move(from);
  }

  inline NodeData& operator=(NodeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeData* internal_default_instance() {
    return reinterpret_cast<const NodeData*>(
               &_NodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NodeData* other);
  friend void swap(NodeData& a, NodeData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeData* New() const final {
    return CreateMaybeMessage<NodeData>(NULL);
  }

  NodeData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeData& from);
  void MergeFrom(const NodeData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // bytes data = 7;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .fraft.NodeStat stat = 4;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 4;
  private:
  const ::fraft::NodeStat& _internal_stat() const;
  public:
  const ::fraft::NodeStat& stat() const;
  ::fraft::NodeStat* release_stat();
  ::fraft::NodeStat* mutable_stat();
  void set_allocated_stat(::fraft::NodeStat* stat);

  // uint64 owner = 3;
  void clear_owner();
  static const int kOwnerFieldNumber = 3;
  ::google::protobuf::uint64 owner() const;
  void set_owner(::google::protobuf::uint64 value);

  // uint32 permission = 2;
  void clear_permission();
  static const int kPermissionFieldNumber = 2;
  ::google::protobuf::uint32 permission() const;
  void set_permission(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fraft.NodeData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::fraft::NodeStat* stat_;
  ::google::protobuf::uint64 owner_;
  ::google::protobuf::uint32 permission_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_transaction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// uint64 id = 1;
inline void Session::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::id() const {
  // @@protoc_insertion_point(field_get:fraft.Session.id)
  return id_;
}
inline void Session::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:fraft.Session.id)
}

// uint64 timeout = 2;
inline void Session::clear_timeout() {
  timeout_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Session::timeout() const {
  // @@protoc_insertion_point(field_get:fraft.Session.timeout)
  return timeout_;
}
inline void Session::set_timeout(::google::protobuf::uint64 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:fraft.Session.timeout)
}

// -------------------------------------------------------------------

// SessionList

// repeated .fraft.Session sessions = 1;
inline int SessionList::sessions_size() const {
  return sessions_.size();
}
inline void SessionList::clear_sessions() {
  sessions_.Clear();
}
inline ::fraft::Session* SessionList::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:fraft.SessionList.sessions)
  return sessions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fraft::Session >*
SessionList::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:fraft.SessionList.sessions)
  return &sessions_;
}
inline const ::fraft::Session& SessionList::sessions(int index) const {
  // @@protoc_insertion_point(field_get:fraft.SessionList.sessions)
  return sessions_.Get(index);
}
inline ::fraft::Session* SessionList::add_sessions() {
  // @@protoc_insertion_point(field_add:fraft.SessionList.sessions)
  return sessions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fraft::Session >&
SessionList::sessions() const {
  // @@protoc_insertion_point(field_list:fraft.SessionList.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// NodeStat

// uint64 cgxid = 1;
inline void NodeStat::clear_cgxid() {
  cgxid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStat::cgxid() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.cgxid)
  return cgxid_;
}
inline void NodeStat::set_cgxid(::google::protobuf::uint64 value) {
  
  cgxid_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeStat.cgxid)
}

// uint64 mgxid = 2;
inline void NodeStat::clear_mgxid() {
  mgxid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStat::mgxid() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.mgxid)
  return mgxid_;
}
inline void NodeStat::set_mgxid(::google::protobuf::uint64 value) {
  
  mgxid_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeStat.mgxid)
}

// uint64 ctime = 3;
inline void NodeStat::clear_ctime() {
  ctime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStat::ctime() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.ctime)
  return ctime_;
}
inline void NodeStat::set_ctime(::google::protobuf::uint64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeStat.ctime)
}

// uint64 mtime = 4;
inline void NodeStat::clear_mtime() {
  mtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStat::mtime() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.mtime)
  return mtime_;
}
inline void NodeStat::set_mtime(::google::protobuf::uint64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeStat.mtime)
}

// uint32 version = 5;
inline void NodeStat::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 NodeStat::version() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.version)
  return version_;
}
inline void NodeStat::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeStat.version)
}

// uint32 cversion = 6;
inline void NodeStat::clear_cversion() {
  cversion_ = 0u;
}
inline ::google::protobuf::uint32 NodeStat::cversion() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.cversion)
  return cversion_;
}
inline void NodeStat::set_cversion(::google::protobuf::uint32 value) {
  
  cversion_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeStat.cversion)
}

// uint32 aversion = 7;
inline void NodeStat::clear_aversion() {
  aversion_ = 0u;
}
inline ::google::protobuf::uint32 NodeStat::aversion() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.aversion)
  return aversion_;
}
inline void NodeStat::set_aversion(::google::protobuf::uint32 value) {
  
  aversion_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeStat.aversion)
}

// uint64 ephemeral_owner = 8;
inline void NodeStat::clear_ephemeral_owner() {
  ephemeral_owner_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStat::ephemeral_owner() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.ephemeral_owner)
  return ephemeral_owner_;
}
inline void NodeStat::set_ephemeral_owner(::google::protobuf::uint64 value) {
  
  ephemeral_owner_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeStat.ephemeral_owner)
}

// uint64 pgxid = 9;
inline void NodeStat::clear_pgxid() {
  pgxid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeStat::pgxid() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.pgxid)
  return pgxid_;
}
inline void NodeStat::set_pgxid(::google::protobuf::uint64 value) {
  
  pgxid_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeStat.pgxid)
}

// -------------------------------------------------------------------

// NodeData

// string path = 1;
inline void NodeData::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeData::path() const {
  // @@protoc_insertion_point(field_get:fraft.NodeData.path)
  return path_.GetNoArena();
}
inline void NodeData::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.NodeData.path)
}
#if LANG_CXX11
inline void NodeData::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.NodeData.path)
}
#endif
inline void NodeData::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.NodeData.path)
}
inline void NodeData::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.NodeData.path)
}
inline ::std::string* NodeData::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:fraft.NodeData.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeData::release_path() {
  // @@protoc_insertion_point(field_release:fraft.NodeData.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeData::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:fraft.NodeData.path)
}

// uint32 permission = 2;
inline void NodeData::clear_permission() {
  permission_ = 0u;
}
inline ::google::protobuf::uint32 NodeData::permission() const {
  // @@protoc_insertion_point(field_get:fraft.NodeData.permission)
  return permission_;
}
inline void NodeData::set_permission(::google::protobuf::uint32 value) {
  
  permission_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeData.permission)
}

// uint64 owner = 3;
inline void NodeData::clear_owner() {
  owner_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NodeData::owner() const {
  // @@protoc_insertion_point(field_get:fraft.NodeData.owner)
  return owner_;
}
inline void NodeData::set_owner(::google::protobuf::uint64 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:fraft.NodeData.owner)
}

// .fraft.NodeStat stat = 4;
inline bool NodeData::has_stat() const {
  return this != internal_default_instance() && stat_ != NULL;
}
inline void NodeData::clear_stat() {
  if (GetArenaNoVirtual() == NULL && stat_ != NULL) {
    delete stat_;
  }
  stat_ = NULL;
}
inline const ::fraft::NodeStat& NodeData::_internal_stat() const {
  return *stat_;
}
inline const ::fraft::NodeStat& NodeData::stat() const {
  const ::fraft::NodeStat* p = stat_;
  // @@protoc_insertion_point(field_get:fraft.NodeData.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::fraft::NodeStat*>(
      &::fraft::_NodeStat_default_instance_);
}
inline ::fraft::NodeStat* NodeData::release_stat() {
  // @@protoc_insertion_point(field_release:fraft.NodeData.stat)
  
  ::fraft::NodeStat* temp = stat_;
  stat_ = NULL;
  return temp;
}
inline ::fraft::NodeStat* NodeData::mutable_stat() {
  
  if (stat_ == NULL) {
    auto* p = CreateMaybeMessage<::fraft::NodeStat>(GetArenaNoVirtual());
    stat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fraft.NodeData.stat)
  return stat_;
}
inline void NodeData::set_allocated_stat(::fraft::NodeStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:fraft.NodeData.stat)
}

// bytes data = 7;
inline void NodeData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeData::data() const {
  // @@protoc_insertion_point(field_get:fraft.NodeData.data)
  return data_.GetNoArena();
}
inline void NodeData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fraft.NodeData.data)
}
#if LANG_CXX11
inline void NodeData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fraft.NodeData.data)
}
#endif
inline void NodeData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fraft.NodeData.data)
}
inline void NodeData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fraft.NodeData.data)
}
inline ::std::string* NodeData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:fraft.NodeData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeData::release_data() {
  // @@protoc_insertion_point(field_release:fraft.NodeData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fraft.NodeData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fraft

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_transaction_2eproto
