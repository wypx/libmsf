// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_2eproto;
namespace fraft {
class NodeData;
struct NodeDataDefaultTypeInternal;
extern NodeDataDefaultTypeInternal _NodeData_default_instance_;
class NodeStat;
struct NodeStatDefaultTypeInternal;
extern NodeStatDefaultTypeInternal _NodeStat_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionList;
struct SessionListDefaultTypeInternal;
extern SessionListDefaultTypeInternal _SessionList_default_instance_;
}  // namespace fraft
PROTOBUF_NAMESPACE_OPEN
template<> ::fraft::NodeData* Arena::CreateMaybeMessage<::fraft::NodeData>(Arena*);
template<> ::fraft::NodeStat* Arena::CreateMaybeMessage<::fraft::NodeStat>(Arena*);
template<> ::fraft::Session* Arena::CreateMaybeMessage<::fraft::Session>(Arena*);
template<> ::fraft::SessionList* Arena::CreateMaybeMessage<::fraft::SessionList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fraft {

// ===================================================================

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit constexpr Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return new Session();
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Session& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timeout = 2;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:fraft.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class SessionList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.SessionList) */ {
 public:
  inline SessionList() : SessionList(nullptr) {}
  ~SessionList() override;
  explicit constexpr SessionList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionList(const SessionList& from);
  SessionList(SessionList&& from) noexcept
    : SessionList() {
    *this = ::std::move(from);
  }

  inline SessionList& operator=(const SessionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionList& operator=(SessionList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionList* internal_default_instance() {
    return reinterpret_cast<const SessionList*>(
               &_SessionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SessionList& a, SessionList& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionList* New() const final {
    return new SessionList();
  }

  SessionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SessionList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.SessionList";
  }
  protected:
  explicit SessionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 1,
  };
  // repeated .fraft.Session sessions = 1;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::fraft::Session* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::Session >*
      mutable_sessions();
  private:
  const ::fraft::Session& _internal_sessions(int index) const;
  ::fraft::Session* _internal_add_sessions();
  public:
  const ::fraft::Session& sessions(int index) const;
  ::fraft::Session* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:fraft.SessionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::Session > sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class NodeStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.NodeStat) */ {
 public:
  inline NodeStat() : NodeStat(nullptr) {}
  ~NodeStat() override;
  explicit constexpr NodeStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeStat(const NodeStat& from);
  NodeStat(NodeStat&& from) noexcept
    : NodeStat() {
    *this = ::std::move(from);
  }

  inline NodeStat& operator=(const NodeStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeStat& operator=(NodeStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeStat* internal_default_instance() {
    return reinterpret_cast<const NodeStat*>(
               &_NodeStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NodeStat& a, NodeStat& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeStat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeStat* New() const final {
    return new NodeStat();
  }

  NodeStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NodeStat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.NodeStat";
  }
  protected:
  explicit NodeStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCgxidFieldNumber = 1,
    kMgxidFieldNumber = 2,
    kCtimeFieldNumber = 3,
    kMtimeFieldNumber = 4,
    kVersionFieldNumber = 5,
    kCversionFieldNumber = 6,
    kEphemeralOwnerFieldNumber = 8,
    kPgxidFieldNumber = 9,
    kAversionFieldNumber = 7,
  };
  // uint64 cgxid = 1;
  void clear_cgxid();
  ::PROTOBUF_NAMESPACE_ID::uint64 cgxid() const;
  void set_cgxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cgxid() const;
  void _internal_set_cgxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mgxid = 2;
  void clear_mgxid();
  ::PROTOBUF_NAMESPACE_ID::uint64 mgxid() const;
  void set_mgxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mgxid() const;
  void _internal_set_mgxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ctime = 3;
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mtime = 4;
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 5;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cversion = 6;
  void clear_cversion();
  ::PROTOBUF_NAMESPACE_ID::uint32 cversion() const;
  void set_cversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cversion() const;
  void _internal_set_cversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 ephemeral_owner = 8;
  void clear_ephemeral_owner();
  ::PROTOBUF_NAMESPACE_ID::uint64 ephemeral_owner() const;
  void set_ephemeral_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ephemeral_owner() const;
  void _internal_set_ephemeral_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pgxid = 9;
  void clear_pgxid();
  ::PROTOBUF_NAMESPACE_ID::uint64 pgxid() const;
  void set_pgxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pgxid() const;
  void _internal_set_pgxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 aversion = 7;
  void clear_aversion();
  ::PROTOBUF_NAMESPACE_ID::uint32 aversion() const;
  void set_aversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aversion() const;
  void _internal_set_aversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fraft.NodeStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cgxid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mgxid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ctime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cversion_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ephemeral_owner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pgxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 aversion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// -------------------------------------------------------------------

class NodeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fraft.NodeData) */ {
 public:
  inline NodeData() : NodeData(nullptr) {}
  ~NodeData() override;
  explicit constexpr NodeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeData(const NodeData& from);
  NodeData(NodeData&& from) noexcept
    : NodeData() {
    *this = ::std::move(from);
  }

  inline NodeData& operator=(const NodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeData& operator=(NodeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeData* internal_default_instance() {
    return reinterpret_cast<const NodeData*>(
               &_NodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NodeData& a, NodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeData* New() const final {
    return new NodeData();
  }

  NodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NodeData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fraft.NodeData";
  }
  protected:
  explicit NodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kDataFieldNumber = 7,
    kStatFieldNumber = 4,
    kOwnerFieldNumber = 3,
    kPermissionFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .fraft.NodeStat stat = 4;
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::fraft::NodeStat& stat() const;
  PROTOBUF_MUST_USE_RESULT ::fraft::NodeStat* release_stat();
  ::fraft::NodeStat* mutable_stat();
  void set_allocated_stat(::fraft::NodeStat* stat);
  private:
  const ::fraft::NodeStat& _internal_stat() const;
  ::fraft::NodeStat* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::fraft::NodeStat* stat);
  ::fraft::NodeStat* unsafe_arena_release_stat();

  // uint64 owner = 3;
  void clear_owner();
  ::PROTOBUF_NAMESPACE_ID::uint64 owner() const;
  void set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_owner() const;
  void _internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 permission = 2;
  void clear_permission();
  ::PROTOBUF_NAMESPACE_ID::uint32 permission() const;
  void set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_permission() const;
  void _internal_set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fraft.NodeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::fraft::NodeStat* stat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 owner_;
  ::PROTOBUF_NAMESPACE_ID::uint32 permission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// uint64 id = 1;
inline void Session::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::id() const {
  // @@protoc_insertion_point(field_get:fraft.Session.id)
  return _internal_id();
}
inline void Session::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Session::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fraft.Session.id)
}

// uint64 timeout = 2;
inline void Session::clear_timeout() {
  timeout_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Session::timeout() const {
  // @@protoc_insertion_point(field_get:fraft.Session.timeout)
  return _internal_timeout();
}
inline void Session::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timeout_ = value;
}
inline void Session::set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:fraft.Session.timeout)
}

// -------------------------------------------------------------------

// SessionList

// repeated .fraft.Session sessions = 1;
inline int SessionList::_internal_sessions_size() const {
  return sessions_.size();
}
inline int SessionList::sessions_size() const {
  return _internal_sessions_size();
}
inline void SessionList::clear_sessions() {
  sessions_.Clear();
}
inline ::fraft::Session* SessionList::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:fraft.SessionList.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::Session >*
SessionList::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:fraft.SessionList.sessions)
  return &sessions_;
}
inline const ::fraft::Session& SessionList::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::fraft::Session& SessionList::sessions(int index) const {
  // @@protoc_insertion_point(field_get:fraft.SessionList.sessions)
  return _internal_sessions(index);
}
inline ::fraft::Session* SessionList::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::fraft::Session* SessionList::add_sessions() {
  ::fraft::Session* _add = _internal_add_sessions();
  // @@protoc_insertion_point(field_add:fraft.SessionList.sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fraft::Session >&
SessionList::sessions() const {
  // @@protoc_insertion_point(field_list:fraft.SessionList.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// NodeStat

// uint64 cgxid = 1;
inline void NodeStat::clear_cgxid() {
  cgxid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::_internal_cgxid() const {
  return cgxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::cgxid() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.cgxid)
  return _internal_cgxid();
}
inline void NodeStat::_internal_set_cgxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cgxid_ = value;
}
inline void NodeStat::set_cgxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cgxid(value);
  // @@protoc_insertion_point(field_set:fraft.NodeStat.cgxid)
}

// uint64 mgxid = 2;
inline void NodeStat::clear_mgxid() {
  mgxid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::_internal_mgxid() const {
  return mgxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::mgxid() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.mgxid)
  return _internal_mgxid();
}
inline void NodeStat::_internal_set_mgxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mgxid_ = value;
}
inline void NodeStat::set_mgxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mgxid(value);
  // @@protoc_insertion_point(field_set:fraft.NodeStat.mgxid)
}

// uint64 ctime = 3;
inline void NodeStat::clear_ctime() {
  ctime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::ctime() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.ctime)
  return _internal_ctime();
}
inline void NodeStat::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ctime_ = value;
}
inline void NodeStat::set_ctime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:fraft.NodeStat.ctime)
}

// uint64 mtime = 4;
inline void NodeStat::clear_mtime() {
  mtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::mtime() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.mtime)
  return _internal_mtime();
}
inline void NodeStat::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mtime_ = value;
}
inline void NodeStat::set_mtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:fraft.NodeStat.mtime)
}

// uint32 version = 5;
inline void NodeStat::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeStat::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeStat::version() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.version)
  return _internal_version();
}
inline void NodeStat::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void NodeStat::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:fraft.NodeStat.version)
}

// uint32 cversion = 6;
inline void NodeStat::clear_cversion() {
  cversion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeStat::_internal_cversion() const {
  return cversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeStat::cversion() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.cversion)
  return _internal_cversion();
}
inline void NodeStat::_internal_set_cversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cversion_ = value;
}
inline void NodeStat::set_cversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cversion(value);
  // @@protoc_insertion_point(field_set:fraft.NodeStat.cversion)
}

// uint32 aversion = 7;
inline void NodeStat::clear_aversion() {
  aversion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeStat::_internal_aversion() const {
  return aversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeStat::aversion() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.aversion)
  return _internal_aversion();
}
inline void NodeStat::_internal_set_aversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  aversion_ = value;
}
inline void NodeStat::set_aversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_aversion(value);
  // @@protoc_insertion_point(field_set:fraft.NodeStat.aversion)
}

// uint64 ephemeral_owner = 8;
inline void NodeStat::clear_ephemeral_owner() {
  ephemeral_owner_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::_internal_ephemeral_owner() const {
  return ephemeral_owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::ephemeral_owner() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.ephemeral_owner)
  return _internal_ephemeral_owner();
}
inline void NodeStat::_internal_set_ephemeral_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ephemeral_owner_ = value;
}
inline void NodeStat::set_ephemeral_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ephemeral_owner(value);
  // @@protoc_insertion_point(field_set:fraft.NodeStat.ephemeral_owner)
}

// uint64 pgxid = 9;
inline void NodeStat::clear_pgxid() {
  pgxid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::_internal_pgxid() const {
  return pgxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeStat::pgxid() const {
  // @@protoc_insertion_point(field_get:fraft.NodeStat.pgxid)
  return _internal_pgxid();
}
inline void NodeStat::_internal_set_pgxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pgxid_ = value;
}
inline void NodeStat::set_pgxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pgxid(value);
  // @@protoc_insertion_point(field_set:fraft.NodeStat.pgxid)
}

// -------------------------------------------------------------------

// NodeData

// string path = 1;
inline void NodeData::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& NodeData::path() const {
  // @@protoc_insertion_point(field_get:fraft.NodeData.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeData::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.NodeData.path)
}
inline std::string* NodeData::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:fraft.NodeData.path)
  return _s;
}
inline const std::string& NodeData::_internal_path() const {
  return path_.Get();
}
inline void NodeData::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeData::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeData::release_path() {
  // @@protoc_insertion_point(field_release:fraft.NodeData.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeData::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.NodeData.path)
}

// uint32 permission = 2;
inline void NodeData::clear_permission() {
  permission_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeData::_internal_permission() const {
  return permission_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeData::permission() const {
  // @@protoc_insertion_point(field_get:fraft.NodeData.permission)
  return _internal_permission();
}
inline void NodeData::_internal_set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  permission_ = value;
}
inline void NodeData::set_permission(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:fraft.NodeData.permission)
}

// uint64 owner = 3;
inline void NodeData::clear_owner() {
  owner_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeData::_internal_owner() const {
  return owner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeData::owner() const {
  // @@protoc_insertion_point(field_get:fraft.NodeData.owner)
  return _internal_owner();
}
inline void NodeData::_internal_set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  owner_ = value;
}
inline void NodeData::set_owner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_owner(value);
  // @@protoc_insertion_point(field_set:fraft.NodeData.owner)
}

// .fraft.NodeStat stat = 4;
inline bool NodeData::_internal_has_stat() const {
  return this != internal_default_instance() && stat_ != nullptr;
}
inline bool NodeData::has_stat() const {
  return _internal_has_stat();
}
inline void NodeData::clear_stat() {
  if (GetArenaForAllocation() == nullptr && stat_ != nullptr) {
    delete stat_;
  }
  stat_ = nullptr;
}
inline const ::fraft::NodeStat& NodeData::_internal_stat() const {
  const ::fraft::NodeStat* p = stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::fraft::NodeStat&>(
      ::fraft::_NodeStat_default_instance_);
}
inline const ::fraft::NodeStat& NodeData::stat() const {
  // @@protoc_insertion_point(field_get:fraft.NodeData.stat)
  return _internal_stat();
}
inline void NodeData::unsafe_arena_set_allocated_stat(
    ::fraft::NodeStat* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stat_);
  }
  stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fraft.NodeData.stat)
}
inline ::fraft::NodeStat* NodeData::release_stat() {
  
  ::fraft::NodeStat* temp = stat_;
  stat_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fraft::NodeStat* NodeData::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:fraft.NodeData.stat)
  
  ::fraft::NodeStat* temp = stat_;
  stat_ = nullptr;
  return temp;
}
inline ::fraft::NodeStat* NodeData::_internal_mutable_stat() {
  
  if (stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::fraft::NodeStat>(GetArenaForAllocation());
    stat_ = p;
  }
  return stat_;
}
inline ::fraft::NodeStat* NodeData::mutable_stat() {
  ::fraft::NodeStat* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:fraft.NodeData.stat)
  return _msg;
}
inline void NodeData::set_allocated_stat(::fraft::NodeStat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stat_;
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::fraft::NodeStat>::GetOwningArena(stat);
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:fraft.NodeData.stat)
}

// bytes data = 7;
inline void NodeData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& NodeData::data() const {
  // @@protoc_insertion_point(field_get:fraft.NodeData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fraft.NodeData.data)
}
inline std::string* NodeData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:fraft.NodeData.data)
  return _s;
}
inline const std::string& NodeData::_internal_data() const {
  return data_.Get();
}
inline void NodeData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeData::release_data() {
  // @@protoc_insertion_point(field_release:fraft.NodeData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:fraft.NodeData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fraft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_2eproto
