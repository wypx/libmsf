// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frpc.proto

#include "frpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace frpc {
class FastMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FastMessage>
      _instance;
} _FastMessage_default_instance_;
}  // namespace frpc
namespace protobuf_frpc_2eproto {
static void InitDefaultsFastMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frpc::_FastMessage_default_instance_;
    new (ptr) ::frpc::FastMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frpc::FastMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FastMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFastMessage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FastMessage.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frpc::FastMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frpc::FastMessage, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frpc::FastMessage, magic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frpc::FastMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frpc::FastMessage, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frpc::FastMessage, call_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frpc::FastMessage, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frpc::FastMessage, compress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frpc::FastMessage, retcode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frpc::FastMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::frpc::_FastMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "frpc.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nfrpc.proto\022\004frpc\"\217\001\n\013FastMessage\022\017\n\007ve"
      "rsion\030\001 \001(\007\022\r\n\005magic\030\002 \001(\007\022\014\n\004type\030\003 \001(\007"
      "\022\016\n\006length\030\004 \001(\007\022\017\n\007call_id\030\005 \001(\007\022\016\n\006opc"
      "ode\030\010 \001(\007\022\020\n\010compress\030\t \001(\007\022\017\n\007retcode\030\n"
      " \001(\007*u\n\013MessageType\022\030\n\024FRPC_MESSAGE_UNKN"
      "OWN\020\000\022\030\n\024FRPC_MESSAGE_REQUEST\020\001\022\031\n\025FRPC_"
      "MESSAGE_RESPONSE\020\002\022\027\n\023FRPC_MESSAGE_CANCE"
      "L\020\003*/\n\tMessageID\022\016\n\nFRPC_LOGIN\020\000\022\022\n\016FRPC"
      "_HEARTBEAT\020\001*\302\006\n\nReturnCode\022\020\n\014FRPC_SUCC"
      "ESS\020\000\022\023\n\017FRPC_NO_SERVICE\020\001\022\022\n\016FRPC_NO_ME"
      "THOD\020\002\022\030\n\024FRPC_INVALID_REQUEST\020\003\022\030\n\024FRPC"
      "_INVALID_REPONSE\020\004\022\033\n\027RPC_ERROR_PARSE_RE"
      "QUEST\020\005\022\032\n\026RPC_ERROR_PARSE_REPONS\020\006\022\033\n\027R"
      "PC_ERROR_COMPRESS_TYPE\020\007\022\034\n\030RPC_ERROR_NO"
      "_METHOD_NAME\020\010\022\037\n\033RPC_ERROR_PARSE_METHOD"
      "_NAME\020\t\022\033\n\027RPC_ERROR_FOUND_SERVICE\020\n\022\032\n\026"
      "RPC_ERROR_FOUND_METHOD\020\013\022\034\n\030RPC_ERROR_CH"
      "ANNEL_BROKEN\020\014\022\037\n\033RPC_ERROR_CONNECTION_C"
      "LOSED\020\r\022\035\n\031RPC_ERROR_REQUEST_TIMEOUT\020\016\022\036"
      "\n\032RPC_ERROR_REQUEST_CANCELED\020\017\022 \n\034RPC_ER"
      "ROR_SERVER_UNAVAILABLE\020\020\022 \n\034RPC_ERROR_SE"
      "RVER_UNREACHABLE\020\021\022\035\n\031RPC_ERROR_SERVER_S"
      "HUTDOWN\020\022\022\036\n\032RPC_ERROR_SEND_BUFFER_FULL\020"
      "\023\022\037\n\033RPC_ERROR_SERIALIZE_REQUEST\020\024\022 \n\034RP"
      "C_ERROR_SERIALIZE_RESPONSE\020\025\022\035\n\031RPC_ERRO"
      "R_RESOLVE_ADDRESS\020\026\022\033\n\027RPC_ERROR_CREATE_"
      "STREAM\020\027\022\034\n\030RPC_ERROR_NOT_IN_RUNNING\020\030\022\031"
      "\n\025RPC_ERROR_SERVER_BUSY\020\031\022!\n\035RPC_ERROR_T"
      "OO_MANY_OPEN_FILES\020\032\022\033\n\027RPC_ERROR_RESON_"
      "UNKNOWN\020\033*\222\001\n\014CompressType\022\024\n\020CompressTy"
      "peNone\020\000\022\024\n\020CompressTypeGzip\020\001\022\024\n\020Compre"
      "ssTypeZlib\020\002\022\026\n\022CompressTypeSnappy\020\003\022\023\n\017"
      "CompressTypeLZ4\020\004\022\023\n\017CompressTypeMax\020\005B\003"
      "\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "frpc.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_frpc_2eproto
namespace frpc {
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_frpc_2eproto::file_level_enum_descriptors[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageID_descriptor() {
  protobuf_frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_frpc_2eproto::file_level_enum_descriptors[1];
}
bool MessageID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReturnCode_descriptor() {
  protobuf_frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_frpc_2eproto::file_level_enum_descriptors[2];
}
bool ReturnCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CompressType_descriptor() {
  protobuf_frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_frpc_2eproto::file_level_enum_descriptors[3];
}
bool CompressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FastMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastMessage::kVersionFieldNumber;
const int FastMessage::kMagicFieldNumber;
const int FastMessage::kTypeFieldNumber;
const int FastMessage::kLengthFieldNumber;
const int FastMessage::kCallIdFieldNumber;
const int FastMessage::kOpcodeFieldNumber;
const int FastMessage::kCompressFieldNumber;
const int FastMessage::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastMessage::FastMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_frpc_2eproto::scc_info_FastMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:frpc.FastMessage)
}
FastMessage::FastMessage(const FastMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&version_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:frpc.FastMessage)
}

void FastMessage::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&version_)) + sizeof(retcode_));
}

FastMessage::~FastMessage() {
  // @@protoc_insertion_point(destructor:frpc.FastMessage)
  SharedDtor();
}

void FastMessage::SharedDtor() {
}

void FastMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FastMessage::descriptor() {
  ::protobuf_frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FastMessage& FastMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_frpc_2eproto::scc_info_FastMessage.base);
  return *internal_default_instance();
}


void FastMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:frpc.FastMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&version_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool FastMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frpc.FastMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 magic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &magic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 call_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &call_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 opcode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 compress = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &compress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 retcode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frpc.FastMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frpc.FastMessage)
  return false;
#undef DO_
}

void FastMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frpc.FastMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->version(), output);
  }

  // fixed32 magic = 2;
  if (this->magic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->magic(), output);
  }

  // fixed32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->type(), output);
  }

  // fixed32 length = 4;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->length(), output);
  }

  // fixed32 call_id = 5;
  if (this->call_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->call_id(), output);
  }

  // fixed32 opcode = 8;
  if (this->opcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->opcode(), output);
  }

  // fixed32 compress = 9;
  if (this->compress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->compress(), output);
  }

  // fixed32 retcode = 10;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:frpc.FastMessage)
}

::google::protobuf::uint8* FastMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frpc.FastMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->version(), target);
  }

  // fixed32 magic = 2;
  if (this->magic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->magic(), target);
  }

  // fixed32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->type(), target);
  }

  // fixed32 length = 4;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->length(), target);
  }

  // fixed32 call_id = 5;
  if (this->call_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->call_id(), target);
  }

  // fixed32 opcode = 8;
  if (this->opcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->opcode(), target);
  }

  // fixed32 compress = 9;
  if (this->compress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->compress(), target);
  }

  // fixed32 retcode = 10;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frpc.FastMessage)
  return target;
}

size_t FastMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frpc.FastMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // fixed32 version = 1;
  if (this->version() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 magic = 2;
  if (this->magic() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 type = 3;
  if (this->type() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 length = 4;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 call_id = 5;
  if (this->call_id() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 opcode = 8;
  if (this->opcode() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 compress = 9;
  if (this->compress() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 retcode = 10;
  if (this->retcode() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frpc.FastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FastMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FastMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frpc.FastMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frpc.FastMessage)
    MergeFrom(*source);
  }
}

void FastMessage::MergeFrom(const FastMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frpc.FastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.magic() != 0) {
    set_magic(from.magic());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.call_id() != 0) {
    set_call_id(from.call_id());
  }
  if (from.opcode() != 0) {
    set_opcode(from.opcode());
  }
  if (from.compress() != 0) {
    set_compress(from.compress());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void FastMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frpc.FastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastMessage::CopyFrom(const FastMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frpc.FastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastMessage::IsInitialized() const {
  return true;
}

void FastMessage::Swap(FastMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FastMessage::InternalSwap(FastMessage* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(magic_, other->magic_);
  swap(type_, other->type_);
  swap(length_, other->length_);
  swap(call_id_, other->call_id_);
  swap(opcode_, other->opcode_);
  swap(compress_, other->compress_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FastMessage::GetMetadata() const {
  protobuf_frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace frpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::frpc::FastMessage* Arena::CreateMaybeMessage< ::frpc::FastMessage >(Arena* arena) {
  return Arena::CreateInternal< ::frpc::FastMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
